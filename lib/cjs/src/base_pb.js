"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file base.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogbookComplete = exports.LogbookConcise = exports.LogbookLogComplete = exports.LogbookLogConcise = exports.IdentifierUsername = exports.IdentifierWithUserComment = exports.SearchKeyRequest = exports.IdentifierList = exports.Identifier = exports.Metadata = exports.StringResponse = exports.CountResponse = exports.CountForProductRequest = exports.CountInLocationRequest = exports.CountInEntityRequest = exports.CountRequest = exports.ActiveForProductRequest = exports.ActiveInLocationRequest = exports.ActiveInEntityRequest = exports.ActiveRequest = exports.FileResponseList = exports.FileResponse = exports.ImageResponse = exports.ImageAssignRequest = exports.URLResponse = exports.BooleanResponse = exports.Empty = exports.DOWNLOADED_STATUS = exports.LOGBOOK_OPERATION = exports.DEVICE_TYPE = exports.SORT_ORDER = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
/**
 *
 * Describes the order in which the records need to be returned
 *
 * @generated from enum scanswift.SORT_ORDER
 */
var SORT_ORDER;
(function (SORT_ORDER) {
    /**
     * Fetch results in the ascending order of the provided sort key
     *
     * @generated from enum value: ASCENDING_UNSPECIFIED = 0;
     */
    SORT_ORDER[SORT_ORDER["ASCENDING_UNSPECIFIED"] = 0] = "ASCENDING_UNSPECIFIED";
    /**
     * Fetch results in the descending order of the provided sort key
     *
     * @generated from enum value: DESCENDING = 1;
     */
    SORT_ORDER[SORT_ORDER["DESCENDING"] = 1] = "DESCENDING";
})(SORT_ORDER || (exports.SORT_ORDER = SORT_ORDER = {}));
// Retrieve enum metadata with: proto3.getEnumType(SORT_ORDER)
protobuf_1.proto3.util.setEnumType(SORT_ORDER, "scanswift.SORT_ORDER", [
    { no: 0, name: "ASCENDING_UNSPECIFIED" },
    { no: 1, name: "DESCENDING" },
]);
/**
 *
 * Describes the supported device types
 *
 * @generated from enum scanswift.DEVICE_TYPE
 */
var DEVICE_TYPE;
(function (DEVICE_TYPE) {
    /**
     * Web browser
     *
     * @generated from enum value: WEB_UNSPECIFIED = 0;
     */
    DEVICE_TYPE[DEVICE_TYPE["WEB_UNSPECIFIED"] = 0] = "WEB_UNSPECIFIED";
    /**
     * Mobile device
     *
     * @generated from enum value: MOBILE = 1;
     */
    DEVICE_TYPE[DEVICE_TYPE["MOBILE"] = 1] = "MOBILE";
    /**
     * Desktop application
     *
     * @generated from enum value: DESKTOP = 2;
     */
    DEVICE_TYPE[DEVICE_TYPE["DESKTOP"] = 2] = "DESKTOP";
})(DEVICE_TYPE || (exports.DEVICE_TYPE = DEVICE_TYPE = {}));
// Retrieve enum metadata with: proto3.getEnumType(DEVICE_TYPE)
protobuf_1.proto3.util.setEnumType(DEVICE_TYPE, "scanswift.DEVICE_TYPE", [
    { no: 0, name: "WEB_UNSPECIFIED" },
    { no: 1, name: "MOBILE" },
    { no: 2, name: "DESKTOP" },
]);
/**
 *
 * Describes all the possible values within a logbook operation
 *
 * @generated from enum scanswift.LOGBOOK_OPERATION
 */
var LOGBOOK_OPERATION;
(function (LOGBOOK_OPERATION) {
    /**
     * Create a resource
     *
     * @generated from enum value: CREATE_UNSPECIFIED = 0;
     */
    LOGBOOK_OPERATION[LOGBOOK_OPERATION["CREATE_UNSPECIFIED"] = 0] = "CREATE_UNSPECIFIED";
    /**
     * Update a resource
     *
     * @generated from enum value: UPDATE = 1;
     */
    LOGBOOK_OPERATION[LOGBOOK_OPERATION["UPDATE"] = 1] = "UPDATE";
    /**
     * Archive a resource
     *
     * @generated from enum value: ARCHIVE = 2;
     */
    LOGBOOK_OPERATION[LOGBOOK_OPERATION["ARCHIVE"] = 2] = "ARCHIVE";
    /**
     * Restore a resource
     *
     * @generated from enum value: RESTORE = 3;
     */
    LOGBOOK_OPERATION[LOGBOOK_OPERATION["RESTORE"] = 3] = "RESTORE";
})(LOGBOOK_OPERATION || (exports.LOGBOOK_OPERATION = LOGBOOK_OPERATION = {}));
// Retrieve enum metadata with: proto3.getEnumType(LOGBOOK_OPERATION)
protobuf_1.proto3.util.setEnumType(LOGBOOK_OPERATION, "scanswift.LOGBOOK_OPERATION", [
    { no: 0, name: "CREATE_UNSPECIFIED" },
    { no: 1, name: "UPDATE" },
    { no: 2, name: "ARCHIVE" },
    { no: 3, name: "RESTORE" },
]);
/**
 *
 * Describes all the available download states for batches, packagings and shippings
 *
 * @generated from enum scanswift.DOWNLOADED_STATUS
 */
var DOWNLOADED_STATUS;
(function (DOWNLOADED_STATUS) {
    /**
     * Record is any ?9useful for filter requests
     *
     * @generated from enum value: DOWNLOADED_STATUS_ANY_UNSPECIFIED = 0;
     */
    DOWNLOADED_STATUS[DOWNLOADED_STATUS["DOWNLOADED_STATUS_ANY_UNSPECIFIED"] = 0] = "DOWNLOADED_STATUS_ANY_UNSPECIFIED";
    /**
     * Record has been downloaded
     *
     * @generated from enum value: DOWNLOADED_STATUS_TRUE = 1;
     */
    DOWNLOADED_STATUS[DOWNLOADED_STATUS["DOWNLOADED_STATUS_TRUE"] = 1] = "DOWNLOADED_STATUS_TRUE";
    /**
     * Record has not been downloaded
     *
     * @generated from enum value: DOWNLOADED_STATUS_FALSE = 2;
     */
    DOWNLOADED_STATUS[DOWNLOADED_STATUS["DOWNLOADED_STATUS_FALSE"] = 2] = "DOWNLOADED_STATUS_FALSE";
})(DOWNLOADED_STATUS || (exports.DOWNLOADED_STATUS = DOWNLOADED_STATUS = {}));
// Retrieve enum metadata with: proto3.getEnumType(DOWNLOADED_STATUS)
protobuf_1.proto3.util.setEnumType(DOWNLOADED_STATUS, "scanswift.DOWNLOADED_STATUS", [
    { no: 0, name: "DOWNLOADED_STATUS_ANY_UNSPECIFIED" },
    { no: 1, name: "DOWNLOADED_STATUS_TRUE" },
    { no: 2, name: "DOWNLOADED_STATUS_FALSE" },
]);
/**
 *
 * Describes an empty object
 *
 * @generated from message scanswift.Empty
 */
class Empty extends protobuf_1.Message {
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Empty().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Empty().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Empty().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Empty, a, b);
    }
}
exports.Empty = Empty;
Empty.runtime = protobuf_1.proto3;
Empty.typeName = "scanswift.Empty";
Empty.fields = protobuf_1.proto3.util.newFieldList(() => []);
/**
 *
 * Describes the boolean response
 *
 * @generated from message scanswift.BooleanResponse
 */
class BooleanResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores if the value is true or false
         *
         * @generated from field: bool value = 1;
         */
        this.value = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BooleanResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BooleanResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BooleanResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BooleanResponse, a, b);
    }
}
exports.BooleanResponse = BooleanResponse;
BooleanResponse.runtime = protobuf_1.proto3;
BooleanResponse.typeName = "scanswift.BooleanResponse";
BooleanResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 *
 * Describes the response that contains a URL endpoint
 *
 * @generated from message scanswift.URLResponse
 */
class URLResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the url of the resource
         *
         * @generated from field: string url = 1;
         */
        this.url = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new URLResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new URLResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new URLResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(URLResponse, a, b);
    }
}
exports.URLResponse = URLResponse;
URLResponse.runtime = protobuf_1.proto3;
URLResponse.typeName = "scanswift.URLResponse";
URLResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the request payload for assigning an image to a record
 *
 * @generated from message scanswift.ImageAssignRequest
 */
class ImageAssignRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the record
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 2;
         */
        this.userComment = "";
        /**
         * The content of the image
         *
         * @generated from field: bytes image = 10;
         */
        this.image = new Uint8Array(0);
        /**
         * The MIME type of the image
         *
         * @generated from field: string mime_type = 11;
         */
        this.mimeType = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImageAssignRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImageAssignRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImageAssignRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImageAssignRequest, a, b);
    }
}
exports.ImageAssignRequest = ImageAssignRequest;
ImageAssignRequest.runtime = protobuf_1.proto3;
ImageAssignRequest.typeName = "scanswift.ImageAssignRequest";
ImageAssignRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 11, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes a generic response that consists of info of an image
 *
 * @generated from message scanswift.ImageResponse
 */
class ImageResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the raw image content
         *
         * @generated from field: bytes image = 1;
         */
        this.image = new Uint8Array(0);
        /**
         * Stores the MIME type of the image
         *
         * @generated from field: string mime_type = 2;
         */
        this.mimeType = "";
        /**
         * The timestamp of when the image was captured
         *
         * @generated from field: int64 timestamp = 3;
         */
        this.timestamp = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ImageResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ImageResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ImageResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ImageResponse, a, b);
    }
}
exports.ImageResponse = ImageResponse;
ImageResponse.runtime = protobuf_1.proto3;
ImageResponse.typeName = "scanswift.ImageResponse";
ImageResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the response payload that consists of a file
 *
 * @generated from message scanswift.FileResponse
 */
class FileResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the raw file content
         *
         * @generated from field: bytes content = 1;
         */
        this.content = new Uint8Array(0);
        /**
         * Stores the MIME type of the file
         *
         * @generated from field: string mime_type = 2;
         */
        this.mimeType = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FileResponse, a, b);
    }
}
exports.FileResponse = FileResponse;
FileResponse.runtime = protobuf_1.proto3;
FileResponse.typeName = "scanswift.FileResponse";
FileResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "mime_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the response payload that consists of a file list
 *
 * @generated from message scanswift.FileResponseList
 */
class FileResponseList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of files
         *
         * @generated from field: repeated scanswift.FileResponse list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new FileResponseList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new FileResponseList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new FileResponseList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(FileResponseList, a, b);
    }
}
exports.FileResponseList = FileResponseList;
FileResponseList.runtime = protobuf_1.proto3;
FileResponseList.typeName = "scanswift.FileResponseList";
FileResponseList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: FileResponse, repeated: true },
]);
/**
 *
 * Describes the status of the records returned to a request
 *
 * @generated from message scanswift.ActiveRequest
 */
class ActiveRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Used in ViewAll procedural calls, to denote if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ActiveRequest, a, b);
    }
}
exports.ActiveRequest = ActiveRequest;
ActiveRequest.runtime = protobuf_1.proto3;
ActiveRequest.typeName = "scanswift.ActiveRequest";
ActiveRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 *
 * Describes the status of the records returned to a request specific to an entity
 *
 * @generated from message scanswift.ActiveInEntityRequest
 */
class ActiveInEntityRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Denotes if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * Stores the entity UUID and limits the query to the appropriate entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveInEntityRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveInEntityRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveInEntityRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ActiveInEntityRequest, a, b);
    }
}
exports.ActiveInEntityRequest = ActiveInEntityRequest;
ActiveInEntityRequest.runtime = protobuf_1.proto3;
ActiveInEntityRequest.typeName = "scanswift.ActiveInEntityRequest";
ActiveInEntityRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the status of the records returned to a request specific to a locaation
 *
 * @generated from message scanswift.ActiveInLocationRequest
 */
class ActiveInLocationRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Denotes if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * Stores the location UUID and limits the query to the appropriate location
         *
         * @generated from field: string location_uuid = 2;
         */
        this.locationUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveInLocationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveInLocationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveInLocationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ActiveInLocationRequest, a, b);
    }
}
exports.ActiveInLocationRequest = ActiveInLocationRequest;
ActiveInLocationRequest.runtime = protobuf_1.proto3;
ActiveInLocationRequest.typeName = "scanswift.ActiveInLocationRequest";
ActiveInLocationRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the status of the records returned to a request specific to a product
 *
 * @generated from message scanswift.ActiveForProductRequest
 */
class ActiveForProductRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Denotes if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * Stores the product UUID and limits the query to the appropriate product
         *
         * @generated from field: string product_uuid = 2;
         */
        this.productUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ActiveForProductRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ActiveForProductRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ActiveForProductRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ActiveForProductRequest, a, b);
    }
}
exports.ActiveForProductRequest = ActiveForProductRequest;
ActiveForProductRequest.runtime = protobuf_1.proto3;
ActiveForProductRequest.typeName = "scanswift.ActiveForProductRequest";
ActiveForProductRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the payload for a request to determine the count of records
 *
 * @generated from message scanswift.CountRequest
 */
class CountRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Denotes if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountRequest, a, b);
    }
}
exports.CountRequest = CountRequest;
CountRequest.runtime = protobuf_1.proto3;
CountRequest.typeName = "scanswift.CountRequest";
CountRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
]);
/**
 *
 * Describes the payload for a request to determine the count of records within a specific entity
 *
 * @generated from message scanswift.CountInEntityRequest
 */
class CountInEntityRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Denotes if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * Stores the entity UUID and limits the query to the appropriate entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountInEntityRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountInEntityRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountInEntityRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountInEntityRequest, a, b);
    }
}
exports.CountInEntityRequest = CountInEntityRequest;
CountInEntityRequest.runtime = protobuf_1.proto3;
CountInEntityRequest.typeName = "scanswift.CountInEntityRequest";
CountInEntityRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the payload for a request to determine the count of records within a specific entity's location
 *
 * @generated from message scanswift.CountInLocationRequest
 */
class CountInLocationRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Denotes if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * Stores the location UUID and limits the query to the appropriate location
         *
         * @generated from field: string location_uuid = 2;
         */
        this.locationUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountInLocationRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountInLocationRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountInLocationRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountInLocationRequest, a, b);
    }
}
exports.CountInLocationRequest = CountInLocationRequest;
CountInLocationRequest.runtime = protobuf_1.proto3;
CountInLocationRequest.typeName = "scanswift.CountInLocationRequest";
CountInLocationRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the payload for a request to determine the count of records within a specific product
 *
 * @generated from message scanswift.CountForProductRequest
 */
class CountForProductRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Denotes if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * Stores the product UUID and limits the query to the appropriate product
         *
         * @generated from field: string product_uuid = 2;
         */
        this.productUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountForProductRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountForProductRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountForProductRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountForProductRequest, a, b);
    }
}
exports.CountForProductRequest = CountForProductRequest;
CountForProductRequest.runtime = protobuf_1.proto3;
CountForProductRequest.typeName = "scanswift.CountForProductRequest";
CountForProductRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the count response
 *
 * @generated from message scanswift.CountResponse
 */
class CountResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of records
         *
         * @generated from field: int64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new CountResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CountResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CountResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CountResponse, a, b);
    }
}
exports.CountResponse = CountResponse;
CountResponse.runtime = protobuf_1.proto3;
CountResponse.typeName = "scanswift.CountResponse";
CountResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes a string response
 *
 * @generated from message scanswift.StringResponse
 */
class StringResponse extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores the message
         *
         * @generated from field: string value = 1;
         */
        this.value = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new StringResponse().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new StringResponse().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new StringResponse().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(StringResponse, a, b);
    }
}
exports.StringResponse = StringResponse;
StringResponse.runtime = protobuf_1.proto3;
StringResponse.typeName = "scanswift.StringResponse";
StringResponse.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the metadata of each resource
 *
 * @generated from message scanswift.Metadata
 */
class Metadata extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * ID of the resource
         *
         * @generated from field: int64 id = 1;
         */
        this.id = protobuf_1.protoInt64.zero;
        /**
         * UUID of the resource
         *
         * @generated from field: string uuid = 5;
         */
        this.uuid = "";
        /**
         * Stores the UUID of the user who added this resource
         *
         * @generated from field: string added_by_user_uuid = 6;
         */
        this.addedByUserUuid = "";
        /**
         * Represents if the resource is active
         *
         * @generated from field: bool is_active = 7;
         */
        this.isActive = false;
        /**
         * Stores the timestamp of when the resource was created
         *
         * @generated from field: int64 created_at = 8;
         */
        this.createdAt = protobuf_1.protoInt64.zero;
        /**
         * Stores the timestamp of when the resource was last modified
         *
         * @generated from field: int64 modified_at = 9;
         */
        this.modifiedAt = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Metadata().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Metadata().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Metadata().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Metadata, a, b);
    }
}
exports.Metadata = Metadata;
Metadata.runtime = protobuf_1.proto3;
Metadata.typeName = "scanswift.Metadata";
Metadata.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "added_by_user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "created_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "modified_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the UUID identifier
 *
 * @generated from message scanswift.Identifier
 */
class Identifier extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the resource
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Identifier().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Identifier().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Identifier().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Identifier, a, b);
    }
}
exports.Identifier = Identifier;
Identifier.runtime = protobuf_1.proto3;
Identifier.typeName = "scanswift.Identifier";
Identifier.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the list of UUID identifiers
 *
 * @generated from message scanswift.IdentifierList
 */
class IdentifierList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of UUIDs
         *
         * @generated from field: repeated scanswift.Identifier list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifierList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifierList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifierList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifierList, a, b);
    }
}
exports.IdentifierList = IdentifierList;
IdentifierList.runtime = protobuf_1.proto3;
IdentifierList.typeName = "scanswift.IdentifierList";
IdentifierList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Identifier, repeated: true },
]);
/**
 *
 * Describes a simple search key request
 *
 * @generated from message scanswift.SearchKeyRequest
 */
class SearchKeyRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The search key
         *
         * @generated from field: string search_key = 1;
         */
        this.searchKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SearchKeyRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SearchKeyRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SearchKeyRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SearchKeyRequest, a, b);
    }
}
exports.SearchKeyRequest = SearchKeyRequest;
SearchKeyRequest.runtime = protobuf_1.proto3;
SearchKeyRequest.typeName = "scanswift.SearchKeyRequest";
SearchKeyRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the UUID identifier with a user comment. Useful when an operation needs to be performed, and a user comment needs to be recorded
 *
 * @generated from message scanswift.IdentifierWithUserComment
 */
class IdentifierWithUserComment extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the resource
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 2;
         */
        this.userComment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifierWithUserComment().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifierWithUserComment().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifierWithUserComment().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifierWithUserComment, a, b);
    }
}
exports.IdentifierWithUserComment = IdentifierWithUserComment;
IdentifierWithUserComment.runtime = protobuf_1.proto3;
IdentifierWithUserComment.typeName = "scanswift.IdentifierWithUserComment";
IdentifierWithUserComment.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the username that could be used as an identifier
 *
 * @generated from message scanswift.IdentifierUsername
 */
class IdentifierUsername extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The username of the user
         *
         * @generated from field: string username = 1;
         */
        this.username = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new IdentifierUsername().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new IdentifierUsername().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new IdentifierUsername().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(IdentifierUsername, a, b);
    }
}
exports.IdentifierUsername = IdentifierUsername;
IdentifierUsername.runtime = protobuf_1.proto3;
IdentifierUsername.typeName = "scanswift.IdentifierUsername";
IdentifierUsername.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes each parameter that's part of the logbook (does not include historical data of the object)
 *
 * @generated from message scanswift.LogbookLogConcise
 */
class LogbookLogConcise extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the resource
         *
         * @generated from field: string ref_uuid = 10;
         */
        this.refUuid = "";
        /**
         * The operation that was performed
         *
         * @generated from field: scanswift.LOGBOOK_OPERATION operation = 11;
         */
        this.operation = LOGBOOK_OPERATION.CREATE_UNSPECIFIED;
        /**
         * Stores the UUID of the user who performed this operation
         *
         * @generated from field: string added_by_user_uuid = 12;
         */
        this.addedByUserUuid = "";
        /**
         * The comment generated by the application
         *
         * @generated from field: string app_comment = 13;
         */
        this.appComment = "";
        /**
         * The comment entered by the user
         *
         * @generated from field: string user_comment = 14;
         */
        this.userComment = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogbookLogConcise().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogbookLogConcise().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogbookLogConcise().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogbookLogConcise, a, b);
    }
}
exports.LogbookLogConcise = LogbookLogConcise;
LogbookLogConcise.runtime = protobuf_1.proto3;
LogbookLogConcise.typeName = "scanswift.LogbookLogConcise";
LogbookLogConcise.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "operation", kind: "enum", T: protobuf_1.proto3.getEnumType(LOGBOOK_OPERATION) },
    { no: 12, name: "added_by_user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes each parameter that's part of the logbook (includes historical data of the object)
 *
 * @generated from message scanswift.LogbookLogComplete
 */
class LogbookLogComplete extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the resource
         *
         * @generated from field: string ref_uuid = 10;
         */
        this.refUuid = "";
        /**
         * The operation that was performed
         *
         * @generated from field: scanswift.LOGBOOK_OPERATION operation = 11;
         */
        this.operation = LOGBOOK_OPERATION.CREATE_UNSPECIFIED;
        /**
         * Stores the UUID of the user who performed this operation
         *
         * @generated from field: string added_by_user_uuid = 12;
         */
        this.addedByUserUuid = "";
        /**
         * The comment generated by the application
         *
         * @generated from field: string app_comment = 13;
         */
        this.appComment = "";
        /**
         * The comment entered by the user
         *
         * @generated from field: string user_comment = 14;
         */
        this.userComment = "";
        /**
         * The marshalled object at the time the log was created
         *
         * @generated from field: bytes previous_data = 15;
         */
        this.previousData = new Uint8Array(0);
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogbookLogComplete().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogbookLogComplete().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogbookLogComplete().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogbookLogComplete, a, b);
    }
}
exports.LogbookLogComplete = LogbookLogComplete;
LogbookLogComplete.runtime = protobuf_1.proto3;
LogbookLogComplete.typeName = "scanswift.LogbookLogComplete";
LogbookLogComplete.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 10, name: "ref_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "operation", kind: "enum", T: protobuf_1.proto3.getEnumType(LOGBOOK_OPERATION) },
    { no: 12, name: "added_by_user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "app_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "previous_data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
]);
/**
 *
 * Describes the list of logs from the logbook that's sent as a response to a logbook query
 *
 * @generated from message scanswift.LogbookConcise
 */
class LogbookConcise extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of logs
         *
         * @generated from field: repeated scanswift.LogbookLogConcise logs = 1;
         */
        this.logs = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogbookConcise().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogbookConcise().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogbookConcise().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogbookConcise, a, b);
    }
}
exports.LogbookConcise = LogbookConcise;
LogbookConcise.runtime = protobuf_1.proto3;
LogbookConcise.typeName = "scanswift.LogbookConcise";
LogbookConcise.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: LogbookLogConcise, repeated: true },
]);
/**
 *
 * Describes the complete list of logs from the logbook that's sent as a response to a logbook query
 *
 * @generated from message scanswift.LogbookComplete
 */
class LogbookComplete extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of logs
         *
         * @generated from field: repeated scanswift.LogbookLogComplete logs = 1;
         */
        this.logs = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new LogbookComplete().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new LogbookComplete().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new LogbookComplete().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(LogbookComplete, a, b);
    }
}
exports.LogbookComplete = LogbookComplete;
LogbookComplete.runtime = protobuf_1.proto3;
LogbookComplete.typeName = "scanswift.LogbookComplete";
LogbookComplete.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: LogbookLogComplete, repeated: true },
]);
