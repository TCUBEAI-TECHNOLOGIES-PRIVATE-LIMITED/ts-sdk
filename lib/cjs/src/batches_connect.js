"use strict";
// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file batches.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchesService = void 0;
const batches_pb_js_1 = require("./batches_pb.js");
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the methods applicable on each batch
 *
 * @generated from service scanswift.BatchesService
 */
exports.BatchesService = {
    typeName: "scanswift.BatchesService",
    methods: {
        /**
         * Create a batch
         *
         * // Update a batch
         * rpc Update (BatchesServiceUpdateRequest) returns (Batch);
         *
         * @generated from rpc scanswift.BatchesService.Create
         */
        create: {
            name: "Create",
            I: batches_pb_js_1.BatchesServiceCreateRequest,
            O: batches_pb_js_1.Batch,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Archive the batch
         *
         * @generated from rpc scanswift.BatchesService.Archive
         */
        archive: {
            name: "Archive",
            I: base_pb_js_1.IdentifierWithUserComment,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Restore the batch
         *
         * @generated from rpc scanswift.BatchesService.Restore
         */
        restore: {
            name: "Restore",
            I: base_pb_js_1.IdentifierWithUserComment,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Recall the batch
         *
         * @generated from rpc scanswift.BatchesService.Recall
         */
        recall: {
            name: "Recall",
            I: base_pb_js_1.IdentifierWithUserComment,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Commission unused serials
         *
         * @generated from rpc scanswift.BatchesService.CommissionUnused
         */
        commissionUnused: {
            name: "CommissionUnused",
            I: batches_pb_js_1.BatchesServiceCommissioningRequest,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Decommission unused serials
         *
         * @generated from rpc scanswift.BatchesService.DecommissionUnused
         */
        decommissionUnused: {
            name: "DecommissionUnused",
            I: batches_pb_js_1.BatchesServiceCommissioningRequest,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View by UUID
         *
         * @generated from rpc scanswift.BatchesService.ViewByUUID
         */
        viewByUUID: {
            name: "ViewByUUID",
            I: base_pb_js_1.Identifier,
            O: batches_pb_js_1.Batch,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View by Code
         *
         * @generated from rpc scanswift.BatchesService.ViewByCode
         */
        viewByCode: {
            name: "ViewByCode",
            I: base_pb_js_1.SearchKeyRequest,
            O: batches_pb_js_1.Batch,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View all batches
         *
         * @generated from rpc scanswift.BatchesService.ViewAll
         */
        viewAll: {
            name: "ViewAll",
            I: base_pb_js_1.ActiveInEntityRequest,
            O: batches_pb_js_1.BatchesList,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View batches with pagination
         *
         * @generated from rpc scanswift.BatchesService.ViewWithPagination
         */
        viewWithPagination: {
            name: "ViewWithPagination",
            I: batches_pb_js_1.BatchesServicePaginationReq,
            O: batches_pb_js_1.BatchPaginationResp,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Download all the serials (in the given state) within the batch as a PDF
         *
         * @generated from rpc scanswift.BatchesService.DownloadSerialsAsPDF
         */
        downloadSerialsAsPDF: {
            name: "DownloadSerialsAsPDF",
            I: batches_pb_js_1.BatchIdentifierWithSerialState,
            O: base_pb_js_1.FileResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Download all the serials (in the given state) within the batch as a CSV file
         *
         * @generated from rpc scanswift.BatchesService.DownloadSerialsAsCSV
         */
        downloadSerialsAsCSV: {
            name: "DownloadSerialsAsCSV",
            I: batches_pb_js_1.BatchIdentifierWithSerialState,
            O: base_pb_js_1.FileResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Download all the serials (in the given state) within the batch as a single image
         *
         * @generated from rpc scanswift.BatchesService.DownloadSerialsAsImage
         */
        downloadSerialsAsImage: {
            name: "DownloadSerialsAsImage",
            I: batches_pb_js_1.BatchIdentifierWithSerialState,
            O: base_pb_js_1.FileResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Download all the serials (in the given state) within the batch as multiple images
         *
         * @generated from rpc scanswift.BatchesService.DownloadSerialsAsImagesWithDescriptions
         */
        downloadSerialsAsImagesWithDescriptions: {
            name: "DownloadSerialsAsImagesWithDescriptions",
            I: batches_pb_js_1.BatchIdentifierWithSerialState,
            O: base_pb_js_1.FileResponseList,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View all that match the given search key
         *
         * @generated from rpc scanswift.BatchesService.SearchAll
         */
        searchAll: {
            name: "SearchAll",
            I: batches_pb_js_1.BatchesServiceSearchAllReq,
            O: batches_pb_js_1.BatchesList,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View all that match the given filter criteria
         *
         * @generated from rpc scanswift.BatchesService.Filter
         */
        filter: {
            name: "Filter",
            I: batches_pb_js_1.BatchesServiceFilterReq,
            O: batches_pb_js_1.BatchesList,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Count
         *
         * @generated from rpc scanswift.BatchesService.Count
         */
        count: {
            name: "Count",
            I: base_pb_js_1.CountInEntityRequest,
            O: base_pb_js_1.CountResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};
