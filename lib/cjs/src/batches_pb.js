"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file batches.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.BatchIdentifierWithSerialState = exports.BatchesServiceCommissioningRequest = exports.BatchesServiceSearchAllReq = exports.BatchesServiceFilterReq = exports.BatchPaginationResp = exports.BatchesServicePaginationReq = exports.BatchesList = exports.Batch = exports.BatchesServiceCreateRequest = exports.BATCH_SORT_KEY = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
const serials_pb_js_1 = require("./serials_pb.js");
/**
 *
 * Describes the available sort keys for retrieving batches
 *
 * @generated from enum tcube.BATCH_SORT_KEY
 */
var BATCH_SORT_KEY;
(function (BATCH_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: BATCH_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    BATCH_SORT_KEY[BATCH_SORT_KEY["BATCH_SORT_KEY_ID_UNSPECIFIED"] = 0] = "BATCH_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: BATCH_SORT_KEY_CREATED_AT = 1;
     */
    BATCH_SORT_KEY[BATCH_SORT_KEY["BATCH_SORT_KEY_CREATED_AT"] = 1] = "BATCH_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: BATCH_SORT_KEY_MODIFIED_AT = 2;
     */
    BATCH_SORT_KEY[BATCH_SORT_KEY["BATCH_SORT_KEY_MODIFIED_AT"] = 2] = "BATCH_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by name
     *
     * @generated from enum value: BATCH_SORT_KEY_NAME = 10;
     */
    BATCH_SORT_KEY[BATCH_SORT_KEY["BATCH_SORT_KEY_NAME"] = 10] = "BATCH_SORT_KEY_NAME";
    /**
     * Fetch ordered results by code
     *
     * @generated from enum value: BATCH_SORT_KEY_CODE = 11;
     */
    BATCH_SORT_KEY[BATCH_SORT_KEY["BATCH_SORT_KEY_CODE"] = 11] = "BATCH_SORT_KEY_CODE";
    /**
     * Fetch ordered results by the internal batch code
     *
     * @generated from enum value: BATCH_SORT_KEY_INTERNAL_CODE = 12;
     */
    BATCH_SORT_KEY[BATCH_SORT_KEY["BATCH_SORT_KEY_INTERNAL_CODE"] = 12] = "BATCH_SORT_KEY_INTERNAL_CODE";
})(BATCH_SORT_KEY || (exports.BATCH_SORT_KEY = BATCH_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(BATCH_SORT_KEY)
protobuf_1.proto3.util.setEnumType(BATCH_SORT_KEY, "tcube.BATCH_SORT_KEY", [
    { no: 0, name: "BATCH_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "BATCH_SORT_KEY_CREATED_AT" },
    { no: 2, name: "BATCH_SORT_KEY_MODIFIED_AT" },
    { no: 10, name: "BATCH_SORT_KEY_NAME" },
    { no: 11, name: "BATCH_SORT_KEY_CODE" },
    { no: 12, name: "BATCH_SORT_KEY_INTERNAL_CODE" },
]);
/**
 *
 * Describes the necessary data structure during creation of a batch
 *
 * @generated from message tcube.BatchesServiceCreateRequest
 */
class BatchesServiceCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 8;
         */
        this.locationUuid = "";
        /**
         * UUID of the product
         *
         * @generated from field: string product_uuid = 9;
         */
        this.productUuid = "";
        /**
         * The name of the batch
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * // Code of the batch
         * string code = 11 [(validate.rules).string.min_len = 1];
         * The number of serials that need to be created
         *
         * @generated from field: int64 quantity = 12;
         */
        this.quantity = protobuf_1.protoInt64.zero;
        /**
         * Internal code as entered by the entity
         *
         * @generated from field: string internal_code = 13;
         */
        this.internalCode = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchesServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchesServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchesServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BatchesServiceCreateRequest, a, b);
    }
}
exports.BatchesServiceCreateRequest = BatchesServiceCreateRequest;
BatchesServiceCreateRequest.runtime = protobuf_1.proto3;
BatchesServiceCreateRequest.typeName = "tcube.BatchesServiceCreateRequest";
BatchesServiceCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "internal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure of each batch on the platform
 *
 * @generated from message tcube.Batch
 */
class Batch extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 8;
         */
        this.locationUuid = "";
        /**
         * UUID of the product
         *
         * @generated from field: string product_uuid = 9;
         */
        this.productUuid = "";
        /**
         * The name of the batch
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the batch
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * The number of serials that have been created
         *
         * @generated from field: int64 quantity = 12;
         */
        this.quantity = protobuf_1.protoInt64.zero;
        /**
         * Internal code as entered by the entity
         *
         * @generated from field: string internal_code = 13;
         */
        this.internalCode = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Batch().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Batch().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Batch().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Batch, a, b);
    }
}
exports.Batch = Batch;
Batch.runtime = protobuf_1.proto3;
Batch.typeName = "tcube.Batch";
Batch.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "internal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure that stores a list of batches
 *
 * @generated from message tcube.BatchesList
 */
class BatchesList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of batches
         *
         * @generated from field: repeated tcube.Batch list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchesList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchesList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchesList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BatchesList, a, b);
    }
}
exports.BatchesList = BatchesList;
BatchesList.runtime = protobuf_1.proto3;
BatchesList.typeName = "tcube.BatchesList";
BatchesList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Batch, repeated: true },
]);
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.BatchesServicePaginationReq
 */
class BatchesServicePaginationReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.BATCH_SORT_KEY sort_key = 5;
         */
        this.sortKey = BATCH_SORT_KEY.BATCH_SORT_KEY_ID_UNSPECIFIED;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchesServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchesServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchesServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BatchesServicePaginationReq, a, b);
    }
}
exports.BatchesServicePaginationReq = BatchesServicePaginationReq;
BatchesServicePaginationReq.runtime = protobuf_1.proto3;
BatchesServicePaginationReq.typeName = "tcube.BatchesServicePaginationReq";
BatchesServicePaginationReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(BATCH_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.BatchPaginationResp
 */
class BatchPaginationResp extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of records in this payload
         *
         * @generated from field: int64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The total number of records that are available
         *
         * @generated from field: int64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        /**
         * The list of records
         *
         * @generated from field: repeated tcube.Batch payload = 3;
         */
        this.payload = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchPaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchPaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchPaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BatchPaginationResp, a, b);
    }
}
exports.BatchPaginationResp = BatchPaginationResp;
BatchPaginationResp.runtime = protobuf_1.proto3;
BatchPaginationResp.typeName = "tcube.BatchPaginationResp";
BatchPaginationResp.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Batch, repeated: true },
]);
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.BatchesServiceFilterReq
 */
class BatchesServiceFilterReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.BATCH_SORT_KEY sort_key = 5;
         */
        this.sortKey = BATCH_SORT_KEY.BATCH_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The minimum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_start = 6;
         */
        this.creationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_end = 7;
         */
        this.creationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 8;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the product
         *
         * @generated from field: string product_uuid = 10;
         */
        this.productUuid = "";
        /**
         * The name of the batch
         *
         * @generated from field: string name = 20;
         */
        this.name = "";
        /**
         * Code of the batch
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        /**
         * Internal code as entered by the entity
         *
         * @generated from field: string internal_code = 22;
         */
        this.internalCode = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchesServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchesServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchesServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BatchesServiceFilterReq, a, b);
    }
}
exports.BatchesServiceFilterReq = BatchesServiceFilterReq;
BatchesServiceFilterReq.runtime = protobuf_1.proto3;
BatchesServiceFilterReq.typeName = "tcube.BatchesServiceFilterReq";
BatchesServiceFilterReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(BATCH_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "internal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.BatchesServiceSearchAllReq
 */
class BatchesServiceSearchAllReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.BATCH_SORT_KEY sort_key = 5;
         */
        this.sortKey = BATCH_SORT_KEY.BATCH_SORT_KEY_ID_UNSPECIFIED;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the product
         *
         * @generated from field: string product_uuid = 10;
         */
        this.productUuid = "";
        /**
         * Describes the key with which the search operation needs to be performed
         *
         * @generated from field: string search_key = 11;
         */
        this.searchKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchesServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchesServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchesServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BatchesServiceSearchAllReq, a, b);
    }
}
exports.BatchesServiceSearchAllReq = BatchesServiceSearchAllReq;
BatchesServiceSearchAllReq.runtime = protobuf_1.proto3;
BatchesServiceSearchAllReq.typeName = "tcube.BatchesServiceSearchAllReq";
BatchesServiceSearchAllReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(BATCH_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the payload that is used to decommission serials within a batch
 *
 * @generated from message tcube.BatchesServiceCommissioningRequest
 */
class BatchesServiceCommissioningRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The UUID of the batch that needs to be decommissioned
         *
         * @generated from field: string batch_uuid = 10;
         */
        this.batchUuid = "";
        /**
         * UUID of the zone (this will be autoselected at the API, but keeping it here for future extension)
         *
         * @generated from field: string zone_uuid = 12;
         */
        this.zoneUuid = "";
        /**
         * The latitude of the location where this activity was registered
         *
         * @generated from field: double latitude = 13;
         */
        this.latitude = 0;
        /**
         * The longitude of the location where this activity was registered
         *
         * @generated from field: double longitude = 14;
         */
        this.longitude = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchesServiceCommissioningRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchesServiceCommissioningRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchesServiceCommissioningRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BatchesServiceCommissioningRequest, a, b);
    }
}
exports.BatchesServiceCommissioningRequest = BatchesServiceCommissioningRequest;
BatchesServiceCommissioningRequest.runtime = protobuf_1.proto3;
BatchesServiceCommissioningRequest.typeName = "tcube.BatchesServiceCommissioningRequest";
BatchesServiceCommissioningRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
/**
 *
 * Describes the request payload that consists of the batch identifier along with the state of the serials
 *
 * @generated from message tcube.BatchIdentifierWithSerialState
 */
class BatchIdentifierWithSerialState extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the batch
         *
         * @generated from field: string batch_uuid = 1;
         */
        this.batchUuid = "";
        /**
         * State of the serials
         *
         * @generated from field: tcube.SERIAL_STATE serial_state = 2;
         */
        this.serialState = serials_pb_js_1.SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new BatchIdentifierWithSerialState().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new BatchIdentifierWithSerialState().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new BatchIdentifierWithSerialState().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(BatchIdentifierWithSerialState, a, b);
    }
}
exports.BatchIdentifierWithSerialState = BatchIdentifierWithSerialState;
BatchIdentifierWithSerialState.runtime = protobuf_1.proto3;
BatchIdentifierWithSerialState.typeName = "tcube.BatchIdentifierWithSerialState";
BatchIdentifierWithSerialState.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "serial_state", kind: "enum", T: protobuf_1.proto3.getEnumType(serials_pb_js_1.SERIAL_STATE) },
]);
