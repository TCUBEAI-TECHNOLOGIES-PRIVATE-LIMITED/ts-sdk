"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file printers.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrintersServiceSearchAllReq = exports.PrintersServiceFilterReq = exports.PrinterPaginationResp = exports.PrintersServicePaginationReq = exports.PrintersList = exports.Printer = exports.PrintersServiceUpdateRequest = exports.PrintersServiceCreateRequest = exports.PRINTER_SORT_KEY = exports.PRINTER_MODE = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the available printer types
 *
 * @generated from enum tcube.PRINTER_MODE
 */
var PRINTER_MODE;
(function (PRINTER_MODE) {
    /**
     * Used only for filter requests
     *
     * @generated from enum value: PRINTER_MODE_ANY_UNSPECIFIED = 0;
     */
    PRINTER_MODE[PRINTER_MODE["PRINTER_MODE_ANY_UNSPECIFIED"] = 0] = "PRINTER_MODE_ANY_UNSPECIFIED";
    /**
     * ESC/POS (Epson) printer
     *
     * @generated from enum value: PRINTER_MODE_ESC_POS = 1;
     */
    PRINTER_MODE[PRINTER_MODE["PRINTER_MODE_ESC_POS"] = 1] = "PRINTER_MODE_ESC_POS";
    /**
     * Zebra printer
     *
     * @generated from enum value: PRINTER_MODE_ZEBRA = 2;
     */
    PRINTER_MODE[PRINTER_MODE["PRINTER_MODE_ZEBRA"] = 2] = "PRINTER_MODE_ZEBRA";
})(PRINTER_MODE || (exports.PRINTER_MODE = PRINTER_MODE = {}));
// Retrieve enum metadata with: proto3.getEnumType(PRINTER_MODE)
protobuf_1.proto3.util.setEnumType(PRINTER_MODE, "tcube.PRINTER_MODE", [
    { no: 0, name: "PRINTER_MODE_ANY_UNSPECIFIED" },
    { no: 1, name: "PRINTER_MODE_ESC_POS" },
    { no: 2, name: "PRINTER_MODE_ZEBRA" },
]);
/**
 *
 * Describes the available sort keys for retrieving printers
 *
 * @generated from enum tcube.PRINTER_SORT_KEY
 */
var PRINTER_SORT_KEY;
(function (PRINTER_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: PRINTER_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    PRINTER_SORT_KEY[PRINTER_SORT_KEY["PRINTER_SORT_KEY_ID_UNSPECIFIED"] = 0] = "PRINTER_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: PRINTER_SORT_KEY_CREATED_AT = 1;
     */
    PRINTER_SORT_KEY[PRINTER_SORT_KEY["PRINTER_SORT_KEY_CREATED_AT"] = 1] = "PRINTER_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: PRINTER_SORT_KEY_MODIFIED_AT = 2;
     */
    PRINTER_SORT_KEY[PRINTER_SORT_KEY["PRINTER_SORT_KEY_MODIFIED_AT"] = 2] = "PRINTER_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by name
     *
     * @generated from enum value: PRINTER_SORT_KEY_NAME = 10;
     */
    PRINTER_SORT_KEY[PRINTER_SORT_KEY["PRINTER_SORT_KEY_NAME"] = 10] = "PRINTER_SORT_KEY_NAME";
    /**
     * Fetch ordered results by code
     *
     * @generated from enum value: PRINTER_SORT_KEY_CODE = 11;
     */
    PRINTER_SORT_KEY[PRINTER_SORT_KEY["PRINTER_SORT_KEY_CODE"] = 11] = "PRINTER_SORT_KEY_CODE";
})(PRINTER_SORT_KEY || (exports.PRINTER_SORT_KEY = PRINTER_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(PRINTER_SORT_KEY)
protobuf_1.proto3.util.setEnumType(PRINTER_SORT_KEY, "tcube.PRINTER_SORT_KEY", [
    { no: 0, name: "PRINTER_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "PRINTER_SORT_KEY_CREATED_AT" },
    { no: 2, name: "PRINTER_SORT_KEY_MODIFIED_AT" },
    { no: 10, name: "PRINTER_SORT_KEY_NAME" },
    { no: 11, name: "PRINTER_SORT_KEY_CODE" },
]);
/**
 *
 * Describes the necessary data structure during creation of a printer
 *
 * @generated from message tcube.PrintersServiceCreateRequest
 */
class PrintersServiceCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * The name of the printer
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the printer
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * The printer mode
         *
         * @generated from field: tcube.PRINTER_MODE mode = 12;
         */
        this.mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;
        /**
         * The IP address of the printer
         *
         * @generated from field: string ip_address = 13;
         */
        this.ipAddress = "";
        /**
         * The port that the printer is configured on
         *
         * @generated from field: uint64 port = 14;
         */
        this.port = protobuf_1.protoInt64.zero;
        /**
         * Description of the printer
         *
         * @generated from field: string description = 15;
         */
        this.description = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PrintersServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PrintersServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PrintersServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PrintersServiceCreateRequest, a, b);
    }
}
exports.PrintersServiceCreateRequest = PrintersServiceCreateRequest;
PrintersServiceCreateRequest.runtime = protobuf_1.proto3;
PrintersServiceCreateRequest.typeName = "tcube.PrintersServiceCreateRequest";
PrintersServiceCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "mode", kind: "enum", T: protobuf_1.proto3.getEnumType(PRINTER_MODE) },
    { no: 13, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a printer
 *
 * @generated from message tcube.PrintersServiceUpdateRequest
 */
class PrintersServiceUpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The UUID of the resource that needs to be updated
         *
         * @generated from field: string uuid = 2;
         */
        this.uuid = "";
        /**
         * The name of the printer
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the printer
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * The printer mode
         *
         * @generated from field: tcube.PRINTER_MODE mode = 12;
         */
        this.mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;
        /**
         * The IP address of the printer
         *
         * @generated from field: string ip_address = 13;
         */
        this.ipAddress = "";
        /**
         * The port that the printer is configured on
         *
         * @generated from field: uint64 port = 14;
         */
        this.port = protobuf_1.protoInt64.zero;
        /**
         * Description of the printer
         *
         * @generated from field: string description = 15;
         */
        this.description = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PrintersServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PrintersServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PrintersServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PrintersServiceUpdateRequest, a, b);
    }
}
exports.PrintersServiceUpdateRequest = PrintersServiceUpdateRequest;
PrintersServiceUpdateRequest.runtime = protobuf_1.proto3;
PrintersServiceUpdateRequest.typeName = "tcube.PrintersServiceUpdateRequest";
PrintersServiceUpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "mode", kind: "enum", T: protobuf_1.proto3.getEnumType(PRINTER_MODE) },
    { no: 13, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure of each printer on the platform
 *
 * @generated from message tcube.Printer
 */
class Printer extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * The name of the printer
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the printer
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * The printer mode
         *
         * @generated from field: tcube.PRINTER_MODE mode = 12;
         */
        this.mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;
        /**
         * The IP address of the printer
         *
         * @generated from field: string ip_address = 13;
         */
        this.ipAddress = "";
        /**
         * The port that the printer is configured on
         *
         * @generated from field: uint64 port = 14;
         */
        this.port = protobuf_1.protoInt64.zero;
        /**
         * Description of the printer
         *
         * @generated from field: string description = 15;
         */
        this.description = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Printer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Printer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Printer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Printer, a, b);
    }
}
exports.Printer = Printer;
Printer.runtime = protobuf_1.proto3;
Printer.typeName = "tcube.Printer";
Printer.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "mode", kind: "enum", T: protobuf_1.proto3.getEnumType(PRINTER_MODE) },
    { no: 13, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure that stores a list of printers
 *
 * @generated from message tcube.PrintersList
 */
class PrintersList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of printers
         *
         * @generated from field: repeated tcube.Printer list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PrintersList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PrintersList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PrintersList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PrintersList, a, b);
    }
}
exports.PrintersList = PrintersList;
PrintersList.runtime = protobuf_1.proto3;
PrintersList.typeName = "tcube.PrintersList";
PrintersList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Printer, repeated: true },
]);
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.PrintersServicePaginationReq
 */
class PrintersServicePaginationReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.PRINTER_SORT_KEY sort_key = 5;
         */
        this.sortKey = PRINTER_SORT_KEY.PRINTER_SORT_KEY_ID_UNSPECIFIED;
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 6;
         */
        this.locationUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PrintersServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PrintersServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PrintersServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PrintersServicePaginationReq, a, b);
    }
}
exports.PrintersServicePaginationReq = PrintersServicePaginationReq;
PrintersServicePaginationReq.runtime = protobuf_1.proto3;
PrintersServicePaginationReq.typeName = "tcube.PrintersServicePaginationReq";
PrintersServicePaginationReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(PRINTER_SORT_KEY) },
    { no: 6, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.PrinterPaginationResp
 */
class PrinterPaginationResp extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of records in this payload
         *
         * @generated from field: int64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The total number of records that are available
         *
         * @generated from field: int64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        /**
         * The list of records
         *
         * @generated from field: repeated tcube.Printer payload = 3;
         */
        this.payload = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PrinterPaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PrinterPaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PrinterPaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PrinterPaginationResp, a, b);
    }
}
exports.PrinterPaginationResp = PrinterPaginationResp;
PrinterPaginationResp.runtime = protobuf_1.proto3;
PrinterPaginationResp.typeName = "tcube.PrinterPaginationResp";
PrinterPaginationResp.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Printer, repeated: true },
]);
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.PrintersServiceFilterReq
 */
class PrintersServiceFilterReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.PRINTER_SORT_KEY sort_key = 5;
         */
        this.sortKey = PRINTER_SORT_KEY.PRINTER_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The minimum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_start = 6;
         */
        this.creationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_end = 7;
         */
        this.creationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 8;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * The name of the printer
         *
         * @generated from field: string name = 20;
         */
        this.name = "";
        /**
         * Code of the printer
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        /**
         * The printer mode
         *
         * @generated from field: tcube.PRINTER_MODE mode = 22;
         */
        this.mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PrintersServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PrintersServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PrintersServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PrintersServiceFilterReq, a, b);
    }
}
exports.PrintersServiceFilterReq = PrintersServiceFilterReq;
PrintersServiceFilterReq.runtime = protobuf_1.proto3;
PrintersServiceFilterReq.typeName = "tcube.PrintersServiceFilterReq";
PrintersServiceFilterReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(PRINTER_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "mode", kind: "enum", T: protobuf_1.proto3.getEnumType(PRINTER_MODE) },
]);
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.PrintersServiceSearchAllReq
 */
class PrintersServiceSearchAllReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.PRINTER_SORT_KEY sort_key = 5;
         */
        this.sortKey = PRINTER_SORT_KEY.PRINTER_SORT_KEY_ID_UNSPECIFIED;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * Describes the key with which the search operation needs to be performed
         *
         * @generated from field: string search_key = 11;
         */
        this.searchKey = "";
        /**
         * The printer mode
         *
         * @generated from field: tcube.PRINTER_MODE mode = 22;
         */
        this.mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PrintersServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PrintersServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PrintersServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PrintersServiceSearchAllReq, a, b);
    }
}
exports.PrintersServiceSearchAllReq = PrintersServiceSearchAllReq;
PrintersServiceSearchAllReq.runtime = protobuf_1.proto3;
PrintersServiceSearchAllReq.typeName = "tcube.PrintersServiceSearchAllReq";
PrintersServiceSearchAllReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(PRINTER_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "mode", kind: "enum", T: protobuf_1.proto3.getEnumType(PRINTER_MODE) },
]);
