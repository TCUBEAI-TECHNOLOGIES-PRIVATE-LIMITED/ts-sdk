"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file scans.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShippingsScansList = exports.ScansServiceShippingScan = exports.ScansServiceShippingScanUpdateRequest = exports.ScansServiceShippingScanCreateRequest = exports.PackagingsScansList = exports.ScansServicePackagingScan = exports.ScansServicePackagingScanUpdateRequest = exports.ScansServicePackagingScanCreateRequest = exports.SerialsScansList = exports.ScansServiceSerialScan = exports.ScansServiceSerialScanUpdateRequest = exports.ScansServiceSerialScanCreateRequest = exports.ScansServiceCreateScanFromIPRequest = exports.INFERRED_FROM = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Stores the possible values for inferred from
 *
 * @generated from enum tcube.INFERRED_FROM
 */
var INFERRED_FROM;
(function (INFERRED_FROM) {
    /**
     * Inferred from IP address
     *
     * @generated from enum value: INFERRED_FROM_IP_UNSPECIFIED = 0;
     */
    INFERRED_FROM[INFERRED_FROM["INFERRED_FROM_IP_UNSPECIFIED"] = 0] = "INFERRED_FROM_IP_UNSPECIFIED";
    /**
     * Inferred from user provided location
     *
     * @generated from enum value: INFERRED_FROM_USER = 1;
     */
    INFERRED_FROM[INFERRED_FROM["INFERRED_FROM_USER"] = 1] = "INFERRED_FROM_USER";
})(INFERRED_FROM || (exports.INFERRED_FROM = INFERRED_FROM = {}));
// Retrieve enum metadata with: proto3.getEnumType(INFERRED_FROM)
protobuf_1.proto3.util.setEnumType(INFERRED_FROM, "tcube.INFERRED_FROM", [
    { no: 0, name: "INFERRED_FROM_IP_UNSPECIFIED" },
    { no: 1, name: "INFERRED_FROM_USER" },
]);
/**
 *
 * Describes the data structure to perform the create scan operation using the given IP address for the serial/packaging/shipping denoted by resource_uuid
 *
 * @generated from message tcube.ScansServiceCreateScanFromIPRequest
 */
class ScansServiceCreateScanFromIPRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the serial or packaging or shipping record
         *
         * @generated from field: string resource_uuid = 10;
         */
        this.resourceUuid = "";
        /**
         * The IP address using which the location information needs to be determined
         *
         * @generated from field: string ip = 11;
         */
        this.ip = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServiceCreateScanFromIPRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServiceCreateScanFromIPRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServiceCreateScanFromIPRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServiceCreateScanFromIPRequest, a, b);
    }
}
exports.ScansServiceCreateScanFromIPRequest = ScansServiceCreateScanFromIPRequest;
ScansServiceCreateScanFromIPRequest.runtime = protobuf_1.proto3;
ScansServiceCreateScanFromIPRequest.typeName = "tcube.ScansServiceCreateScanFromIPRequest";
ScansServiceCreateScanFromIPRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 10, name: "resource_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "ip", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure to perform the create operation on a serial scan
 *
 * @generated from message tcube.ScansServiceSerialScanCreateRequest
 */
class ScansServiceSerialScanCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the serial that needs to be updated
         *
         * @generated from field: string serial_uuid = 10;
         */
        this.serialUuid = "";
        /**
         * The latitude of the location
         *
         * @generated from field: double latitude = 11;
         */
        this.latitude = 0;
        /**
         * The longitude of the location
         *
         * @generated from field: double longitude = 12;
         */
        this.longitude = 0;
        /**
         * Stores if the location has been inferred from IP or from user provided geocoordinates
         *
         * @generated from field: tcube.INFERRED_FROM inferred_from = 13;
         */
        this.inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServiceSerialScanCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServiceSerialScanCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServiceSerialScanCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServiceSerialScanCreateRequest, a, b);
    }
}
exports.ScansServiceSerialScanCreateRequest = ScansServiceSerialScanCreateRequest;
ScansServiceSerialScanCreateRequest.runtime = protobuf_1.proto3;
ScansServiceSerialScanCreateRequest.typeName = "tcube.ScansServiceSerialScanCreateRequest";
ScansServiceSerialScanCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 10, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(INFERRED_FROM) },
]);
/**
 *
 * Describes the data structure to perform the update operation on a serial scan
 *
 * @generated from message tcube.ScansServiceSerialScanUpdateRequest
 */
class ScansServiceSerialScanUpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the resource that needs to be updated
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * The latitude of the location
         *
         * @generated from field: double latitude = 11;
         */
        this.latitude = 0;
        /**
         * The longitude of the location
         *
         * @generated from field: double longitude = 12;
         */
        this.longitude = 0;
        /**
         * Stores if the location has been inferred from IP or from user provided geocoordinates
         *
         * @generated from field: tcube.INFERRED_FROM inferred_from = 13;
         */
        this.inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServiceSerialScanUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServiceSerialScanUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServiceSerialScanUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServiceSerialScanUpdateRequest, a, b);
    }
}
exports.ScansServiceSerialScanUpdateRequest = ScansServiceSerialScanUpdateRequest;
ScansServiceSerialScanUpdateRequest.runtime = protobuf_1.proto3;
ScansServiceSerialScanUpdateRequest.typeName = "tcube.ScansServiceSerialScanUpdateRequest";
ScansServiceSerialScanUpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(INFERRED_FROM) },
]);
/**
 *
 * Describes the serial scan message
 *
 * @generated from message tcube.ScansServiceSerialScan
 */
class ScansServiceSerialScan extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the serial
         *
         * @generated from field: string serial_uuid = 10;
         */
        this.serialUuid = "";
        /**
         * The latitude of the location
         *
         * @generated from field: double latitude = 11;
         */
        this.latitude = 0;
        /**
         * The longitude of the location
         *
         * @generated from field: double longitude = 12;
         */
        this.longitude = 0;
        /**
         * Stores if the location has been inferred from IP or from user provided geocoordinates
         *
         * @generated from field: tcube.INFERRED_FROM inferred_from = 13;
         */
        this.inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServiceSerialScan().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServiceSerialScan().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServiceSerialScan().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServiceSerialScan, a, b);
    }
}
exports.ScansServiceSerialScan = ScansServiceSerialScan;
ScansServiceSerialScan.runtime = protobuf_1.proto3;
ScansServiceSerialScan.typeName = "tcube.ScansServiceSerialScan";
ScansServiceSerialScan.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
    { no: 10, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(INFERRED_FROM) },
]);
/**
 *
 * Describes the data structure that stores a list of serial scans
 *
 * @generated from message tcube.SerialsScansList
 */
class SerialsScansList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of serial scans
         *
         * @generated from field: repeated tcube.ScansServiceSerialScan list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsScansList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsScansList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsScansList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsScansList, a, b);
    }
}
exports.SerialsScansList = SerialsScansList;
SerialsScansList.runtime = protobuf_1.proto3;
SerialsScansList.typeName = "tcube.SerialsScansList";
SerialsScansList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ScansServiceSerialScan, repeated: true },
]);
/**
 *
 * Describes the data structure to perform the create operation on a packaging scan
 *
 * @generated from message tcube.ScansServicePackagingScanCreateRequest
 */
class ScansServicePackagingScanCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the packaging that needs to be updated
         *
         * @generated from field: string packaging_uuid = 10;
         */
        this.packagingUuid = "";
        /**
         * The latitude of the location
         *
         * @generated from field: double latitude = 11;
         */
        this.latitude = 0;
        /**
         * The longitude of the location
         *
         * @generated from field: double longitude = 12;
         */
        this.longitude = 0;
        /**
         * Stores if the location has been inferred from IP or from user provided geocoordinates
         *
         * @generated from field: tcube.INFERRED_FROM inferred_from = 13;
         */
        this.inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServicePackagingScanCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServicePackagingScanCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServicePackagingScanCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServicePackagingScanCreateRequest, a, b);
    }
}
exports.ScansServicePackagingScanCreateRequest = ScansServicePackagingScanCreateRequest;
ScansServicePackagingScanCreateRequest.runtime = protobuf_1.proto3;
ScansServicePackagingScanCreateRequest.typeName = "tcube.ScansServicePackagingScanCreateRequest";
ScansServicePackagingScanCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 10, name: "packaging_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(INFERRED_FROM) },
]);
/**
 *
 * Describes the data structure to perform the update operation on a packaging scan
 *
 * @generated from message tcube.ScansServicePackagingScanUpdateRequest
 */
class ScansServicePackagingScanUpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the resource that needs to be updated
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * The latitude of the location
         *
         * @generated from field: double latitude = 11;
         */
        this.latitude = 0;
        /**
         * The longitude of the location
         *
         * @generated from field: double longitude = 12;
         */
        this.longitude = 0;
        /**
         * Stores if the location has been inferred from IP or from user provided geocoordinates
         *
         * @generated from field: tcube.INFERRED_FROM inferred_from = 13;
         */
        this.inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServicePackagingScanUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServicePackagingScanUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServicePackagingScanUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServicePackagingScanUpdateRequest, a, b);
    }
}
exports.ScansServicePackagingScanUpdateRequest = ScansServicePackagingScanUpdateRequest;
ScansServicePackagingScanUpdateRequest.runtime = protobuf_1.proto3;
ScansServicePackagingScanUpdateRequest.typeName = "tcube.ScansServicePackagingScanUpdateRequest";
ScansServicePackagingScanUpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(INFERRED_FROM) },
]);
/**
 *
 * Describes the packaging scan message
 *
 * @generated from message tcube.ScansServicePackagingScan
 */
class ScansServicePackagingScan extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the packaging
         *
         * @generated from field: string packaging_uuid = 10;
         */
        this.packagingUuid = "";
        /**
         * The latitude of the location
         *
         * @generated from field: double latitude = 11;
         */
        this.latitude = 0;
        /**
         * The longitude of the location
         *
         * @generated from field: double longitude = 12;
         */
        this.longitude = 0;
        /**
         * Stores if the location has been inferred from IP or from user provided geocoordinates
         *
         * @generated from field: tcube.INFERRED_FROM inferred_from = 13;
         */
        this.inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServicePackagingScan().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServicePackagingScan().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServicePackagingScan().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServicePackagingScan, a, b);
    }
}
exports.ScansServicePackagingScan = ScansServicePackagingScan;
ScansServicePackagingScan.runtime = protobuf_1.proto3;
ScansServicePackagingScan.typeName = "tcube.ScansServicePackagingScan";
ScansServicePackagingScan.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
    { no: 10, name: "packaging_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(INFERRED_FROM) },
]);
/**
 *
 * Describes the data structure that stores a list of packaging scans
 *
 * @generated from message tcube.PackagingsScansList
 */
class PackagingsScansList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of packaging scans
         *
         * @generated from field: repeated tcube.ScansServicePackagingScan list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new PackagingsScansList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new PackagingsScansList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new PackagingsScansList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(PackagingsScansList, a, b);
    }
}
exports.PackagingsScansList = PackagingsScansList;
PackagingsScansList.runtime = protobuf_1.proto3;
PackagingsScansList.typeName = "tcube.PackagingsScansList";
PackagingsScansList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ScansServicePackagingScan, repeated: true },
]);
/**
 *
 * Describes the data structure to perform the create operation on a shipping scan
 *
 * @generated from message tcube.ScansServiceShippingScanCreateRequest
 */
class ScansServiceShippingScanCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the shipping that needs to be updated
         *
         * @generated from field: string shipping_uuid = 10;
         */
        this.shippingUuid = "";
        /**
         * The latitude of the location
         *
         * @generated from field: double latitude = 11;
         */
        this.latitude = 0;
        /**
         * The longitude of the location
         *
         * @generated from field: double longitude = 12;
         */
        this.longitude = 0;
        /**
         * Stores if the location has been inferred from IP or from user provided geocoordinates
         *
         * @generated from field: tcube.INFERRED_FROM inferred_from = 13;
         */
        this.inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServiceShippingScanCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServiceShippingScanCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServiceShippingScanCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServiceShippingScanCreateRequest, a, b);
    }
}
exports.ScansServiceShippingScanCreateRequest = ScansServiceShippingScanCreateRequest;
ScansServiceShippingScanCreateRequest.runtime = protobuf_1.proto3;
ScansServiceShippingScanCreateRequest.typeName = "tcube.ScansServiceShippingScanCreateRequest";
ScansServiceShippingScanCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 10, name: "shipping_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(INFERRED_FROM) },
]);
/**
 *
 * Describes the data structure to perform the update operation on a shipping scan
 *
 * @generated from message tcube.ScansServiceShippingScanUpdateRequest
 */
class ScansServiceShippingScanUpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the resource that needs to be updated
         *
         * @generated from field: string uuid = 1;
         */
        this.uuid = "";
        /**
         * The latitude of the location
         *
         * @generated from field: double latitude = 11;
         */
        this.latitude = 0;
        /**
         * The longitude of the location
         *
         * @generated from field: double longitude = 12;
         */
        this.longitude = 0;
        /**
         * Stores if the location has been inferred from IP or from user provided geocoordinates
         *
         * @generated from field: tcube.INFERRED_FROM inferred_from = 13;
         */
        this.inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServiceShippingScanUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServiceShippingScanUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServiceShippingScanUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServiceShippingScanUpdateRequest, a, b);
    }
}
exports.ScansServiceShippingScanUpdateRequest = ScansServiceShippingScanUpdateRequest;
ScansServiceShippingScanUpdateRequest.runtime = protobuf_1.proto3;
ScansServiceShippingScanUpdateRequest.typeName = "tcube.ScansServiceShippingScanUpdateRequest";
ScansServiceShippingScanUpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(INFERRED_FROM) },
]);
/**
 *
 * Describes the shipping scan message
 *
 * @generated from message tcube.ScansServiceShippingScan
 */
class ScansServiceShippingScan extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The UUID of the shipping
         *
         * @generated from field: string shipping_uuid = 10;
         */
        this.shippingUuid = "";
        /**
         * The latitude of the location
         *
         * @generated from field: double latitude = 11;
         */
        this.latitude = 0;
        /**
         * The longitude of the location
         *
         * @generated from field: double longitude = 12;
         */
        this.longitude = 0;
        /**
         * Stores if the location has been inferred from IP or from user provided geocoordinates
         *
         * @generated from field: tcube.INFERRED_FROM inferred_from = 13;
         */
        this.inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ScansServiceShippingScan().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ScansServiceShippingScan().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ScansServiceShippingScan().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ScansServiceShippingScan, a, b);
    }
}
exports.ScansServiceShippingScan = ScansServiceShippingScan;
ScansServiceShippingScan.runtime = protobuf_1.proto3;
ScansServiceShippingScan.typeName = "tcube.ScansServiceShippingScan";
ScansServiceShippingScan.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
    { no: 10, name: "shipping_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(INFERRED_FROM) },
]);
/**
 *
 * Describes the data structure that stores a list of shipping scans
 *
 * @generated from message tcube.ShippingsScansList
 */
class ShippingsScansList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of shipping scans
         *
         * @generated from field: repeated tcube.ScansServiceShippingScan list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ShippingsScansList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ShippingsScansList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ShippingsScansList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ShippingsScansList, a, b);
    }
}
exports.ShippingsScansList = ShippingsScansList;
ShippingsScansList.runtime = protobuf_1.proto3;
ShippingsScansList.typeName = "tcube.ShippingsScansList";
ShippingsScansList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: ScansServiceShippingScan, repeated: true },
]);
