"use strict";
// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file serials.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerialsService = void 0;
const serials_pb_js_1 = require("./serials_pb.js");
const base_pb_js_1 = require("./base_pb.js");
const protobuf_1 = require("@bufbuild/protobuf");
/**
 *
 * Describes the methods applicable on each serial
 *
 * Create a list of serials and return the Identifiers
 * rpc Create (SerialsServiceCreateRequest) returns (IdentifierList);
 * // Update a serial
 * rpc Update (SerialsServiceUpdateRequest) returns (Serial);
 *
 * @generated from service scanswift.SerialsService
 */
exports.SerialsService = {
    typeName: "scanswift.SerialsService",
    methods: {
        /**
         * Commission a serial
         *
         * @generated from rpc scanswift.SerialsService.Commission
         */
        commission: {
            name: "Commission",
            I: serials_pb_js_1.SerialsServiceRegisterActivityRequest,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Decommission a serial
         *
         * @generated from rpc scanswift.SerialsService.Decommission
         */
        decommission: {
            name: "Decommission",
            I: serials_pb_js_1.SerialsServiceRegisterActivityRequest,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Commission serials in bulk and return the count of the all the commissioned serials
         *
         * @generated from rpc scanswift.SerialsService.CommissionBulk
         */
        commissionBulk: {
            name: "CommissionBulk",
            I: serials_pb_js_1.SerialsServiceCommissionBulkRequest,
            O: base_pb_js_1.CountResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Decommission serials in bulk and return the count of the all the decommissioned serials
         *
         * @generated from rpc scanswift.SerialsService.DecommissionBulk
         */
        decommissionBulk: {
            name: "DecommissionBulk",
            I: serials_pb_js_1.SerialsServiceCommissionBulkRequest,
            O: base_pb_js_1.CountResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Verify a serial
         *
         * @generated from rpc scanswift.SerialsService.Verify
         */
        verify: {
            name: "Verify",
            I: serials_pb_js_1.SerialsServiceRegisterActivityRequest,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Archive the serial
         *
         * @generated from rpc scanswift.SerialsService.Archive
         */
        archive: {
            name: "Archive",
            I: base_pb_js_1.IdentifierWithUserComment,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Restore the serial
         *
         * @generated from rpc scanswift.SerialsService.Restore
         */
        restore: {
            name: "Restore",
            I: base_pb_js_1.IdentifierWithUserComment,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Recall the serial
         *
         * @generated from rpc scanswift.SerialsService.Recall
         */
        recall: {
            name: "Recall",
            I: serials_pb_js_1.SerialsServiceRegisterActivityRequest,
            O: base_pb_js_1.Identifier,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View by UUID
         *
         * @generated from rpc scanswift.SerialsService.ViewByUUID
         */
        viewByUUID: {
            name: "ViewByUUID",
            I: base_pb_js_1.Identifier,
            O: serials_pb_js_1.Serial,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View by Code
         *
         * @generated from rpc scanswift.SerialsService.ViewByCode
         */
        viewByCode: {
            name: "ViewByCode",
            I: base_pb_js_1.SearchKeyRequest,
            O: serials_pb_js_1.Serial,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View the metadata using the serial code
         *
         * @generated from rpc scanswift.SerialsService.ViewMetadataByCode
         */
        viewMetadataByCode: {
            name: "ViewMetadataByCode",
            I: base_pb_js_1.SearchKeyRequest,
            O: serials_pb_js_1.SerialMetadata,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View all serials
         *
         * @generated from rpc scanswift.SerialsService.ViewAll
         */
        viewAll: {
            name: "ViewAll",
            I: base_pb_js_1.ActiveInEntityRequest,
            O: serials_pb_js_1.SerialsList,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View serials with pagination
         *
         * @generated from rpc scanswift.SerialsService.ViewWithPagination
         */
        viewWithPagination: {
            name: "ViewWithPagination",
            I: serials_pb_js_1.SerialsServicePaginationReq,
            O: serials_pb_js_1.SerialPaginationResp,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View as QR code
         *
         * @generated from rpc scanswift.SerialsService.ViewAsQR
         */
        viewAsQR: {
            name: "ViewAsQR",
            I: base_pb_js_1.Identifier,
            O: base_pb_js_1.ImageResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View as DataMatrix
         *
         * @generated from rpc scanswift.SerialsService.ViewAsDataMatrix
         */
        viewAsDataMatrix: {
            name: "ViewAsDataMatrix",
            I: base_pb_js_1.Identifier,
            O: base_pb_js_1.ImageResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View as Image on the basis of the product's configuration
         *
         * @generated from rpc scanswift.SerialsService.ViewAsImage
         */
        viewAsImage: {
            name: "ViewAsImage",
            I: base_pb_js_1.Identifier,
            O: base_pb_js_1.ImageResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View the serial's URI
         *
         * @generated from rpc scanswift.SerialsService.ViewAsURI
         */
        viewAsURI: {
            name: "ViewAsURI",
            I: base_pb_js_1.Identifier,
            O: base_pb_js_1.URLResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View the string that can be used to render the QR code on POS machines
         *
         * @generated from rpc scanswift.SerialsService.ViewPrintableString
         */
        viewPrintableString: {
            name: "ViewPrintableString",
            I: base_pb_js_1.Identifier,
            O: base_pb_js_1.StringResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View serial activities
         *
         * @generated from rpc scanswift.SerialsService.ViewSerialActivities
         */
        viewSerialActivities: {
            name: "ViewSerialActivities",
            I: serials_pb_js_1.ViewSerialActivitiesRequest,
            O: serials_pb_js_1.SerialActivitiesList,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View all that match the given search key
         *
         * @generated from rpc scanswift.SerialsService.SearchAll
         */
        searchAll: {
            name: "SearchAll",
            I: serials_pb_js_1.SerialsServiceSearchAllReq,
            O: serials_pb_js_1.SerialsList,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View all that match the given filter criteria
         *
         * @generated from rpc scanswift.SerialsService.Filter
         */
        filter: {
            name: "Filter",
            I: serials_pb_js_1.SerialsServiceFilterReq,
            O: serials_pb_js_1.SerialsList,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * Count
         *
         * @generated from rpc scanswift.SerialsService.Count
         */
        count: {
            name: "Count",
            I: base_pb_js_1.CountInEntityRequest,
            O: base_pb_js_1.CountResponse,
            kind: protobuf_1.MethodKind.Unary,
        },
        /**
         * View counts of serials in various states
         *
         * @generated from rpc scanswift.SerialsService.CountsInStates
         */
        countsInStates: {
            name: "CountsInStates",
            I: serials_pb_js_1.SerialsServiceAnalyticsGroupByStateRequest,
            O: serials_pb_js_1.SerialsServiceStateAndCountMessageList,
            kind: protobuf_1.MethodKind.Unary,
        },
    }
};
