"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file serials.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerialsServiceStateAndCountMessage = exports.SerialsServiceStateAndCountMessageList = exports.SerialsServiceAnalyticsGroupByStateRequest = exports.SerialsServiceSearchAllReq = exports.SerialsServiceFilterReq = exports.SerialPaginationResp = exports.SerialsServicePaginationReq = exports.ViewSerialActivitiesRequest = exports.SerialActivitiesList = exports.SerialActivity = exports.SerialsList = exports.Serial = exports.SerialsServiceCreateRequest = exports.SerialsServiceSerialCodes = exports.SerialsServiceCommissionBulkRequest = exports.SerialsServiceRegisterActivityRequest = exports.SERIAL_SORT_KEY = exports.SERIAL_ACTIVITY = exports.SERIAL_STATE = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the possible states that a serial can be in
 *
 * @generated from enum tcube.SERIAL_STATE
 */
var SERIAL_STATE;
(function (SERIAL_STATE) {
    /**
     * Used only for filter & search requests
     *
     * @generated from enum value: SERIAL_STATE_ANY_UNSPECIFIED = 0;
     */
    SERIAL_STATE[SERIAL_STATE["SERIAL_STATE_ANY_UNSPECIFIED"] = 0] = "SERIAL_STATE_ANY_UNSPECIFIED";
    /**
     * The default state of a serial, which denotes that the serial is available to be commissioned
     *
     * @generated from enum value: SERIAL_STATE_AVAILABLE = 1;
     */
    SERIAL_STATE[SERIAL_STATE["SERIAL_STATE_AVAILABLE"] = 1] = "SERIAL_STATE_AVAILABLE";
    /**
     * Denotes that the serial has been commissioned
     *
     * @generated from enum value: SERIAL_STATE_COMMISSIONED = 2;
     */
    SERIAL_STATE[SERIAL_STATE["SERIAL_STATE_COMMISSIONED"] = 2] = "SERIAL_STATE_COMMISSIONED";
    /**
     * Denotes that the serial has been decommissioned
     *
     * @generated from enum value: SERIAL_STATE_DECOMMISSIONED = 3;
     */
    SERIAL_STATE[SERIAL_STATE["SERIAL_STATE_DECOMMISSIONED"] = 3] = "SERIAL_STATE_DECOMMISSIONED";
    /**
     * Denotes that the serial has been recalled
     *
     * @generated from enum value: SERIAL_STATE_RECALLED = 4;
     */
    SERIAL_STATE[SERIAL_STATE["SERIAL_STATE_RECALLED"] = 4] = "SERIAL_STATE_RECALLED";
})(SERIAL_STATE || (exports.SERIAL_STATE = SERIAL_STATE = {}));
// Retrieve enum metadata with: proto3.getEnumType(SERIAL_STATE)
protobuf_1.proto3.util.setEnumType(SERIAL_STATE, "tcube.SERIAL_STATE", [
    { no: 0, name: "SERIAL_STATE_ANY_UNSPECIFIED" },
    { no: 1, name: "SERIAL_STATE_AVAILABLE" },
    { no: 2, name: "SERIAL_STATE_COMMISSIONED" },
    { no: 3, name: "SERIAL_STATE_DECOMMISSIONED" },
    { no: 4, name: "SERIAL_STATE_RECALLED" },
]);
/**
 *
 * Describes the possible values of activity for a specific serial
 *
 * @generated from enum tcube.SERIAL_ACTIVITY
 */
var SERIAL_ACTIVITY;
(function (SERIAL_ACTIVITY) {
    /**
     * Used only for filter & search requests
     *
     * @generated from enum value: SERIAL_ACTIVITY_ANY_UNSPECIFIED = 0;
     */
    SERIAL_ACTIVITY[SERIAL_ACTIVITY["SERIAL_ACTIVITY_ANY_UNSPECIFIED"] = 0] = "SERIAL_ACTIVITY_ANY_UNSPECIFIED";
    /**
     * Denotes that the serial has been verified
     *
     * @generated from enum value: SERIAL_ACTIVITY_VERIFIED = 1;
     */
    SERIAL_ACTIVITY[SERIAL_ACTIVITY["SERIAL_ACTIVITY_VERIFIED"] = 1] = "SERIAL_ACTIVITY_VERIFIED";
    /**
     * Denotes that the serial has been commissioned
     *
     * @generated from enum value: SERIAL_ACTIVITY_COMMISSIONED = 2;
     */
    SERIAL_ACTIVITY[SERIAL_ACTIVITY["SERIAL_ACTIVITY_COMMISSIONED"] = 2] = "SERIAL_ACTIVITY_COMMISSIONED";
    /**
     * Denotes that the serial has been decommissioned
     *
     * @generated from enum value: SERIAL_ACTIVITY_DECOMMISSIONED = 3;
     */
    SERIAL_ACTIVITY[SERIAL_ACTIVITY["SERIAL_ACTIVITY_DECOMMISSIONED"] = 3] = "SERIAL_ACTIVITY_DECOMMISSIONED";
    /**
     * Denotes that the serial has been recalled
     *
     * @generated from enum value: SERIAL_ACTIVITY_RECALLED = 4;
     */
    SERIAL_ACTIVITY[SERIAL_ACTIVITY["SERIAL_ACTIVITY_RECALLED"] = 4] = "SERIAL_ACTIVITY_RECALLED";
})(SERIAL_ACTIVITY || (exports.SERIAL_ACTIVITY = SERIAL_ACTIVITY = {}));
// Retrieve enum metadata with: proto3.getEnumType(SERIAL_ACTIVITY)
protobuf_1.proto3.util.setEnumType(SERIAL_ACTIVITY, "tcube.SERIAL_ACTIVITY", [
    { no: 0, name: "SERIAL_ACTIVITY_ANY_UNSPECIFIED" },
    { no: 1, name: "SERIAL_ACTIVITY_VERIFIED" },
    { no: 2, name: "SERIAL_ACTIVITY_COMMISSIONED" },
    { no: 3, name: "SERIAL_ACTIVITY_DECOMMISSIONED" },
    { no: 4, name: "SERIAL_ACTIVITY_RECALLED" },
]);
/**
 *
 * Describes the available sort keys for retrieving serials
 *
 * @generated from enum tcube.SERIAL_SORT_KEY
 */
var SERIAL_SORT_KEY;
(function (SERIAL_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: SERIAL_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    SERIAL_SORT_KEY[SERIAL_SORT_KEY["SERIAL_SORT_KEY_ID_UNSPECIFIED"] = 0] = "SERIAL_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: SERIAL_SORT_KEY_CREATED_AT = 1;
     */
    SERIAL_SORT_KEY[SERIAL_SORT_KEY["SERIAL_SORT_KEY_CREATED_AT"] = 1] = "SERIAL_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: SERIAL_SORT_KEY_MODIFIED_AT = 2;
     */
    SERIAL_SORT_KEY[SERIAL_SORT_KEY["SERIAL_SORT_KEY_MODIFIED_AT"] = 2] = "SERIAL_SORT_KEY_MODIFIED_AT";
    /**
     * // Fetch ordered results by batch number
     * SERIAL_SORT_KEY_BATCH_NUMBER = 10;
     * Fetch ordered results by code
     *
     * @generated from enum value: SERIAL_SORT_KEY_CODE = 11;
     */
    SERIAL_SORT_KEY[SERIAL_SORT_KEY["SERIAL_SORT_KEY_CODE"] = 11] = "SERIAL_SORT_KEY_CODE";
})(SERIAL_SORT_KEY || (exports.SERIAL_SORT_KEY = SERIAL_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(SERIAL_SORT_KEY)
protobuf_1.proto3.util.setEnumType(SERIAL_SORT_KEY, "tcube.SERIAL_SORT_KEY", [
    { no: 0, name: "SERIAL_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "SERIAL_SORT_KEY_CREATED_AT" },
    { no: 2, name: "SERIAL_SORT_KEY_MODIFIED_AT" },
    { no: 11, name: "SERIAL_SORT_KEY_CODE" },
]);
/**
 *
 * Describes the payload that is used to either commission, decommission or verify a serial
 *
 * @generated from message tcube.SerialsServiceRegisterActivityRequest
 */
class SerialsServiceRegisterActivityRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the zone
         *
         * @generated from field: string zone_uuid = 10;
         */
        this.zoneUuid = "";
        /**
         * UUID of the serial
         *
         * @generated from field: string serial_uuid = 11;
         */
        this.serialUuid = "";
        /**
         * The latitude of the location where this activity was registered
         *
         * @generated from field: double latitude = 13;
         */
        this.latitude = 0;
        /**
         * The longitude of the location where this activity was registered
         *
         * @generated from field: double longitude = 14;
         */
        this.longitude = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServiceRegisterActivityRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServiceRegisterActivityRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServiceRegisterActivityRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServiceRegisterActivityRequest, a, b);
    }
}
exports.SerialsServiceRegisterActivityRequest = SerialsServiceRegisterActivityRequest;
SerialsServiceRegisterActivityRequest.runtime = protobuf_1.proto3;
SerialsServiceRegisterActivityRequest.typeName = "tcube.SerialsServiceRegisterActivityRequest";
SerialsServiceRegisterActivityRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
/**
 * @generated from message tcube.SerialsServiceCommissionBulkRequest
 */
class SerialsServiceCommissionBulkRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the zone
         *
         * @generated from field: string zone_uuid = 10;
         */
        this.zoneUuid = "";
        /**
         * The latitude of the location where this activity was registered
         *
         * @generated from field: double latitude = 13;
         */
        this.latitude = 0;
        /**
         * The longitude of the location where this activity was registered
         *
         * @generated from field: double longitude = 14;
         */
        this.longitude = 0;
        /**
         * List of serial codes
         *
         * @generated from field: repeated tcube.SerialsServiceSerialCodes list = 20;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServiceCommissionBulkRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServiceCommissionBulkRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServiceCommissionBulkRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServiceCommissionBulkRequest, a, b);
    }
}
exports.SerialsServiceCommissionBulkRequest = SerialsServiceCommissionBulkRequest;
SerialsServiceCommissionBulkRequest.runtime = protobuf_1.proto3;
SerialsServiceCommissionBulkRequest.typeName = "tcube.SerialsServiceCommissionBulkRequest";
SerialsServiceCommissionBulkRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 20, name: "list", kind: "message", T: SerialsServiceSerialCodes, repeated: true },
]);
/**
 * @generated from message tcube.SerialsServiceSerialCodes
 */
class SerialsServiceSerialCodes extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Serial code
         *
         * @generated from field: string serial_code = 11;
         */
        this.serialCode = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServiceSerialCodes().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServiceSerialCodes().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServiceSerialCodes().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServiceSerialCodes, a, b);
    }
}
exports.SerialsServiceSerialCodes = SerialsServiceSerialCodes;
SerialsServiceSerialCodes.runtime = protobuf_1.proto3;
SerialsServiceSerialCodes.typeName = "tcube.SerialsServiceSerialCodes";
SerialsServiceSerialCodes.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 11, name: "serial_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the necessary data structure during creation of a serial
 *
 * @generated from message tcube.SerialsServiceCreateRequest
 */
class SerialsServiceCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the product
         *
         * @generated from field: string product_uuid = 10;
         */
        this.productUuid = "";
        /**
         * UUID of the batch
         *
         * @generated from field: string batch_uuid = 11;
         */
        this.batchUuid = "";
        /**
         * The number of serials that need to be created
         *
         * @generated from field: int64 quantity = 20;
         */
        this.quantity = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServiceCreateRequest, a, b);
    }
}
exports.SerialsServiceCreateRequest = SerialsServiceCreateRequest;
SerialsServiceCreateRequest.runtime = protobuf_1.proto3;
SerialsServiceCreateRequest.typeName = "tcube.SerialsServiceCreateRequest";
SerialsServiceCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
/**
 *
 * Describes the data structure of each serial on the platform
 *
 * @generated from message tcube.Serial
 */
class Serial extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the product
         *
         * @generated from field: string product_uuid = 10;
         */
        this.productUuid = "";
        /**
         * UUID of the batch
         *
         * @generated from field: string batch_uuid = 11;
         */
        this.batchUuid = "";
        /**
         * Code of the serial
         *
         * @generated from field: string code = 12;
         */
        this.code = "";
        /**
         * Stores the number of times that this serial has already been downloaded
         *
         * @generated from field: int64 download_count = 13;
         */
        this.downloadCount = protobuf_1.protoInt64.zero;
        /**
         * The state of the serial
         *
         * @generated from field: tcube.SERIAL_STATE state = 20;
         */
        this.state = SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Serial().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Serial().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Serial().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Serial, a, b);
    }
}
exports.Serial = Serial;
Serial.runtime = protobuf_1.proto3;
Serial.typeName = "tcube.Serial";
Serial.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "download_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_STATE) },
]);
/**
 *
 * Describes the data structure that stores a list of serials
 *
 * @generated from message tcube.SerialsList
 */
class SerialsList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of serials
         *
         * @generated from field: repeated tcube.Serial list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsList, a, b);
    }
}
exports.SerialsList = SerialsList;
SerialsList.runtime = protobuf_1.proto3;
SerialsList.typeName = "tcube.SerialsList";
SerialsList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Serial, repeated: true },
]);
/**
 *
 * Describes the data structure of each serial activity
 *
 * @generated from message tcube.SerialActivity
 */
class SerialActivity extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the zone
         *
         * @generated from field: string zone_uuid = 10;
         */
        this.zoneUuid = "";
        /**
         * UUID of the serial
         *
         * @generated from field: string serial_uuid = 11;
         */
        this.serialUuid = "";
        /**
         * The registered activity
         *
         * @generated from field: tcube.SERIAL_ACTIVITY activity = 12;
         */
        this.activity = SERIAL_ACTIVITY.SERIAL_ACTIVITY_ANY_UNSPECIFIED;
        /**
         * The latitude of the location where this activity was registered
         *
         * @generated from field: double latitude = 13;
         */
        this.latitude = 0;
        /**
         * The longitude of the location where this activity was registered
         *
         * @generated from field: double longitude = 14;
         */
        this.longitude = 0;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialActivity().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialActivity().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialActivity().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialActivity, a, b);
    }
}
exports.SerialActivity = SerialActivity;
SerialActivity.runtime = protobuf_1.proto3;
SerialActivity.typeName = "tcube.SerialActivity";
SerialActivity.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "activity", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_ACTIVITY) },
    { no: 13, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
]);
/**
 *
 * Describes the data structure that stores a list of serial activities
 *
 * @generated from message tcube.SerialActivitiesList
 */
class SerialActivitiesList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of serial activities
         *
         * @generated from field: repeated tcube.SerialActivity list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialActivitiesList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialActivitiesList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialActivitiesList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialActivitiesList, a, b);
    }
}
exports.SerialActivitiesList = SerialActivitiesList;
SerialActivitiesList.runtime = protobuf_1.proto3;
SerialActivitiesList.typeName = "tcube.SerialActivitiesList";
SerialActivitiesList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SerialActivity, repeated: true },
]);
/**
 *
 * Describes the payload required to retrieve all the activities related to a serial
 *
 * @generated from message tcube.ViewSerialActivitiesRequest
 */
class ViewSerialActivitiesRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Denotes if only active records need to be returned
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * Stores the entity UUID and limits the query to the appropriate entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the serial
         *
         * @generated from field: string serial_uuid = 10;
         */
        this.serialUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ViewSerialActivitiesRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ViewSerialActivitiesRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ViewSerialActivitiesRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ViewSerialActivitiesRequest, a, b);
    }
}
exports.ViewSerialActivitiesRequest = ViewSerialActivitiesRequest;
ViewSerialActivitiesRequest.runtime = protobuf_1.proto3;
ViewSerialActivitiesRequest.typeName = "tcube.ViewSerialActivitiesRequest";
ViewSerialActivitiesRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.SerialsServicePaginationReq
 */
class SerialsServicePaginationReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SERIAL_SORT_KEY sort_key = 5;
         */
        this.sortKey = SERIAL_SORT_KEY.SERIAL_SORT_KEY_ID_UNSPECIFIED;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServicePaginationReq, a, b);
    }
}
exports.SerialsServicePaginationReq = SerialsServicePaginationReq;
SerialsServicePaginationReq.runtime = protobuf_1.proto3;
SerialsServicePaginationReq.typeName = "tcube.SerialsServicePaginationReq";
SerialsServicePaginationReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.SerialPaginationResp
 */
class SerialPaginationResp extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of records in this payload
         *
         * @generated from field: int64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The total number of records that are available
         *
         * @generated from field: int64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        /**
         * The list of records
         *
         * @generated from field: repeated tcube.Serial payload = 3;
         */
        this.payload = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialPaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialPaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialPaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialPaginationResp, a, b);
    }
}
exports.SerialPaginationResp = SerialPaginationResp;
SerialPaginationResp.runtime = protobuf_1.proto3;
SerialPaginationResp.typeName = "tcube.SerialPaginationResp";
SerialPaginationResp.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Serial, repeated: true },
]);
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.SerialsServiceFilterReq
 */
class SerialsServiceFilterReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SERIAL_SORT_KEY sort_key = 5;
         */
        this.sortKey = SERIAL_SORT_KEY.SERIAL_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The minimum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_start = 6;
         */
        this.creationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_end = 7;
         */
        this.creationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 8;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the product
         *
         * @generated from field: string product_uuid = 10;
         */
        this.productUuid = "";
        /**
         * UUID of the batch
         *
         * @generated from field: string batch_uuid = 11;
         */
        this.batchUuid = "";
        /**
         * Code of the serial
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        /**
         * The state of the serial
         *
         * @generated from field: tcube.SERIAL_STATE state = 30;
         */
        this.state = SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServiceFilterReq, a, b);
    }
}
exports.SerialsServiceFilterReq = SerialsServiceFilterReq;
SerialsServiceFilterReq.runtime = protobuf_1.proto3;
SerialsServiceFilterReq.typeName = "tcube.SerialsServiceFilterReq";
SerialsServiceFilterReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_STATE) },
]);
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.SerialsServiceSearchAllReq
 */
class SerialsServiceSearchAllReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SERIAL_SORT_KEY sort_key = 5;
         */
        this.sortKey = SERIAL_SORT_KEY.SERIAL_SORT_KEY_ID_UNSPECIFIED;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the product
         *
         * @generated from field: string product_uuid = 10;
         */
        this.productUuid = "";
        /**
         * UUID of the batch
         *
         * @generated from field: string batch_uuid = 11;
         */
        this.batchUuid = "";
        /**
         * Describes the key with which the search operation needs to be performed
         *
         * @generated from field: string search_key = 12;
         */
        this.searchKey = "";
        /**
         * The state of the serial
         *
         * @generated from field: tcube.SERIAL_STATE state = 30;
         */
        this.state = SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServiceSearchAllReq, a, b);
    }
}
exports.SerialsServiceSearchAllReq = SerialsServiceSearchAllReq;
SerialsServiceSearchAllReq.runtime = protobuf_1.proto3;
SerialsServiceSearchAllReq.typeName = "tcube.SerialsServiceSearchAllReq";
SerialsServiceSearchAllReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_STATE) },
]);
/**
 *
 * Describes the request payload for retrieving counts of serials in various states
 *
 * @generated from message tcube.SerialsServiceAnalyticsGroupByStateRequest
 */
class SerialsServiceAnalyticsGroupByStateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * UUID of the product
         *
         * @generated from field: string product_uuid = 10;
         */
        this.productUuid = "";
        /**
         * UUID of the batch
         *
         * @generated from field: string batch_uuid = 11;
         */
        this.batchUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServiceAnalyticsGroupByStateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServiceAnalyticsGroupByStateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServiceAnalyticsGroupByStateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServiceAnalyticsGroupByStateRequest, a, b);
    }
}
exports.SerialsServiceAnalyticsGroupByStateRequest = SerialsServiceAnalyticsGroupByStateRequest;
SerialsServiceAnalyticsGroupByStateRequest.runtime = protobuf_1.proto3;
SerialsServiceAnalyticsGroupByStateRequest.typeName = "tcube.SerialsServiceAnalyticsGroupByStateRequest";
SerialsServiceAnalyticsGroupByStateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the response that consists of the list of all the states and the counts of serials in the respective states
 *
 * @generated from message tcube.SerialsServiceStateAndCountMessageList
 */
class SerialsServiceStateAndCountMessageList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The list of states and the counts
         *
         * @generated from field: repeated tcube.SerialsServiceStateAndCountMessage list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServiceStateAndCountMessageList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServiceStateAndCountMessageList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServiceStateAndCountMessageList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServiceStateAndCountMessageList, a, b);
    }
}
exports.SerialsServiceStateAndCountMessageList = SerialsServiceStateAndCountMessageList;
SerialsServiceStateAndCountMessageList.runtime = protobuf_1.proto3;
SerialsServiceStateAndCountMessageList.typeName = "tcube.SerialsServiceStateAndCountMessageList";
SerialsServiceStateAndCountMessageList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SerialsServiceStateAndCountMessage, repeated: true },
]);
/**
 *
 * Describes the response that consists of a state and the count of serials within that state
 *
 * @generated from message tcube.SerialsServiceStateAndCountMessage
 */
class SerialsServiceStateAndCountMessage extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The state of the serial
         *
         * @generated from field: tcube.SERIAL_STATE state = 10;
         */
        this.state = SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;
        /**
         * The number of serials within this state
         *
         * @generated from field: int64 count = 11;
         */
        this.count = protobuf_1.protoInt64.zero;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new SerialsServiceStateAndCountMessage().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsServiceStateAndCountMessage().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsServiceStateAndCountMessage().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsServiceStateAndCountMessage, a, b);
    }
}
exports.SerialsServiceStateAndCountMessage = SerialsServiceStateAndCountMessage;
SerialsServiceStateAndCountMessage.runtime = protobuf_1.proto3;
SerialsServiceStateAndCountMessage.typeName = "tcube.SerialsServiceStateAndCountMessage";
SerialsServiceStateAndCountMessage.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 10, name: "state", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_STATE) },
    { no: 11, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
]);
