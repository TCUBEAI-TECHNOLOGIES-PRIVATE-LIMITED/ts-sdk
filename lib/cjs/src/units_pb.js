"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file units.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnitsServiceSearchAllReq = exports.UnitsServiceFilterReq = exports.UnitPaginationResp = exports.UnitsServicePaginationReq = exports.UnitsList = exports.Unit = exports.UnitsServiceUpdateRequest = exports.UnitsServiceCreateRequest = exports.UNIT_SORT_KEY = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the available sort keys for retrieving units
 *
 * @generated from enum tcube.UNIT_SORT_KEY
 */
var UNIT_SORT_KEY;
(function (UNIT_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: UNIT_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    UNIT_SORT_KEY[UNIT_SORT_KEY["UNIT_SORT_KEY_ID_UNSPECIFIED"] = 0] = "UNIT_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: UNIT_SORT_KEY_CREATED_AT = 1;
     */
    UNIT_SORT_KEY[UNIT_SORT_KEY["UNIT_SORT_KEY_CREATED_AT"] = 1] = "UNIT_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: UNIT_SORT_KEY_MODIFIED_AT = 2;
     */
    UNIT_SORT_KEY[UNIT_SORT_KEY["UNIT_SORT_KEY_MODIFIED_AT"] = 2] = "UNIT_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by name
     *
     * @generated from enum value: UNIT_SORT_KEY_NAME = 10;
     */
    UNIT_SORT_KEY[UNIT_SORT_KEY["UNIT_SORT_KEY_NAME"] = 10] = "UNIT_SORT_KEY_NAME";
    /**
     * Fetch ordered results by code
     *
     * @generated from enum value: UNIT_SORT_KEY_CODE = 11;
     */
    UNIT_SORT_KEY[UNIT_SORT_KEY["UNIT_SORT_KEY_CODE"] = 11] = "UNIT_SORT_KEY_CODE";
})(UNIT_SORT_KEY || (exports.UNIT_SORT_KEY = UNIT_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(UNIT_SORT_KEY)
protobuf_1.proto3.util.setEnumType(UNIT_SORT_KEY, "tcube.UNIT_SORT_KEY", [
    { no: 0, name: "UNIT_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "UNIT_SORT_KEY_CREATED_AT" },
    { no: 2, name: "UNIT_SORT_KEY_MODIFIED_AT" },
    { no: 10, name: "UNIT_SORT_KEY_NAME" },
    { no: 11, name: "UNIT_SORT_KEY_CODE" },
]);
/**
 *
 * Describes the necessary data structure during creation of a unit
 *
 * @generated from message tcube.UnitsServiceCreateRequest
 */
class UnitsServiceCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The name of the unit
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the unit
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * Description of the unit
         *
         * @generated from field: string description = 12;
         */
        this.description = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnitsServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnitsServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnitsServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UnitsServiceCreateRequest, a, b);
    }
}
exports.UnitsServiceCreateRequest = UnitsServiceCreateRequest;
UnitsServiceCreateRequest.runtime = protobuf_1.proto3;
UnitsServiceCreateRequest.typeName = "tcube.UnitsServiceCreateRequest";
UnitsServiceCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a unit
 *
 * @generated from message tcube.UnitsServiceUpdateRequest
 */
class UnitsServiceUpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The UUID of the resource that needs to be updated
         *
         * @generated from field: string uuid = 2;
         */
        this.uuid = "";
        /**
         * The name of the unit
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the unit
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * Description of the unit
         *
         * @generated from field: string description = 12;
         */
        this.description = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnitsServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnitsServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnitsServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UnitsServiceUpdateRequest, a, b);
    }
}
exports.UnitsServiceUpdateRequest = UnitsServiceUpdateRequest;
UnitsServiceUpdateRequest.runtime = protobuf_1.proto3;
UnitsServiceUpdateRequest.typeName = "tcube.UnitsServiceUpdateRequest";
UnitsServiceUpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure of each unit on the platform
 *
 * @generated from message tcube.Unit
 */
class Unit extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The name of the unit
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the unit
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * Description of the unit
         *
         * @generated from field: string description = 12;
         */
        this.description = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Unit().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Unit().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Unit().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Unit, a, b);
    }
}
exports.Unit = Unit;
Unit.runtime = protobuf_1.proto3;
Unit.typeName = "tcube.Unit";
Unit.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure that stores a list of units
 *
 * @generated from message tcube.UnitsList
 */
class UnitsList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of units
         *
         * @generated from field: repeated tcube.Unit list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnitsList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnitsList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnitsList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UnitsList, a, b);
    }
}
exports.UnitsList = UnitsList;
UnitsList.runtime = protobuf_1.proto3;
UnitsList.typeName = "tcube.UnitsList";
UnitsList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Unit, repeated: true },
]);
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.UnitsServicePaginationReq
 */
class UnitsServicePaginationReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.UNIT_SORT_KEY sort_key = 5;
         */
        this.sortKey = UNIT_SORT_KEY.UNIT_SORT_KEY_ID_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnitsServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnitsServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnitsServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UnitsServicePaginationReq, a, b);
    }
}
exports.UnitsServicePaginationReq = UnitsServicePaginationReq;
UnitsServicePaginationReq.runtime = protobuf_1.proto3;
UnitsServicePaginationReq.typeName = "tcube.UnitsServicePaginationReq";
UnitsServicePaginationReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(UNIT_SORT_KEY) },
]);
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.UnitPaginationResp
 */
class UnitPaginationResp extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of records in this payload
         *
         * @generated from field: int64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The total number of records that are available
         *
         * @generated from field: int64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        /**
         * The list of records
         *
         * @generated from field: repeated tcube.Unit payload = 3;
         */
        this.payload = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnitPaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnitPaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnitPaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UnitPaginationResp, a, b);
    }
}
exports.UnitPaginationResp = UnitPaginationResp;
UnitPaginationResp.runtime = protobuf_1.proto3;
UnitPaginationResp.typeName = "tcube.UnitPaginationResp";
UnitPaginationResp.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Unit, repeated: true },
]);
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.UnitsServiceFilterReq
 */
class UnitsServiceFilterReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.UNIT_SORT_KEY sort_key = 5;
         */
        this.sortKey = UNIT_SORT_KEY.UNIT_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The minimum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_start = 6;
         */
        this.creationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_end = 7;
         */
        this.creationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * The name of the unit
         *
         * @generated from field: string name = 20;
         */
        this.name = "";
        /**
         * Code of the unit
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnitsServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnitsServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnitsServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UnitsServiceFilterReq, a, b);
    }
}
exports.UnitsServiceFilterReq = UnitsServiceFilterReq;
UnitsServiceFilterReq.runtime = protobuf_1.proto3;
UnitsServiceFilterReq.typeName = "tcube.UnitsServiceFilterReq";
UnitsServiceFilterReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(UNIT_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.UnitsServiceSearchAllReq
 */
class UnitsServiceSearchAllReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: tcube.UNIT_SORT_KEY sort_key = 5;
         */
        this.sortKey = UNIT_SORT_KEY.UNIT_SORT_KEY_ID_UNSPECIFIED;
        /**
         * Describes the key with which the search operation needs to be performed
         *
         * @generated from field: string search_key = 11;
         */
        this.searchKey = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new UnitsServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UnitsServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UnitsServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UnitsServiceSearchAllReq, a, b);
    }
}
exports.UnitsServiceSearchAllReq = UnitsServiceSearchAllReq;
UnitsServiceSearchAllReq.runtime = protobuf_1.proto3;
UnitsServiceSearchAllReq.typeName = "tcube.UnitsServiceSearchAllReq";
UnitsServiceSearchAllReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(UNIT_SORT_KEY) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
