"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file zones.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZonesServiceSearchAllReq = exports.ZonesServiceFilterReq = exports.ZonePaginationResp = exports.ZonesServicePaginationReq = exports.ZonesList = exports.Zone = exports.ZonesServiceUpdateRequest = exports.ZonesServiceCreateRequest = exports.ZONE_SORT_KEY = exports.ZONE_TYPE = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the available zone types
 *
 * @generated from enum scanswift.ZONE_TYPE
 */
var ZONE_TYPE;
(function (ZONE_TYPE) {
    /**
     * Used only for filter requests
     *
     * @generated from enum value: ZONE_TYPE_ANY_UNSPECIFIED = 0;
     */
    ZONE_TYPE[ZONE_TYPE["ZONE_TYPE_ANY_UNSPECIFIED"] = 0] = "ZONE_TYPE_ANY_UNSPECIFIED";
    /**
     * Manufacturing zone
     *
     * @generated from enum value: ZONE_TYPE_MANUFACTURING = 1;
     */
    ZONE_TYPE[ZONE_TYPE["ZONE_TYPE_MANUFACTURING"] = 1] = "ZONE_TYPE_MANUFACTURING";
    /**
     * Packaging zone
     *
     * @generated from enum value: ZONE_TYPE_PACKAGING = 2;
     */
    ZONE_TYPE[ZONE_TYPE["ZONE_TYPE_PACKAGING"] = 2] = "ZONE_TYPE_PACKAGING";
    /**
     * Shipping zone
     *
     * @generated from enum value: ZONE_TYPE_SHIPPING = 3;
     */
    ZONE_TYPE[ZONE_TYPE["ZONE_TYPE_SHIPPING"] = 3] = "ZONE_TYPE_SHIPPING";
})(ZONE_TYPE || (exports.ZONE_TYPE = ZONE_TYPE = {}));
// Retrieve enum metadata with: proto3.getEnumType(ZONE_TYPE)
protobuf_1.proto3.util.setEnumType(ZONE_TYPE, "scanswift.ZONE_TYPE", [
    { no: 0, name: "ZONE_TYPE_ANY_UNSPECIFIED" },
    { no: 1, name: "ZONE_TYPE_MANUFACTURING" },
    { no: 2, name: "ZONE_TYPE_PACKAGING" },
    { no: 3, name: "ZONE_TYPE_SHIPPING" },
]);
/**
 *
 * Describes the available sort keys for retrieving zones
 *
 * @generated from enum scanswift.ZONE_SORT_KEY
 */
var ZONE_SORT_KEY;
(function (ZONE_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: ZONE_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    ZONE_SORT_KEY[ZONE_SORT_KEY["ZONE_SORT_KEY_ID_UNSPECIFIED"] = 0] = "ZONE_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: ZONE_SORT_KEY_CREATED_AT = 1;
     */
    ZONE_SORT_KEY[ZONE_SORT_KEY["ZONE_SORT_KEY_CREATED_AT"] = 1] = "ZONE_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: ZONE_SORT_KEY_MODIFIED_AT = 2;
     */
    ZONE_SORT_KEY[ZONE_SORT_KEY["ZONE_SORT_KEY_MODIFIED_AT"] = 2] = "ZONE_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by name
     *
     * @generated from enum value: ZONE_SORT_KEY_NAME = 10;
     */
    ZONE_SORT_KEY[ZONE_SORT_KEY["ZONE_SORT_KEY_NAME"] = 10] = "ZONE_SORT_KEY_NAME";
    /**
     * Fetch ordered results by code
     *
     * @generated from enum value: ZONE_SORT_KEY_CODE = 11;
     */
    ZONE_SORT_KEY[ZONE_SORT_KEY["ZONE_SORT_KEY_CODE"] = 11] = "ZONE_SORT_KEY_CODE";
})(ZONE_SORT_KEY || (exports.ZONE_SORT_KEY = ZONE_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(ZONE_SORT_KEY)
protobuf_1.proto3.util.setEnumType(ZONE_SORT_KEY, "scanswift.ZONE_SORT_KEY", [
    { no: 0, name: "ZONE_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "ZONE_SORT_KEY_CREATED_AT" },
    { no: 2, name: "ZONE_SORT_KEY_MODIFIED_AT" },
    { no: 10, name: "ZONE_SORT_KEY_NAME" },
    { no: 11, name: "ZONE_SORT_KEY_CODE" },
]);
/**
 *
 * Describes the necessary data structure during creation of a zone
 *
 * @generated from message scanswift.ZonesServiceCreateRequest
 */
class ZonesServiceCreateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * The name of the zone
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the zone
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * Description of the zone
         *
         * @generated from field: string description = 12;
         */
        this.description = "";
        /**
         * The type of the zone
         *
         * @generated from field: scanswift.ZONE_TYPE type = 13;
         */
        this.type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ZonesServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ZonesServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ZonesServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ZonesServiceCreateRequest, a, b);
    }
}
exports.ZonesServiceCreateRequest = ZonesServiceCreateRequest;
ZonesServiceCreateRequest.runtime = protobuf_1.proto3;
ZonesServiceCreateRequest.typeName = "scanswift.ZonesServiceCreateRequest";
ZonesServiceCreateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(ZONE_TYPE) },
]);
/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a zone
 *
 * @generated from message scanswift.ZonesServiceUpdateRequest
 */
class ZonesServiceUpdateRequest extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * Stores any comment that the user might add during this operation
         *
         * @generated from field: string user_comment = 1;
         */
        this.userComment = "";
        /**
         * The UUID of the resource that needs to be updated
         *
         * @generated from field: string uuid = 2;
         */
        this.uuid = "";
        /**
         * The name of the zone
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the zone
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * Description of the zone
         *
         * @generated from field: string description = 12;
         */
        this.description = "";
        /**
         * The type of the zone
         *
         * @generated from field: scanswift.ZONE_TYPE type = 13;
         */
        this.type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ZonesServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ZonesServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ZonesServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ZonesServiceUpdateRequest, a, b);
    }
}
exports.ZonesServiceUpdateRequest = ZonesServiceUpdateRequest;
ZonesServiceUpdateRequest.runtime = protobuf_1.proto3;
ZonesServiceUpdateRequest.typeName = "scanswift.ZonesServiceUpdateRequest";
ZonesServiceUpdateRequest.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(ZONE_TYPE) },
]);
/**
 *
 * Describes the data structure of each zone on the platform
 *
 * @generated from message scanswift.Zone
 */
class Zone extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 2;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * The name of the zone
         *
         * @generated from field: string name = 10;
         */
        this.name = "";
        /**
         * Code of the zone
         *
         * @generated from field: string code = 11;
         */
        this.code = "";
        /**
         * Description of the zone
         *
         * @generated from field: string description = 12;
         */
        this.description = "";
        /**
         * The type of the zone
         *
         * @generated from field: scanswift.ZONE_TYPE type = 13;
         */
        this.type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new Zone().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Zone().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Zone().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Zone, a, b);
    }
}
exports.Zone = Zone;
Zone.runtime = protobuf_1.proto3;
Zone.typeName = "scanswift.Zone";
Zone.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(ZONE_TYPE) },
]);
/**
 *
 * Describes the data structure that stores a list of zones
 *
 * @generated from message scanswift.ZonesList
 */
class ZonesList extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * List of zones
         *
         * @generated from field: repeated scanswift.Zone list = 1;
         */
        this.list = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ZonesList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ZonesList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ZonesList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ZonesList, a, b);
    }
}
exports.ZonesList = ZonesList;
ZonesList.runtime = protobuf_1.proto3;
ZonesList.typeName = "scanswift.ZonesList";
ZonesList.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Zone, repeated: true },
]);
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message scanswift.ZonesServicePaginationReq
 */
class ZonesServicePaginationReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: scanswift.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: scanswift.ZONE_SORT_KEY sort_key = 5;
         */
        this.sortKey = ZONE_SORT_KEY.ZONE_SORT_KEY_ID_UNSPECIFIED;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ZonesServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ZonesServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ZonesServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ZonesServicePaginationReq, a, b);
    }
}
exports.ZonesServicePaginationReq = ZonesServicePaginationReq;
ZonesServicePaginationReq.runtime = protobuf_1.proto3;
ZonesServicePaginationReq.typeName = "scanswift.ZonesServicePaginationReq";
ZonesServicePaginationReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(ZONE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
]);
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message scanswift.ZonePaginationResp
 */
class ZonePaginationResp extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * The number of records in this payload
         *
         * @generated from field: int64 count = 1;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The total number of records that are available
         *
         * @generated from field: int64 total = 2;
         */
        this.total = protobuf_1.protoInt64.zero;
        /**
         * The list of records
         *
         * @generated from field: repeated scanswift.Zone payload = 3;
         */
        this.payload = [];
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ZonePaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ZonePaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ZonePaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ZonePaginationResp, a, b);
    }
}
exports.ZonePaginationResp = ZonePaginationResp;
ZonePaginationResp.runtime = protobuf_1.proto3;
ZonePaginationResp.typeName = "scanswift.ZonePaginationResp";
ZonePaginationResp.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Zone, repeated: true },
]);
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message scanswift.ZonesServiceFilterReq
 */
class ZonesServiceFilterReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: scanswift.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: scanswift.ZONE_SORT_KEY sort_key = 5;
         */
        this.sortKey = ZONE_SORT_KEY.ZONE_SORT_KEY_ID_UNSPECIFIED;
        /**
         * The minimum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_start = 6;
         */
        this.creationTimestampStart = protobuf_1.protoInt64.zero;
        /**
         * The maximum timestamp that needs to be considered to filter by creation
         *
         * @generated from field: int64 creation_timestamp_end = 7;
         */
        this.creationTimestampEnd = protobuf_1.protoInt64.zero;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 8;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * The name of the zone
         *
         * @generated from field: string name = 20;
         */
        this.name = "";
        /**
         * Code of the zone
         *
         * @generated from field: string code = 21;
         */
        this.code = "";
        /**
         * The type of the zone
         *
         * @generated from field: scanswift.ZONE_TYPE type = 22;
         */
        this.type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ZonesServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ZonesServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ZonesServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ZonesServiceFilterReq, a, b);
    }
}
exports.ZonesServiceFilterReq = ZonesServiceFilterReq;
ZonesServiceFilterReq.runtime = protobuf_1.proto3;
ZonesServiceFilterReq.typeName = "scanswift.ZonesServiceFilterReq";
ZonesServiceFilterReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(ZONE_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(ZONE_TYPE) },
]);
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message scanswift.ZonesServiceSearchAllReq
 */
class ZonesServiceSearchAllReq extends protobuf_1.Message {
    constructor(data) {
        super();
        /**
         * If true, then returns only active records. If false, then returns only inactive records
         *
         * @generated from field: bool is_active = 1;
         */
        this.isActive = false;
        /**
         * The number of records that need to be sent in the response. Returns all records if it is set to -1
         *
         * @generated from field: int64 count = 2;
         */
        this.count = protobuf_1.protoInt64.zero;
        /**
         * The number that need to be offset by before fetching the records
         *
         * @generated from field: int64 offset = 3;
         */
        this.offset = protobuf_1.protoInt64.zero;
        /**
         * The sort order that is to be used to fetch the pagination response
         *
         * @generated from field: scanswift.SORT_ORDER sort_order = 4;
         */
        this.sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
        /**
         * The sort key that is to be used to fetch the pagination response
         *
         * @generated from field: scanswift.ZONE_SORT_KEY sort_key = 5;
         */
        this.sortKey = ZONE_SORT_KEY.ZONE_SORT_KEY_ID_UNSPECIFIED;
        /**
         * UUID of the entity
         *
         * @generated from field: string entity_uuid = 6;
         */
        this.entityUuid = "";
        /**
         * UUID of the location
         *
         * @generated from field: string location_uuid = 9;
         */
        this.locationUuid = "";
        /**
         * Describes the key with which the search operation needs to be performed
         *
         * @generated from field: string search_key = 11;
         */
        this.searchKey = "";
        /**
         * The type of the zone
         *
         * @generated from field: scanswift.ZONE_TYPE type = 22;
         */
        this.type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static fromBinary(bytes, options) {
        return new ZonesServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new ZonesServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new ZonesServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(ZonesServiceSearchAllReq, a, b);
    }
}
exports.ZonesServiceSearchAllReq = ZonesServiceSearchAllReq;
ZonesServiceSearchAllReq.runtime = protobuf_1.proto3;
ZonesServiceSearchAllReq.typeName = "scanswift.ZonesServiceSearchAllReq";
ZonesServiceSearchAllReq.fields = protobuf_1.proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(ZONE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "type", kind: "enum", T: protobuf_1.proto3.getEnumType(ZONE_TYPE) },
]);
