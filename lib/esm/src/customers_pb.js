"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file customers.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomersServiceSearchAllReq = exports.CustomersServiceFilterReq = exports.CustomerPaginationResp = exports.CustomersServicePaginationReq = exports.CustomersList = exports.Customer = exports.CustomersServiceUpdateRequest = exports.CustomersServiceCreateRequest = exports.CUSTOMER_SORT_KEY = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the available sort keys for retrieving customers
 *
 * @generated from enum tcube.CUSTOMER_SORT_KEY
 */
var CUSTOMER_SORT_KEY;
(function (CUSTOMER_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: CUSTOMER_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    CUSTOMER_SORT_KEY[CUSTOMER_SORT_KEY["CUSTOMER_SORT_KEY_ID_UNSPECIFIED"] = 0] = "CUSTOMER_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: CUSTOMER_SORT_KEY_CREATED_AT = 1;
     */
    CUSTOMER_SORT_KEY[CUSTOMER_SORT_KEY["CUSTOMER_SORT_KEY_CREATED_AT"] = 1] = "CUSTOMER_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: CUSTOMER_SORT_KEY_MODIFIED_AT = 2;
     */
    CUSTOMER_SORT_KEY[CUSTOMER_SORT_KEY["CUSTOMER_SORT_KEY_MODIFIED_AT"] = 2] = "CUSTOMER_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by name
     *
     * @generated from enum value: CUSTOMER_SORT_KEY_NAME = 10;
     */
    CUSTOMER_SORT_KEY[CUSTOMER_SORT_KEY["CUSTOMER_SORT_KEY_NAME"] = 10] = "CUSTOMER_SORT_KEY_NAME";
    /**
     * Fetch ordered results by code
     *
     * @generated from enum value: CUSTOMER_SORT_KEY_CODE = 11;
     */
    CUSTOMER_SORT_KEY[CUSTOMER_SORT_KEY["CUSTOMER_SORT_KEY_CODE"] = 11] = "CUSTOMER_SORT_KEY_CODE";
})(CUSTOMER_SORT_KEY || (exports.CUSTOMER_SORT_KEY = CUSTOMER_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(CUSTOMER_SORT_KEY)
protobuf_1.proto3.util.setEnumType(CUSTOMER_SORT_KEY, "tcube.CUSTOMER_SORT_KEY", [
    { no: 0, name: "CUSTOMER_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "CUSTOMER_SORT_KEY_CREATED_AT" },
    { no: 2, name: "CUSTOMER_SORT_KEY_MODIFIED_AT" },
    { no: 10, name: "CUSTOMER_SORT_KEY_NAME" },
    { no: 11, name: "CUSTOMER_SORT_KEY_CODE" },
]);
/**
 *
 * Describes the necessary data structure during creation of a customer
 *
 * @generated from message tcube.CustomersServiceCreateRequest
 */
class CustomersServiceCreateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 2;
     */
    entityUuid = "";
    /**
     * The name of the customer
     *
     * @generated from field: string name = 10;
     */
    name = "";
    /**
     * Description of the customer
     *
     * @generated from field: string description = 12;
     */
    description = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.CustomersServiceCreateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new CustomersServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CustomersServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CustomersServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CustomersServiceCreateRequest, a, b);
    }
}
exports.CustomersServiceCreateRequest = CustomersServiceCreateRequest;
/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a customer
 *
 * @generated from message tcube.CustomersServiceUpdateRequest
 */
class CustomersServiceUpdateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * The UUID of the resource that needs to be updated
     *
     * @generated from field: string uuid = 2;
     */
    uuid = "";
    /**
     * The name of the customer
     *
     * @generated from field: string name = 10;
     */
    name = "";
    /**
     * Description of the customer
     *
     * @generated from field: string description = 12;
     */
    description = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.CustomersServiceUpdateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new CustomersServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CustomersServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CustomersServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CustomersServiceUpdateRequest, a, b);
    }
}
exports.CustomersServiceUpdateRequest = CustomersServiceUpdateRequest;
/**
 *
 * Describes the data structure of each customer on the platform
 *
 * @generated from message tcube.Customer
 */
class Customer extends protobuf_1.Message {
    /**
     * Stores the metadata of this resource
     *
     * @generated from field: tcube.Metadata metadata = 1;
     */
    metadata;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 2;
     */
    entityUuid = "";
    /**
     * The name of the customer
     *
     * @generated from field: string name = 10;
     */
    name = "";
    /**
     * Code of the customer
     *
     * @generated from field: string code = 11;
     */
    code = "";
    /**
     * Description of the customer
     *
     * @generated from field: string description = 12;
     */
    description = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.Customer";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
        { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Customer().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Customer().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Customer().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Customer, a, b);
    }
}
exports.Customer = Customer;
/**
 *
 * Describes the data structure that stores a list of customers
 *
 * @generated from message tcube.CustomersList
 */
class CustomersList extends protobuf_1.Message {
    /**
     * List of customers
     *
     * @generated from field: repeated tcube.Customer list = 1;
     */
    list = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.CustomersList";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "list", kind: "message", T: Customer, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new CustomersList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CustomersList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CustomersList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CustomersList, a, b);
    }
}
exports.CustomersList = CustomersList;
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.CustomersServicePaginationReq
 */
class CustomersServicePaginationReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.CUSTOMER_SORT_KEY sort_key = 5;
     */
    sortKey = CUSTOMER_SORT_KEY.CUSTOMER_SORT_KEY_ID_UNSPECIFIED;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 6;
     */
    entityUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.CustomersServicePaginationReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(CUSTOMER_SORT_KEY) },
        { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new CustomersServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CustomersServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CustomersServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CustomersServicePaginationReq, a, b);
    }
}
exports.CustomersServicePaginationReq = CustomersServicePaginationReq;
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.CustomerPaginationResp
 */
class CustomerPaginationResp extends protobuf_1.Message {
    /**
     * The number of records in this payload
     *
     * @generated from field: int64 count = 1;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The total number of records that are available
     *
     * @generated from field: int64 total = 2;
     */
    total = protobuf_1.protoInt64.zero;
    /**
     * The list of records
     *
     * @generated from field: repeated tcube.Customer payload = 3;
     */
    payload = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.CustomerPaginationResp";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "payload", kind: "message", T: Customer, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new CustomerPaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CustomerPaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CustomerPaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CustomerPaginationResp, a, b);
    }
}
exports.CustomerPaginationResp = CustomerPaginationResp;
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.CustomersServiceFilterReq
 */
class CustomersServiceFilterReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.CUSTOMER_SORT_KEY sort_key = 5;
     */
    sortKey = CUSTOMER_SORT_KEY.CUSTOMER_SORT_KEY_ID_UNSPECIFIED;
    /**
     * The minimum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_start = 6;
     */
    creationTimestampStart = protobuf_1.protoInt64.zero;
    /**
     * The maximum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_end = 7;
     */
    creationTimestampEnd = protobuf_1.protoInt64.zero;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 8;
     */
    entityUuid = "";
    /**
     * The name of the customer
     *
     * @generated from field: string name = 20;
     */
    name = "";
    /**
     * Code of the customer
     *
     * @generated from field: string code = 21;
     */
    code = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.CustomersServiceFilterReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(CUSTOMER_SORT_KEY) },
        { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new CustomersServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CustomersServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CustomersServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CustomersServiceFilterReq, a, b);
    }
}
exports.CustomersServiceFilterReq = CustomersServiceFilterReq;
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.CustomersServiceSearchAllReq
 */
class CustomersServiceSearchAllReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.CUSTOMER_SORT_KEY sort_key = 5;
     */
    sortKey = CUSTOMER_SORT_KEY.CUSTOMER_SORT_KEY_ID_UNSPECIFIED;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 6;
     */
    entityUuid = "";
    /**
     * Describes the key with which the search operation needs to be performed
     *
     * @generated from field: string search_key = 11;
     */
    searchKey = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.CustomersServiceSearchAllReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(CUSTOMER_SORT_KEY) },
        { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new CustomersServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new CustomersServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new CustomersServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(CustomersServiceSearchAllReq, a, b);
    }
}
exports.CustomersServiceSearchAllReq = CustomersServiceSearchAllReq;
