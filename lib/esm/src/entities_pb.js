"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file entities.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitiesServiceSearchAllReq = exports.EntitiesServiceFilterReq = exports.EntityPaginationResp = exports.EntitiesServicePaginationReq = exports.EntitiesList = exports.Entity = exports.EntitiesServiceUpdateRequest = exports.EntitiesServiceCreateRequest = exports.ENTITY_SORT_KEY = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the available sort keys for retrieving entities
 *
 * @generated from enum tcube.ENTITY_SORT_KEY
 */
var ENTITY_SORT_KEY;
(function (ENTITY_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: ENTITY_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    ENTITY_SORT_KEY[ENTITY_SORT_KEY["ENTITY_SORT_KEY_ID_UNSPECIFIED"] = 0] = "ENTITY_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: ENTITY_SORT_KEY_CREATED_AT = 1;
     */
    ENTITY_SORT_KEY[ENTITY_SORT_KEY["ENTITY_SORT_KEY_CREATED_AT"] = 1] = "ENTITY_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: ENTITY_SORT_KEY_MODIFIED_AT = 2;
     */
    ENTITY_SORT_KEY[ENTITY_SORT_KEY["ENTITY_SORT_KEY_MODIFIED_AT"] = 2] = "ENTITY_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by name
     *
     * @generated from enum value: ENTITY_SORT_KEY_NAME = 10;
     */
    ENTITY_SORT_KEY[ENTITY_SORT_KEY["ENTITY_SORT_KEY_NAME"] = 10] = "ENTITY_SORT_KEY_NAME";
    /**
     * Fetch ordered results by code
     *
     * @generated from enum value: ENTITY_SORT_KEY_CODE = 11;
     */
    ENTITY_SORT_KEY[ENTITY_SORT_KEY["ENTITY_SORT_KEY_CODE"] = 11] = "ENTITY_SORT_KEY_CODE";
})(ENTITY_SORT_KEY || (exports.ENTITY_SORT_KEY = ENTITY_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(ENTITY_SORT_KEY)
protobuf_1.proto3.util.setEnumType(ENTITY_SORT_KEY, "tcube.ENTITY_SORT_KEY", [
    { no: 0, name: "ENTITY_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "ENTITY_SORT_KEY_CREATED_AT" },
    { no: 2, name: "ENTITY_SORT_KEY_MODIFIED_AT" },
    { no: 10, name: "ENTITY_SORT_KEY_NAME" },
    { no: 11, name: "ENTITY_SORT_KEY_CODE" },
]);
/**
 *
 * Describes the necessary data structure during creation of a entity
 *
 * @generated from message tcube.EntitiesServiceCreateRequest
 */
class EntitiesServiceCreateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * The name of the entity
     *
     * @generated from field: string name = 10;
     */
    name = "";
    /**
     * The global identifier of the entity
     *
     * @generated from field: string global_identifier = 11;
     */
    globalIdentifier = "";
    /**
     * Description of the entity
     *
     * @generated from field: string description = 14;
     */
    description = "";
    /**
     * The email address of the entity
     *
     * @generated from field: string email = 15;
     */
    email = "";
    /**
     * The phone number of the entity
     *
     * @generated from field: string phone = 16;
     */
    phone = "";
    /**
     * The address of the entity
     *
     * @generated from field: string address = 17;
     */
    address = "";
    /**
     * The city in which the entity is based out of
     *
     * @generated from field: string city = 18;
     */
    city = "";
    /**
     * The state in which the entity is based out of
     *
     * @generated from field: string state = 19;
     */
    state = "";
    /**
     * The zipcode of the location in which the entity is based out of
     *
     * @generated from field: string zip_code = 20;
     */
    zipCode = "";
    /**
     * An optional custom domain name, which will be used to display info about serials, packagings and shippings
     *
     * @generated from field: string domain = 21;
     */
    domain = "";
    /**
     * The first name of the entity administrator
     *
     * @generated from field: string first_name = 30;
     */
    firstName = "";
    /**
     * The last name of the entity administrator
     *
     * // The password with which the user can login for the first time
     * string plain_text_password = 32 [(validate.rules).string = {
     *     pattern:   "^[0-9A-Za-z_@\\-]+$", // No spaces
     *     max_bytes: 100,
     * }];
     *
     * @generated from field: string last_name = 31;
     */
    lastName = "";
    /**
     * The UUID of the role of the user that is creating this entity
     *
     * @generated from field: string role_uuid = 40;
     */
    roleUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.EntitiesServiceCreateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "global_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 14, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 15, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 16, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 17, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 18, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 19, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 20, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 21, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 30, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 31, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 40, name: "role_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesServiceCreateRequest, a, b);
    }
}
exports.EntitiesServiceCreateRequest = EntitiesServiceCreateRequest;
/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a entity
 *
 * @generated from message tcube.EntitiesServiceUpdateRequest
 */
class EntitiesServiceUpdateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * The UUID of the resource that needs to be updated
     *
     * @generated from field: string uuid = 2;
     */
    uuid = "";
    /**
     * The name of the entity
     *
     * @generated from field: string name = 10;
     */
    name = "";
    /**
     * The global identifier of the entity
     *
     * @generated from field: string global_identifier = 11;
     */
    globalIdentifier = "";
    /**
     * Description of the entity
     *
     * @generated from field: string description = 14;
     */
    description = "";
    /**
     * The email address of the entity
     *
     * @generated from field: string email = 15;
     */
    email = "";
    /**
     * The phone number of the entity
     *
     * @generated from field: string phone = 16;
     */
    phone = "";
    /**
     * The address of the entity
     *
     * @generated from field: string address = 17;
     */
    address = "";
    /**
     * The city in which the entity is based out of
     *
     * @generated from field: string city = 18;
     */
    city = "";
    /**
     * The state in which the entity is based out of
     *
     * @generated from field: string state = 19;
     */
    state = "";
    /**
     * The zipcode of the location in which the entity is based out of
     *
     * @generated from field: string zip_code = 20;
     */
    zipCode = "";
    /**
     * An optional custom domain name, which will be used to display info about serials, packagings and shippings
     *
     * @generated from field: string domain = 21;
     */
    domain = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.EntitiesServiceUpdateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "global_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 14, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 15, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 16, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 17, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 18, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 19, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 20, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 21, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesServiceUpdateRequest, a, b);
    }
}
exports.EntitiesServiceUpdateRequest = EntitiesServiceUpdateRequest;
/**
 *
 * Describes the data structure of each entity on the platform
 *
 * @generated from message tcube.Entity
 */
class Entity extends protobuf_1.Message {
    /**
     * Stores the metadata of this resource
     *
     * @generated from field: tcube.Metadata metadata = 1;
     */
    metadata;
    /**
     * The name of the entity
     *
     * @generated from field: string name = 10;
     */
    name = "";
    /**
     * The global identifier of the entity
     *
     * @generated from field: string global_identifier = 11;
     */
    globalIdentifier = "";
    /**
     * Description of the entity
     *
     * @generated from field: string description = 12;
     */
    description = "";
    /**
     * Code of the entity
     *
     * @generated from field: string code = 13;
     */
    code = "";
    /**
     * The email address of the entity
     *
     * @generated from field: string email = 14;
     */
    email = "";
    /**
     * The phone number of the entity
     *
     * @generated from field: string phone = 15;
     */
    phone = "";
    /**
     * The address of the entity
     *
     * @generated from field: string address = 16;
     */
    address = "";
    /**
     * The city in which the entity is based out of
     *
     * @generated from field: string city = 17;
     */
    city = "";
    /**
     * The state in which the entity is based out of
     *
     * @generated from field: string state = 18;
     */
    state = "";
    /**
     * The zipcode of the location in which the entity is based out of
     *
     * @generated from field: string zip_code = 19;
     */
    zipCode = "";
    /**
     * Stores if the entity has been verified
     *
     * @generated from field: bool is_verified = 20;
     */
    isVerified = false;
    /**
     * An optional custom domain name, which will be used to display info about serials, packagings and shippings
     *
     * @generated from field: string domain = 21;
     */
    domain = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.Entity";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
        { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "global_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 13, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 14, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 15, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 16, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 17, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 18, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 19, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 20, name: "is_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 21, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new Entity().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new Entity().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new Entity().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(Entity, a, b);
    }
}
exports.Entity = Entity;
/**
 *
 * Describes the data structure that stores a list of entities
 *
 * @generated from message tcube.EntitiesList
 */
class EntitiesList extends protobuf_1.Message {
    /**
     * List of entities
     *
     * @generated from field: repeated tcube.Entity list = 1;
     */
    list = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.EntitiesList";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "list", kind: "message", T: Entity, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesList, a, b);
    }
}
exports.EntitiesList = EntitiesList;
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.EntitiesServicePaginationReq
 */
class EntitiesServicePaginationReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.ENTITY_SORT_KEY sort_key = 5;
     */
    sortKey = ENTITY_SORT_KEY.ENTITY_SORT_KEY_ID_UNSPECIFIED;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.EntitiesServicePaginationReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(ENTITY_SORT_KEY) },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesServicePaginationReq, a, b);
    }
}
exports.EntitiesServicePaginationReq = EntitiesServicePaginationReq;
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.EntityPaginationResp
 */
class EntityPaginationResp extends protobuf_1.Message {
    /**
     * The number of records in this payload
     *
     * @generated from field: int64 count = 1;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The total number of records that are available
     *
     * @generated from field: int64 total = 2;
     */
    total = protobuf_1.protoInt64.zero;
    /**
     * The list of records
     *
     * @generated from field: repeated tcube.Entity payload = 3;
     */
    payload = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.EntityPaginationResp";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "payload", kind: "message", T: Entity, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new EntityPaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntityPaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntityPaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntityPaginationResp, a, b);
    }
}
exports.EntityPaginationResp = EntityPaginationResp;
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.EntitiesServiceFilterReq
 */
class EntitiesServiceFilterReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.ENTITY_SORT_KEY sort_key = 5;
     */
    sortKey = ENTITY_SORT_KEY.ENTITY_SORT_KEY_ID_UNSPECIFIED;
    /**
     * The minimum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_start = 6;
     */
    creationTimestampStart = protobuf_1.protoInt64.zero;
    /**
     * The maximum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_end = 7;
     */
    creationTimestampEnd = protobuf_1.protoInt64.zero;
    /**
     * The name of the entity
     *
     * @generated from field: string name = 20;
     */
    name = "";
    /**
     * Code of the entity
     *
     * @generated from field: string code = 21;
     */
    code = "";
    /**
     * The email address of the entity
     *
     * @generated from field: string email = 23;
     */
    email = "";
    /**
     * The phone number of the entity
     *
     * @generated from field: string phone = 24;
     */
    phone = "";
    /**
     * The city in which the entity is based out of
     *
     * @generated from field: string city = 26;
     */
    city = "";
    /**
     * The state in which the entity is based out of
     *
     * @generated from field: string state = 27;
     */
    state = "";
    /**
     * The zipcode of the location in which the entity is based out of
     *
     * @generated from field: string zip_code = 28;
     */
    zipCode = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.EntitiesServiceFilterReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(ENTITY_SORT_KEY) },
        { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 23, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 24, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 26, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 27, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 28, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesServiceFilterReq, a, b);
    }
}
exports.EntitiesServiceFilterReq = EntitiesServiceFilterReq;
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.EntitiesServiceSearchAllReq
 */
class EntitiesServiceSearchAllReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.ENTITY_SORT_KEY sort_key = 5;
     */
    sortKey = ENTITY_SORT_KEY.ENTITY_SORT_KEY_ID_UNSPECIFIED;
    /**
     * Describes the key with which the search operation needs to be performed
     *
     * @generated from field: string search_key = 11;
     */
    searchKey = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.EntitiesServiceSearchAllReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(ENTITY_SORT_KEY) },
        { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesServiceSearchAllReq, a, b);
    }
}
exports.EntitiesServiceSearchAllReq = EntitiesServiceSearchAllReq;
