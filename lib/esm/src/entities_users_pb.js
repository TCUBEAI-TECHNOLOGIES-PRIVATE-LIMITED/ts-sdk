"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file entities_users.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.EntitiesUsersServiceSearchAllReq = exports.EntitiesUsersServiceFilterReq = exports.EntityUserPaginationResp = exports.EntitiesUsersServicePaginationReq = exports.EntitiesUsersList = exports.EntityUser = exports.EntitiesUsersServiceUpdateRequest = exports.EntitiesUsersServiceCreateRequest = exports.ENTITY_USER_SORT_KEY = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the available sort keys for retrieving entities users
 *
 * @generated from enum scanswift.ENTITY_USER_SORT_KEY
 */
var ENTITY_USER_SORT_KEY;
(function (ENTITY_USER_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: ENTITY_USER_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    ENTITY_USER_SORT_KEY[ENTITY_USER_SORT_KEY["ENTITY_USER_SORT_KEY_ID_UNSPECIFIED"] = 0] = "ENTITY_USER_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: ENTITY_USER_SORT_KEY_CREATED_AT = 1;
     */
    ENTITY_USER_SORT_KEY[ENTITY_USER_SORT_KEY["ENTITY_USER_SORT_KEY_CREATED_AT"] = 1] = "ENTITY_USER_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: ENTITY_USER_SORT_KEY_MODIFIED_AT = 2;
     */
    ENTITY_USER_SORT_KEY[ENTITY_USER_SORT_KEY["ENTITY_USER_SORT_KEY_MODIFIED_AT"] = 2] = "ENTITY_USER_SORT_KEY_MODIFIED_AT";
})(ENTITY_USER_SORT_KEY || (exports.ENTITY_USER_SORT_KEY = ENTITY_USER_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(ENTITY_USER_SORT_KEY)
protobuf_1.proto3.util.setEnumType(ENTITY_USER_SORT_KEY, "scanswift.ENTITY_USER_SORT_KEY", [
    { no: 0, name: "ENTITY_USER_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "ENTITY_USER_SORT_KEY_CREATED_AT" },
    { no: 2, name: "ENTITY_USER_SORT_KEY_MODIFIED_AT" },
]);
/**
 *
 * Describes the necessary data structure during creation of an entity user
 *
 * @generated from message scanswift.EntitiesUsersServiceCreateRequest
 */
class EntitiesUsersServiceCreateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 2;
     */
    entityUuid = "";
    /**
     * UUID of the user registered as the entity user
     *
     * @generated from field: string user_uuid = 10;
     */
    userUuid = "";
    /**
     * UUID of the associated role
     *
     * @generated from field: string role_uuid = 11;
     */
    roleUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.EntitiesUsersServiceCreateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "role_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesUsersServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesUsersServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesUsersServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesUsersServiceCreateRequest, a, b);
    }
}
exports.EntitiesUsersServiceCreateRequest = EntitiesUsersServiceCreateRequest;
/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on an entity user
 *
 * @generated from message scanswift.EntitiesUsersServiceUpdateRequest
 */
class EntitiesUsersServiceUpdateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * The UUID of the resource that needs to be updated
     *
     * @generated from field: string uuid = 2;
     */
    uuid = "";
    /**
     * UUID of the associated role
     *
     * @generated from field: string role_uuid = 11;
     */
    roleUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.EntitiesUsersServiceUpdateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "role_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesUsersServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesUsersServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesUsersServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesUsersServiceUpdateRequest, a, b);
    }
}
exports.EntitiesUsersServiceUpdateRequest = EntitiesUsersServiceUpdateRequest;
/**
 *
 * Describes the data structure of each entity user on the platform
 *
 * @generated from message scanswift.EntityUser
 */
class EntityUser extends protobuf_1.Message {
    /**
     * Stores the metadata of this resource
     *
     * @generated from field: scanswift.Metadata metadata = 1;
     */
    metadata;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 2;
     */
    entityUuid = "";
    /**
     * UUID of the user registered as the entity user
     *
     * @generated from field: string user_uuid = 10;
     */
    userUuid = "";
    /**
     * UUID of the associated role
     *
     * @generated from field: string role_uuid = 11;
     */
    roleUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.EntityUser";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
        { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "role_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntityUser().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntityUser().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntityUser().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntityUser, a, b);
    }
}
exports.EntityUser = EntityUser;
/**
 *
 * Describes the data structure that stores a list of entities users
 *
 * @generated from message scanswift.EntitiesUsersList
 */
class EntitiesUsersList extends protobuf_1.Message {
    /**
     * List of entities users
     *
     * @generated from field: repeated scanswift.EntityUser list = 1;
     */
    list = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.EntitiesUsersList";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "list", kind: "message", T: EntityUser, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesUsersList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesUsersList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesUsersList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesUsersList, a, b);
    }
}
exports.EntitiesUsersList = EntitiesUsersList;
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message scanswift.EntitiesUsersServicePaginationReq
 */
class EntitiesUsersServicePaginationReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.ENTITY_USER_SORT_KEY sort_key = 5;
     */
    sortKey = ENTITY_USER_SORT_KEY.ENTITY_USER_SORT_KEY_ID_UNSPECIFIED;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 6;
     */
    entityUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.EntitiesUsersServicePaginationReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(ENTITY_USER_SORT_KEY) },
        { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesUsersServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesUsersServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesUsersServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesUsersServicePaginationReq, a, b);
    }
}
exports.EntitiesUsersServicePaginationReq = EntitiesUsersServicePaginationReq;
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message scanswift.EntityUserPaginationResp
 */
class EntityUserPaginationResp extends protobuf_1.Message {
    /**
     * The number of records in this payload
     *
     * @generated from field: int64 count = 1;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The total number of records that are available
     *
     * @generated from field: int64 total = 2;
     */
    total = protobuf_1.protoInt64.zero;
    /**
     * The list of records
     *
     * @generated from field: repeated scanswift.EntityUser payload = 3;
     */
    payload = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.EntityUserPaginationResp";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "payload", kind: "message", T: EntityUser, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new EntityUserPaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntityUserPaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntityUserPaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntityUserPaginationResp, a, b);
    }
}
exports.EntityUserPaginationResp = EntityUserPaginationResp;
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message scanswift.EntitiesUsersServiceFilterReq
 */
class EntitiesUsersServiceFilterReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.ENTITY_USER_SORT_KEY sort_key = 5;
     */
    sortKey = ENTITY_USER_SORT_KEY.ENTITY_USER_SORT_KEY_ID_UNSPECIFIED;
    /**
     * The minimum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_start = 6;
     */
    creationTimestampStart = protobuf_1.protoInt64.zero;
    /**
     * The maximum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_end = 7;
     */
    creationTimestampEnd = protobuf_1.protoInt64.zero;
    /**
     * UUID of the entity (optional, since the consumer might need to fetch records on the basis of other records, irrespective of the entity)
     *
     * @generated from field: string entity_uuid = 8;
     */
    entityUuid = "";
    /**
     * UUID of the user registered as the entity user
     *
     * @generated from field: string user_uuid = 20;
     */
    userUuid = "";
    /**
     * UUID of the associated role
     *
     * @generated from field: string role_uuid = 21;
     */
    roleUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.EntitiesUsersServiceFilterReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(ENTITY_USER_SORT_KEY) },
        { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 20, name: "user_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 21, name: "role_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesUsersServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesUsersServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesUsersServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesUsersServiceFilterReq, a, b);
    }
}
exports.EntitiesUsersServiceFilterReq = EntitiesUsersServiceFilterReq;
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message scanswift.EntitiesUsersServiceSearchAllReq
 */
class EntitiesUsersServiceSearchAllReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.ENTITY_USER_SORT_KEY sort_key = 5;
     */
    sortKey = ENTITY_USER_SORT_KEY.ENTITY_USER_SORT_KEY_ID_UNSPECIFIED;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 6;
     */
    entityUuid = "";
    /**
     * Describes the key with which the search operation needs to be performed
     *
     * @generated from field: string search_key = 11;
     */
    searchKey = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.EntitiesUsersServiceSearchAllReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(ENTITY_USER_SORT_KEY) },
        { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new EntitiesUsersServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new EntitiesUsersServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new EntitiesUsersServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(EntitiesUsersServiceSearchAllReq, a, b);
    }
}
exports.EntitiesUsersServiceSearchAllReq = EntitiesUsersServiceSearchAllReq;
