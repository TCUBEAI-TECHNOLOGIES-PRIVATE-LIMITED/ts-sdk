"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file serials_reviews.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.SerialsReviewsServiceSearchAllReq = exports.SerialsReviewsServiceFilterReq = exports.SerialReviewPaginationResp = exports.SerialsReviewsServicePaginationReq = exports.SerialsReviewsList = exports.SerialReview = exports.SerialsReviewsServiceUpdateRequest = exports.SerialsReviewsServiceCreateRequest = exports.SERIAL_REVIEW_SORT_KEY = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
const scans_pb_js_1 = require("./scans_pb.js");
/**
 *
 * Describes the available sort keys for retrieving serials reviews
 *
 * @generated from enum scanswift.SERIAL_REVIEW_SORT_KEY
 */
var SERIAL_REVIEW_SORT_KEY;
(function (SERIAL_REVIEW_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    SERIAL_REVIEW_SORT_KEY[SERIAL_REVIEW_SORT_KEY["SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED"] = 0] = "SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: SERIAL_REVIEW_SORT_KEY_CREATED_AT = 1;
     */
    SERIAL_REVIEW_SORT_KEY[SERIAL_REVIEW_SORT_KEY["SERIAL_REVIEW_SORT_KEY_CREATED_AT"] = 1] = "SERIAL_REVIEW_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: SERIAL_REVIEW_SORT_KEY_MODIFIED_AT = 2;
     */
    SERIAL_REVIEW_SORT_KEY[SERIAL_REVIEW_SORT_KEY["SERIAL_REVIEW_SORT_KEY_MODIFIED_AT"] = 2] = "SERIAL_REVIEW_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by name
     *
     * @generated from enum value: SERIAL_REVIEW_SORT_KEY_NAME = 10;
     */
    SERIAL_REVIEW_SORT_KEY[SERIAL_REVIEW_SORT_KEY["SERIAL_REVIEW_SORT_KEY_NAME"] = 10] = "SERIAL_REVIEW_SORT_KEY_NAME";
    /**
     * Fetch ordered results by rating
     *
     * @generated from enum value: SERIAL_REVIEW_SORT_KEY_RATING = 11;
     */
    SERIAL_REVIEW_SORT_KEY[SERIAL_REVIEW_SORT_KEY["SERIAL_REVIEW_SORT_KEY_RATING"] = 11] = "SERIAL_REVIEW_SORT_KEY_RATING";
})(SERIAL_REVIEW_SORT_KEY || (exports.SERIAL_REVIEW_SORT_KEY = SERIAL_REVIEW_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(SERIAL_REVIEW_SORT_KEY)
protobuf_1.proto3.util.setEnumType(SERIAL_REVIEW_SORT_KEY, "scanswift.SERIAL_REVIEW_SORT_KEY", [
    { no: 0, name: "SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "SERIAL_REVIEW_SORT_KEY_CREATED_AT" },
    { no: 2, name: "SERIAL_REVIEW_SORT_KEY_MODIFIED_AT" },
    { no: 10, name: "SERIAL_REVIEW_SORT_KEY_NAME" },
    { no: 11, name: "SERIAL_REVIEW_SORT_KEY_RATING" },
]);
/**
 *
 * Describes the necessary data structure during creation of a serial review
 *
 * @generated from message scanswift.SerialsReviewsServiceCreateRequest
 */
class SerialsReviewsServiceCreateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * UUID of the serial
     *
     * @generated from field: string serial_uuid = 10;
     */
    serialUuid = "";
    /**
     * The name of the person
     *
     * @generated from field: string name = 12;
     */
    name = "";
    /**
     * The rating given by the customer (between 1 and 5)
     *
     * @generated from field: int64 rating = 13;
     */
    rating = protobuf_1.protoInt64.zero;
    /**
     * Optional content of the review
     *
     * @generated from field: string content = 14;
     */
    content = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.SerialsReviewsServiceCreateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 13, name: "rating", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 14, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SerialsReviewsServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsReviewsServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsReviewsServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsReviewsServiceCreateRequest, a, b);
    }
}
exports.SerialsReviewsServiceCreateRequest = SerialsReviewsServiceCreateRequest;
/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a serial review
 *
 * @generated from message scanswift.SerialsReviewsServiceUpdateRequest
 */
class SerialsReviewsServiceUpdateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * The UUID of the resource that needs to be updated
     *
     * @generated from field: string uuid = 2;
     */
    uuid = "";
    /**
     * The name of the person
     *
     * @generated from field: string name = 12;
     */
    name = "";
    /**
     * The rating given by the customer (between 1 and 5)
     *
     * @generated from field: int64 rating = 13;
     */
    rating = protobuf_1.protoInt64.zero;
    /**
     * Optional content of the review
     *
     * @generated from field: string content = 14;
     */
    content = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.SerialsReviewsServiceUpdateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 13, name: "rating", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 14, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SerialsReviewsServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsReviewsServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsReviewsServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsReviewsServiceUpdateRequest, a, b);
    }
}
exports.SerialsReviewsServiceUpdateRequest = SerialsReviewsServiceUpdateRequest;
/**
 *
 * Describes the data structure of each serial review on the platform
 *
 * @generated from message scanswift.SerialReview
 */
class SerialReview extends protobuf_1.Message {
    /**
     * Stores the metadata of this resource
     *
     * @generated from field: scanswift.Metadata metadata = 1;
     */
    metadata;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 2;
     */
    entityUuid = "";
    /**
     * UUID of the serial
     *
     * @generated from field: string serial_uuid = 10;
     */
    serialUuid = "";
    /**
     * UUID of the associated product
     *
     * @generated from field: string product_uuid = 11;
     */
    productUuid = "";
    /**
     * The name of the person
     *
     * @generated from field: string name = 12;
     */
    name = "";
    /**
     * The rating given by the customer (between 1 and 5)
     *
     * @generated from field: int64 rating = 13;
     */
    rating = protobuf_1.protoInt64.zero;
    /**
     * Optional content of the review
     *
     * @generated from field: string content = 14;
     */
    content = "";
    /**
     * The latitude of the location
     *
     * @generated from field: double latitude = 21;
     */
    latitude = 0;
    /**
     * The longitude of the location
     *
     * @generated from field: double longitude = 22;
     */
    longitude = 0;
    /**
     * Stores if the location has been inferred from IP or from user provided geocoordinates
     *
     * @generated from field: scanswift.INFERRED_FROM inferred_from = 23;
     */
    inferredFrom = scans_pb_js_1.INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.SerialReview";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
        { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 13, name: "rating", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 14, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 21, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 22, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
        { no: 23, name: "inferred_from", kind: "enum", T: protobuf_1.proto3.getEnumType(scans_pb_js_1.INFERRED_FROM) },
    ]);
    static fromBinary(bytes, options) {
        return new SerialReview().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialReview().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialReview().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialReview, a, b);
    }
}
exports.SerialReview = SerialReview;
/**
 *
 * Describes the data structure that stores a list of serials reviews
 *
 * @generated from message scanswift.SerialsReviewsList
 */
class SerialsReviewsList extends protobuf_1.Message {
    /**
     * List of serials reviews
     *
     * @generated from field: repeated scanswift.SerialReview list = 1;
     */
    list = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.SerialsReviewsList";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "list", kind: "message", T: SerialReview, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new SerialsReviewsList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsReviewsList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsReviewsList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsReviewsList, a, b);
    }
}
exports.SerialsReviewsList = SerialsReviewsList;
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message scanswift.SerialsReviewsServicePaginationReq
 */
class SerialsReviewsServicePaginationReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.SERIAL_REVIEW_SORT_KEY sort_key = 5;
     */
    sortKey = SERIAL_REVIEW_SORT_KEY.SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 6;
     */
    entityUuid = "";
    /**
     * UUID of the product
     *
     * @generated from field: string product_uuid = 7;
     */
    productUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.SerialsReviewsServicePaginationReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_REVIEW_SORT_KEY) },
        { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SerialsReviewsServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsReviewsServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsReviewsServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsReviewsServicePaginationReq, a, b);
    }
}
exports.SerialsReviewsServicePaginationReq = SerialsReviewsServicePaginationReq;
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message scanswift.SerialReviewPaginationResp
 */
class SerialReviewPaginationResp extends protobuf_1.Message {
    /**
     * The number of records in this payload
     *
     * @generated from field: int64 count = 1;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The total number of records that are available
     *
     * @generated from field: int64 total = 2;
     */
    total = protobuf_1.protoInt64.zero;
    /**
     * The list of records
     *
     * @generated from field: repeated scanswift.SerialReview payload = 3;
     */
    payload = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.SerialReviewPaginationResp";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "payload", kind: "message", T: SerialReview, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new SerialReviewPaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialReviewPaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialReviewPaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialReviewPaginationResp, a, b);
    }
}
exports.SerialReviewPaginationResp = SerialReviewPaginationResp;
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message scanswift.SerialsReviewsServiceFilterReq
 */
class SerialsReviewsServiceFilterReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.SERIAL_REVIEW_SORT_KEY sort_key = 5;
     */
    sortKey = SERIAL_REVIEW_SORT_KEY.SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED;
    /**
     * The minimum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_start = 6;
     */
    creationTimestampStart = protobuf_1.protoInt64.zero;
    /**
     * The maximum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_end = 7;
     */
    creationTimestampEnd = protobuf_1.protoInt64.zero;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 8;
     */
    entityUuid = "";
    /**
     * UUID of the serial
     *
     * @generated from field: string serial_uuid = 9;
     */
    serialUuid = "";
    /**
     * UUID of the product
     *
     * @generated from field: string product_uuid = 10;
     */
    productUuid = "";
    /**
     * The name of the serial review
     *
     * @generated from field: string name = 20;
     */
    name = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.SerialsReviewsServiceFilterReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_REVIEW_SORT_KEY) },
        { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 9, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SerialsReviewsServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsReviewsServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsReviewsServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsReviewsServiceFilterReq, a, b);
    }
}
exports.SerialsReviewsServiceFilterReq = SerialsReviewsServiceFilterReq;
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message scanswift.SerialsReviewsServiceSearchAllReq
 */
class SerialsReviewsServiceSearchAllReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: scanswift.SERIAL_REVIEW_SORT_KEY sort_key = 5;
     */
    sortKey = SERIAL_REVIEW_SORT_KEY.SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED;
    /**
     * UUID of the entity
     *
     * @generated from field: string entity_uuid = 6;
     */
    entityUuid = "";
    /**
     * UUID of the serial
     *
     * @generated from field: string serial_uuid = 7;
     */
    serialUuid = "";
    /**
     * UUID of the product
     *
     * @generated from field: string product_uuid = 8;
     */
    productUuid = "";
    /**
     * Describes the key with which the search operation needs to be performed
     *
     * @generated from field: string search_key = 11;
     */
    searchKey = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "scanswift.SerialsReviewsServiceSearchAllReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(SERIAL_REVIEW_SORT_KEY) },
        { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 7, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 8, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new SerialsReviewsServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new SerialsReviewsServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new SerialsReviewsServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(SerialsReviewsServiceSearchAllReq, a, b);
    }
}
exports.SerialsReviewsServiceSearchAllReq = SerialsReviewsServiceSearchAllReq;
