"use strict";
// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file users.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
exports.UsersServiceSearchAllReq = exports.UsersServiceFilterReq = exports.UserPaginationResp = exports.UsersServicePaginationReq = exports.UsersList = exports.User = exports.UsersServiceRegisterUserDeviceRequest = exports.UsersServiceResetPasswordRequest = exports.UsersServiceUpdatePasswordRequest = exports.UsersServiceUpdateRequest = exports.UsersServiceCreateRequest = exports.USER_SORT_KEY = void 0;
const protobuf_1 = require("@bufbuild/protobuf");
const base_pb_js_1 = require("./base_pb.js");
/**
 *
 * Describes the available sort keys for retrieving users
 *
 * @generated from enum tcube.USER_SORT_KEY
 */
var USER_SORT_KEY;
(function (USER_SORT_KEY) {
    /**
     * Fetch ordered results by id
     *
     * @generated from enum value: USER_SORT_KEY_ID_UNSPECIFIED = 0;
     */
    USER_SORT_KEY[USER_SORT_KEY["USER_SORT_KEY_ID_UNSPECIFIED"] = 0] = "USER_SORT_KEY_ID_UNSPECIFIED";
    /**
     * Fetch ordered results by the creation timestamp
     *
     * @generated from enum value: USER_SORT_KEY_CREATED_AT = 1;
     */
    USER_SORT_KEY[USER_SORT_KEY["USER_SORT_KEY_CREATED_AT"] = 1] = "USER_SORT_KEY_CREATED_AT";
    /**
     * Fetch ordered results by the modified timestamp
     *
     * @generated from enum value: USER_SORT_KEY_MODIFIED_AT = 2;
     */
    USER_SORT_KEY[USER_SORT_KEY["USER_SORT_KEY_MODIFIED_AT"] = 2] = "USER_SORT_KEY_MODIFIED_AT";
    /**
     * Fetch ordered results by first name
     *
     * @generated from enum value: USER_SORT_KEY_FIRST_NAME = 10;
     */
    USER_SORT_KEY[USER_SORT_KEY["USER_SORT_KEY_FIRST_NAME"] = 10] = "USER_SORT_KEY_FIRST_NAME";
    /**
     * Fetch ordered results by last name
     *
     * @generated from enum value: USER_SORT_KEY_LAST_NAME = 11;
     */
    USER_SORT_KEY[USER_SORT_KEY["USER_SORT_KEY_LAST_NAME"] = 11] = "USER_SORT_KEY_LAST_NAME";
    /**
     * Fetch ordered results by username
     *
     * @generated from enum value: USER_SORT_KEY_USERNAME = 12;
     */
    USER_SORT_KEY[USER_SORT_KEY["USER_SORT_KEY_USERNAME"] = 12] = "USER_SORT_KEY_USERNAME";
})(USER_SORT_KEY || (exports.USER_SORT_KEY = USER_SORT_KEY = {}));
// Retrieve enum metadata with: proto3.getEnumType(USER_SORT_KEY)
protobuf_1.proto3.util.setEnumType(USER_SORT_KEY, "tcube.USER_SORT_KEY", [
    { no: 0, name: "USER_SORT_KEY_ID_UNSPECIFIED" },
    { no: 1, name: "USER_SORT_KEY_CREATED_AT" },
    { no: 2, name: "USER_SORT_KEY_MODIFIED_AT" },
    { no: 10, name: "USER_SORT_KEY_FIRST_NAME" },
    { no: 11, name: "USER_SORT_KEY_LAST_NAME" },
    { no: 12, name: "USER_SORT_KEY_USERNAME" },
]);
/**
 *
 * Describes the necessary data structure during creation of a user
 *
 * @generated from message tcube.UsersServiceCreateRequest
 */
class UsersServiceCreateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * The first name of the user
     *
     * @generated from field: string first_name = 10;
     */
    firstName = "";
    /**
     * The last name of the user
     *
     * @generated from field: string last_name = 11;
     */
    lastName = "";
    /**
     * Username of the user
     *
     * @generated from field: string username = 12;
     */
    username = "";
    /**
     * The email address of the user
     *
     * @generated from field: string email = 13;
     */
    email = "";
    /**
     * The phone number of the user
     *
     * @generated from field: string phone = 14;
     */
    phone = "";
    /**
     * The address of the user
     *
     * @generated from field: string address = 15;
     */
    address = "";
    /**
     * Optional UUID of the entity (if present, then a corresponding entity user is also created)
     *
     * @generated from field: string entity_uuid = 30;
     */
    entityUuid = "";
    /**
     * Optional UUID of the associated role (if present, then the corresponding entity user is created with the given role UUID)
     *
     * @generated from field: string role_uuid = 31;
     */
    roleUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UsersServiceCreateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 13, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 14, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 15, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 30, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 31, name: "role_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UsersServiceCreateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UsersServiceCreateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UsersServiceCreateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UsersServiceCreateRequest, a, b);
    }
}
exports.UsersServiceCreateRequest = UsersServiceCreateRequest;
/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a user
 *
 * @generated from message tcube.UsersServiceUpdateRequest
 */
class UsersServiceUpdateRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * The UUID of the user that needs to be updated
     *
     * @generated from field: string uuid = 2;
     */
    uuid = "";
    /**
     * The first name of the user
     *
     * @generated from field: string first_name = 10;
     */
    firstName = "";
    /**
     * The last name of the user
     *
     * // Username of the user
     * string username = 12 [(validate.rules).string = {
     *     min_bytes: 1,
     *     max_bytes: 40,
     * }];
     *
     * @generated from field: string last_name = 11;
     */
    lastName = "";
    /**
     * The email address of the user
     *
     * @generated from field: string email = 13;
     */
    email = "";
    /**
     * The phone number of the user
     *
     * @generated from field: string phone = 14;
     */
    phone = "";
    /**
     * The address of the user
     *
     * @generated from field: string address = 15;
     */
    address = "";
    /**
     * Optional UUID of the entity (if present, then corresponding entity user is also updated)
     *
     * @generated from field: string entity_uuid = 30;
     */
    entityUuid = "";
    /**
     * Optional UUID of the associated role (if present, then the corresponding entity user is updated with the given role UUID)
     *
     * @generated from field: string role_uuid = 31;
     */
    roleUuid = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UsersServiceUpdateRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 13, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 14, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 15, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 30, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 31, name: "role_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UsersServiceUpdateRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UsersServiceUpdateRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UsersServiceUpdateRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UsersServiceUpdateRequest, a, b);
    }
}
exports.UsersServiceUpdateRequest = UsersServiceUpdateRequest;
/**
 *
 * Describes the data structure to update a user's password
 *
 * @generated from message tcube.UsersServiceUpdatePasswordRequest
 */
class UsersServiceUpdatePasswordRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * The UUID of the user that needs to be updated
     *
     * @generated from field: string uuid = 2;
     */
    uuid = "";
    /**
     * The old login password
     *
     * @generated from field: string old_plain_text_password = 3;
     */
    oldPlainTextPassword = "";
    /**
     * The new password
     *
     * @generated from field: string plain_text_password = 4;
     */
    plainTextPassword = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UsersServiceUpdatePasswordRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 3, name: "old_plain_text_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 4, name: "plain_text_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UsersServiceUpdatePasswordRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UsersServiceUpdatePasswordRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UsersServiceUpdatePasswordRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UsersServiceUpdatePasswordRequest, a, b);
    }
}
exports.UsersServiceUpdatePasswordRequest = UsersServiceUpdatePasswordRequest;
/**
 *
 * Describes the data structure to reset a user's password
 *
 * @generated from message tcube.UsersServiceResetPasswordRequest
 */
class UsersServiceResetPasswordRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * Username of the user
     *
     * @generated from field: string username = 2;
     */
    username = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UsersServiceResetPasswordRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UsersServiceResetPasswordRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UsersServiceResetPasswordRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UsersServiceResetPasswordRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UsersServiceResetPasswordRequest, a, b);
    }
}
exports.UsersServiceResetPasswordRequest = UsersServiceResetPasswordRequest;
/**
 *
 * Describes the data structure to register a device against a user to send push notifications
 *
 * @generated from message tcube.UsersServiceRegisterUserDeviceRequest
 */
class UsersServiceRegisterUserDeviceRequest extends protobuf_1.Message {
    /**
     * Stores any comment that the user might add during this operation
     *
     * @generated from field: string user_comment = 1;
     */
    userComment = "";
    /**
     * The UUID of the user that needs to be updated
     *
     * @generated from field: string uuid = 2;
     */
    uuid = "";
    /**
     * The device type
     *
     * @generated from field: tcube.DEVICE_TYPE device_type = 10;
     */
    deviceType = base_pb_js_1.DEVICE_TYPE.WEB_UNSPECIFIED;
    /**
     * The ID of the device
     *
     * @generated from field: string device_id = 11;
     */
    deviceId = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UsersServiceRegisterUserDeviceRequest";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 10, name: "device_type", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.DEVICE_TYPE) },
        { no: 11, name: "device_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UsersServiceRegisterUserDeviceRequest().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UsersServiceRegisterUserDeviceRequest().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UsersServiceRegisterUserDeviceRequest().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UsersServiceRegisterUserDeviceRequest, a, b);
    }
}
exports.UsersServiceRegisterUserDeviceRequest = UsersServiceRegisterUserDeviceRequest;
/**
 *
 * Describes the data structure of each user on the platform
 *
 * @generated from message tcube.User
 */
class User extends protobuf_1.Message {
    /**
     * Stores the metadata of this resource
     *
     * @generated from field: tcube.Metadata metadata = 1;
     */
    metadata;
    /**
     * The first name of the user
     *
     * @generated from field: string first_name = 10;
     */
    firstName = "";
    /**
     * The last name of the user
     *
     * @generated from field: string last_name = 11;
     */
    lastName = "";
    /**
     * Username of the user
     *
     * @generated from field: string username = 12;
     */
    username = "";
    /**
     * The email address of the user
     *
     * @generated from field: string email = 13;
     */
    email = "";
    /**
     * The phone number of the user
     *
     * @generated from field: string phone = 14;
     */
    phone = "";
    /**
     * The address of the user
     *
     * @generated from field: string address = 15;
     */
    address = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.User";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "metadata", kind: "message", T: base_pb_js_1.Metadata },
        { no: 10, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 11, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 12, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 13, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 14, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 15, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new User().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new User().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new User().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(User, a, b);
    }
}
exports.User = User;
/**
 *
 * Describes the data structure that stores a list of users
 *
 * @generated from message tcube.UsersList
 */
class UsersList extends protobuf_1.Message {
    /**
     * List of users
     *
     * @generated from field: repeated tcube.User list = 1;
     */
    list = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UsersList";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "list", kind: "message", T: User, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new UsersList().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UsersList().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UsersList().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UsersList, a, b);
    }
}
exports.UsersList = UsersList;
/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.UsersServicePaginationReq
 */
class UsersServicePaginationReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.USER_SORT_KEY sort_key = 5;
     */
    sortKey = USER_SORT_KEY.USER_SORT_KEY_ID_UNSPECIFIED;
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UsersServicePaginationReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(USER_SORT_KEY) },
    ]);
    static fromBinary(bytes, options) {
        return new UsersServicePaginationReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UsersServicePaginationReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UsersServicePaginationReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UsersServicePaginationReq, a, b);
    }
}
exports.UsersServicePaginationReq = UsersServicePaginationReq;
/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.UserPaginationResp
 */
class UserPaginationResp extends protobuf_1.Message {
    /**
     * The number of records in this payload
     *
     * @generated from field: int64 count = 1;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The total number of records that are available
     *
     * @generated from field: int64 total = 2;
     */
    total = protobuf_1.protoInt64.zero;
    /**
     * The list of records
     *
     * @generated from field: repeated tcube.User payload = 3;
     */
    payload = [];
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UserPaginationResp";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "payload", kind: "message", T: User, repeated: true },
    ]);
    static fromBinary(bytes, options) {
        return new UserPaginationResp().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UserPaginationResp().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UserPaginationResp().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UserPaginationResp, a, b);
    }
}
exports.UserPaginationResp = UserPaginationResp;
/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.UsersServiceFilterReq
 */
class UsersServiceFilterReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.USER_SORT_KEY sort_key = 5;
     */
    sortKey = USER_SORT_KEY.USER_SORT_KEY_ID_UNSPECIFIED;
    /**
     * The minimum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_start = 6;
     */
    creationTimestampStart = protobuf_1.protoInt64.zero;
    /**
     * The maximum timestamp that needs to be considered to filter by creation
     *
     * @generated from field: int64 creation_timestamp_end = 7;
     */
    creationTimestampEnd = protobuf_1.protoInt64.zero;
    /**
     * The first name of the user
     *
     * @generated from field: string first_name = 20;
     */
    firstName = "";
    /**
     * The last name of the user
     *
     * @generated from field: string last_name = 21;
     */
    lastName = "";
    /**
     * Username of the user
     *
     * @generated from field: string username = 22;
     */
    username = "";
    /**
     * The email address of the user
     *
     * @generated from field: string email = 23;
     */
    email = "";
    /**
     * The phone number of the user
     *
     * @generated from field: string phone = 24;
     */
    phone = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UsersServiceFilterReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(USER_SORT_KEY) },
        { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 20, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 21, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 22, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 23, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
        { no: 24, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UsersServiceFilterReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UsersServiceFilterReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UsersServiceFilterReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UsersServiceFilterReq, a, b);
    }
}
exports.UsersServiceFilterReq = UsersServiceFilterReq;
/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.UsersServiceSearchAllReq
 */
class UsersServiceSearchAllReq extends protobuf_1.Message {
    /**
     * If true, then returns only active records. If false, then returns only inactive records
     *
     * @generated from field: bool is_active = 1;
     */
    isActive = false;
    /**
     * The number of records that need to be sent in the response. Returns all records if it is set to -1
     *
     * @generated from field: int64 count = 2;
     */
    count = protobuf_1.protoInt64.zero;
    /**
     * The number that need to be offset by before fetching the records
     *
     * @generated from field: int64 offset = 3;
     */
    offset = protobuf_1.protoInt64.zero;
    /**
     * The sort order that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.SORT_ORDER sort_order = 4;
     */
    sortOrder = base_pb_js_1.SORT_ORDER.ASCENDING_UNSPECIFIED;
    /**
     * The sort key that is to be used to fetch the pagination response
     *
     * @generated from field: tcube.USER_SORT_KEY sort_key = 5;
     */
    sortKey = USER_SORT_KEY.USER_SORT_KEY_ID_UNSPECIFIED;
    /**
     * Describes the key with which the search operation needs to be performed
     *
     * @generated from field: string search_key = 11;
     */
    searchKey = "";
    constructor(data) {
        super();
        protobuf_1.proto3.util.initPartial(data, this);
    }
    static runtime = protobuf_1.proto3;
    static typeName = "tcube.UsersServiceSearchAllReq";
    static fields = protobuf_1.proto3.util.newFieldList(() => [
        { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
        { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
        { no: 4, name: "sort_order", kind: "enum", T: protobuf_1.proto3.getEnumType(base_pb_js_1.SORT_ORDER) },
        { no: 5, name: "sort_key", kind: "enum", T: protobuf_1.proto3.getEnumType(USER_SORT_KEY) },
        { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    ]);
    static fromBinary(bytes, options) {
        return new UsersServiceSearchAllReq().fromBinary(bytes, options);
    }
    static fromJson(jsonValue, options) {
        return new UsersServiceSearchAllReq().fromJson(jsonValue, options);
    }
    static fromJsonString(jsonString, options) {
        return new UsersServiceSearchAllReq().fromJsonString(jsonString, options);
    }
    static equals(a, b) {
        return protobuf_1.proto3.util.equals(UsersServiceSearchAllReq, a, b);
    }
}
exports.UsersServiceSearchAllReq = UsersServiceSearchAllReq;
