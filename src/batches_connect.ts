// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file batches.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Batch, BatchesList, BatchesServiceCommissioningRequest, BatchesServiceCreateRequest, BatchesServiceFilterReq, BatchesServicePaginationReq, BatchesServiceSearchAllReq, BatchIdentifierWithSerialState, BatchPaginationResp } from "./batches_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { ActiveInEntityRequest, CountInEntityRequest, CountResponse, FileResponse, Identifier, IdentifierWithUserComment, SearchKeyRequest } from "./base_pb.js";

/**
 *
 * Describes the methods applicable on each batch
 *
 * @generated from service tcube.BatchesService
 */
export const BatchesService = {
  typeName: "tcube.BatchesService",
  methods: {
    /**
     * Create a batch
     *
     * // Update a batch
     * rpc Update (BatchesServiceUpdateRequest) returns (Batch);
     *
     * @generated from rpc tcube.BatchesService.Create
     */
    create: {
      name: "Create",
      I: BatchesServiceCreateRequest,
      O: Batch,
      kind: MethodKind.Unary,
    },
    /**
     * Archive the batch
     *
     * @generated from rpc tcube.BatchesService.Archive
     */
    archive: {
      name: "Archive",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore the batch
     *
     * @generated from rpc tcube.BatchesService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Recall the batch
     *
     * @generated from rpc tcube.BatchesService.Recall
     */
    recall: {
      name: "Recall",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Commission unused serials
     *
     * @generated from rpc tcube.BatchesService.CommissionUnused
     */
    commissionUnused: {
      name: "CommissionUnused",
      I: BatchesServiceCommissioningRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Decommission unused serials
     *
     * @generated from rpc tcube.BatchesService.DecommissionUnused
     */
    decommissionUnused: {
      name: "DecommissionUnused",
      I: BatchesServiceCommissioningRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc tcube.BatchesService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: Identifier,
      O: Batch,
      kind: MethodKind.Unary,
    },
    /**
     * View by Code
     *
     * @generated from rpc tcube.BatchesService.ViewByCode
     */
    viewByCode: {
      name: "ViewByCode",
      I: SearchKeyRequest,
      O: Batch,
      kind: MethodKind.Unary,
    },
    /**
     * View all batches
     *
     * @generated from rpc tcube.BatchesService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveInEntityRequest,
      O: BatchesList,
      kind: MethodKind.Unary,
    },
    /**
     * View batches with pagination
     *
     * @generated from rpc tcube.BatchesService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: BatchesServicePaginationReq,
      O: BatchPaginationResp,
      kind: MethodKind.Unary,
    },
    /**
     * Download all the serials (in the given state) within the batch as a PDF
     *
     * @generated from rpc tcube.BatchesService.DownloadSerialsAsPDF
     */
    downloadSerialsAsPDF: {
      name: "DownloadSerialsAsPDF",
      I: BatchIdentifierWithSerialState,
      O: FileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Download all the serials (in the given state) within the batch as a CSV file
     *
     * @generated from rpc tcube.BatchesService.DownloadSerialsAsCSV
     */
    downloadSerialsAsCSV: {
      name: "DownloadSerialsAsCSV",
      I: BatchIdentifierWithSerialState,
      O: FileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Download all the serials (in the given state) within the batch as a single image
     *
     * @generated from rpc tcube.BatchesService.DownloadSerialsAsImage
     */
    downloadSerialsAsImage: {
      name: "DownloadSerialsAsImage",
      I: BatchIdentifierWithSerialState,
      O: FileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc tcube.BatchesService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: BatchesServiceSearchAllReq,
      O: BatchesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc tcube.BatchesService.Filter
     */
    filter: {
      name: "Filter",
      I: BatchesServiceFilterReq,
      O: BatchesList,
      kind: MethodKind.Unary,
    },
    /**
     * Count
     *
     * @generated from rpc tcube.BatchesService.Count
     */
    count: {
      name: "Count",
      I: CountInEntityRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

