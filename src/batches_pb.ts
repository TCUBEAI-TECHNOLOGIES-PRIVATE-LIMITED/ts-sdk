// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file batches.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";
import { SERIAL_STATE } from "./serials_pb.js";

/**
 *
 * Describes the available sort keys for retrieving batches
 *
 * @generated from enum tcube.BATCH_SORT_KEY
 */
export enum BATCH_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: BATCH_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  BATCH_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: BATCH_SORT_KEY_CREATED_AT = 1;
   */
  BATCH_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: BATCH_SORT_KEY_MODIFIED_AT = 2;
   */
  BATCH_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: BATCH_SORT_KEY_NAME = 10;
   */
  BATCH_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: BATCH_SORT_KEY_CODE = 11;
   */
  BATCH_SORT_KEY_CODE = 11,

  /**
   * Fetch ordered results by the internal batch code
   *
   * @generated from enum value: BATCH_SORT_KEY_INTERNAL_CODE = 12;
   */
  BATCH_SORT_KEY_INTERNAL_CODE = 12,
}
// Retrieve enum metadata with: proto3.getEnumType(BATCH_SORT_KEY)
proto3.util.setEnumType(BATCH_SORT_KEY, "tcube.BATCH_SORT_KEY", [
  { no: 0, name: "BATCH_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "BATCH_SORT_KEY_CREATED_AT" },
  { no: 2, name: "BATCH_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "BATCH_SORT_KEY_NAME" },
  { no: 11, name: "BATCH_SORT_KEY_CODE" },
  { no: 12, name: "BATCH_SORT_KEY_INTERNAL_CODE" },
]);

/**
 *
 * Describes the necessary data structure during creation of a batch
 *
 * @generated from message tcube.BatchesServiceCreateRequest
 */
export class BatchesServiceCreateRequest extends Message<BatchesServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 8;
   */
  locationUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 9;
   */
  productUuid = "";

  /**
   * The name of the batch
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * // Code of the batch
   * string code = 11 [(validate.rules).string.min_len = 1];
   * The number of serials that need to be created
   *
   * @generated from field: int64 quantity = 12;
   */
  quantity = protoInt64.zero;

  /**
   * Internal code as entered by the entity
   *
   * @generated from field: string internal_code = 13;
   */
  internalCode = "";

  constructor(data?: PartialMessage<BatchesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.BatchesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "internal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchesServiceCreateRequest {
    return new BatchesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchesServiceCreateRequest {
    return new BatchesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchesServiceCreateRequest {
    return new BatchesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchesServiceCreateRequest | PlainMessage<BatchesServiceCreateRequest> | undefined, b: BatchesServiceCreateRequest | PlainMessage<BatchesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(BatchesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each batch on the platform
 *
 * @generated from message tcube.Batch
 */
export class Batch extends Message<Batch> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: tcube.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 8;
   */
  locationUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 9;
   */
  productUuid = "";

  /**
   * The name of the batch
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the batch
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The number of serials that have been created
   *
   * @generated from field: int64 quantity = 12;
   */
  quantity = protoInt64.zero;

  /**
   * Internal code as entered by the entity
   *
   * @generated from field: string internal_code = 13;
   */
  internalCode = "";

  constructor(data?: PartialMessage<Batch>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.Batch";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "internal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Batch {
    return new Batch().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Batch {
    return new Batch().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Batch {
    return new Batch().fromJsonString(jsonString, options);
  }

  static equals(a: Batch | PlainMessage<Batch> | undefined, b: Batch | PlainMessage<Batch> | undefined): boolean {
    return proto3.util.equals(Batch, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of batches
 *
 * @generated from message tcube.BatchesList
 */
export class BatchesList extends Message<BatchesList> {
  /**
   * List of batches
   *
   * @generated from field: repeated tcube.Batch list = 1;
   */
  list: Batch[] = [];

  constructor(data?: PartialMessage<BatchesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.BatchesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Batch, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchesList {
    return new BatchesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchesList {
    return new BatchesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchesList {
    return new BatchesList().fromJsonString(jsonString, options);
  }

  static equals(a: BatchesList | PlainMessage<BatchesList> | undefined, b: BatchesList | PlainMessage<BatchesList> | undefined): boolean {
    return proto3.util.equals(BatchesList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.BatchesServicePaginationReq
 */
export class BatchesServicePaginationReq extends Message<BatchesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.BATCH_SORT_KEY sort_key = 5;
   */
  sortKey = BATCH_SORT_KEY.BATCH_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<BatchesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.BatchesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(BATCH_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchesServicePaginationReq {
    return new BatchesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchesServicePaginationReq {
    return new BatchesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchesServicePaginationReq {
    return new BatchesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: BatchesServicePaginationReq | PlainMessage<BatchesServicePaginationReq> | undefined, b: BatchesServicePaginationReq | PlainMessage<BatchesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(BatchesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.BatchPaginationResp
 */
export class BatchPaginationResp extends Message<BatchPaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated tcube.Batch payload = 3;
   */
  payload: Batch[] = [];

  constructor(data?: PartialMessage<BatchPaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.BatchPaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Batch, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchPaginationResp {
    return new BatchPaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchPaginationResp {
    return new BatchPaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchPaginationResp {
    return new BatchPaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: BatchPaginationResp | PlainMessage<BatchPaginationResp> | undefined, b: BatchPaginationResp | PlainMessage<BatchPaginationResp> | undefined): boolean {
    return proto3.util.equals(BatchPaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.BatchesServiceFilterReq
 */
export class BatchesServiceFilterReq extends Message<BatchesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.BATCH_SORT_KEY sort_key = 5;
   */
  sortKey = BATCH_SORT_KEY.BATCH_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * The name of the batch
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * Code of the batch
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * Internal code as entered by the entity
   *
   * @generated from field: string internal_code = 22;
   */
  internalCode = "";

  constructor(data?: PartialMessage<BatchesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.BatchesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(BATCH_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "internal_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchesServiceFilterReq {
    return new BatchesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchesServiceFilterReq {
    return new BatchesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchesServiceFilterReq {
    return new BatchesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: BatchesServiceFilterReq | PlainMessage<BatchesServiceFilterReq> | undefined, b: BatchesServiceFilterReq | PlainMessage<BatchesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(BatchesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.BatchesServiceSearchAllReq
 */
export class BatchesServiceSearchAllReq extends Message<BatchesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.BATCH_SORT_KEY sort_key = 5;
   */
  sortKey = BATCH_SORT_KEY.BATCH_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<BatchesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.BatchesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(BATCH_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchesServiceSearchAllReq {
    return new BatchesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchesServiceSearchAllReq {
    return new BatchesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchesServiceSearchAllReq {
    return new BatchesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: BatchesServiceSearchAllReq | PlainMessage<BatchesServiceSearchAllReq> | undefined, b: BatchesServiceSearchAllReq | PlainMessage<BatchesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(BatchesServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the payload that is used to decommission serials within a batch
 *
 * @generated from message tcube.BatchesServiceCommissioningRequest
 */
export class BatchesServiceCommissioningRequest extends Message<BatchesServiceCommissioningRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the batch that needs to be decommissioned
   *
   * @generated from field: string batch_uuid = 10;
   */
  batchUuid = "";

  /**
   * UUID of the zone (this will be autoselected at the API, but keeping it here for future extension)
   *
   * @generated from field: string zone_uuid = 12;
   */
  zoneUuid = "";

  /**
   * The latitude of the location where this activity was registered
   *
   * @generated from field: double latitude = 13;
   */
  latitude = 0;

  /**
   * The longitude of the location where this activity was registered
   *
   * @generated from field: double longitude = 14;
   */
  longitude = 0;

  constructor(data?: PartialMessage<BatchesServiceCommissioningRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.BatchesServiceCommissioningRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchesServiceCommissioningRequest {
    return new BatchesServiceCommissioningRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchesServiceCommissioningRequest {
    return new BatchesServiceCommissioningRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchesServiceCommissioningRequest {
    return new BatchesServiceCommissioningRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchesServiceCommissioningRequest | PlainMessage<BatchesServiceCommissioningRequest> | undefined, b: BatchesServiceCommissioningRequest | PlainMessage<BatchesServiceCommissioningRequest> | undefined): boolean {
    return proto3.util.equals(BatchesServiceCommissioningRequest, a, b);
  }
}

/**
 *
 * Describes the request payload that consists of the batch identifier along with the state of the serials
 *
 * @generated from message tcube.BatchIdentifierWithSerialState
 */
export class BatchIdentifierWithSerialState extends Message<BatchIdentifierWithSerialState> {
  /**
   * UUID of the batch
   *
   * @generated from field: string batch_uuid = 1;
   */
  batchUuid = "";

  /**
   * State of the serials
   *
   * @generated from field: tcube.SERIAL_STATE serial_state = 2;
   */
  serialState = SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<BatchIdentifierWithSerialState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.BatchIdentifierWithSerialState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "serial_state", kind: "enum", T: proto3.getEnumType(SERIAL_STATE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchIdentifierWithSerialState {
    return new BatchIdentifierWithSerialState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchIdentifierWithSerialState {
    return new BatchIdentifierWithSerialState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchIdentifierWithSerialState {
    return new BatchIdentifierWithSerialState().fromJsonString(jsonString, options);
  }

  static equals(a: BatchIdentifierWithSerialState | PlainMessage<BatchIdentifierWithSerialState> | undefined, b: BatchIdentifierWithSerialState | PlainMessage<BatchIdentifierWithSerialState> | undefined): boolean {
    return proto3.util.equals(BatchIdentifierWithSerialState, a, b);
  }
}

