// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file customers.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";

/**
 *
 * Describes the available sort keys for retrieving customers
 *
 * @generated from enum tcube.CUSTOMER_SORT_KEY
 */
export enum CUSTOMER_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: CUSTOMER_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  CUSTOMER_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: CUSTOMER_SORT_KEY_CREATED_AT = 1;
   */
  CUSTOMER_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: CUSTOMER_SORT_KEY_MODIFIED_AT = 2;
   */
  CUSTOMER_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: CUSTOMER_SORT_KEY_NAME = 10;
   */
  CUSTOMER_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: CUSTOMER_SORT_KEY_CODE = 11;
   */
  CUSTOMER_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(CUSTOMER_SORT_KEY)
proto3.util.setEnumType(CUSTOMER_SORT_KEY, "tcube.CUSTOMER_SORT_KEY", [
  { no: 0, name: "CUSTOMER_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "CUSTOMER_SORT_KEY_CREATED_AT" },
  { no: 2, name: "CUSTOMER_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "CUSTOMER_SORT_KEY_NAME" },
  { no: 11, name: "CUSTOMER_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the necessary data structure during creation of a customer
 *
 * @generated from message tcube.CustomersServiceCreateRequest
 */
export class CustomersServiceCreateRequest extends Message<CustomersServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * The name of the customer
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Description of the customer
   *
   * @generated from field: string description = 12;
   */
  description = "";

  constructor(data?: PartialMessage<CustomersServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.CustomersServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersServiceCreateRequest {
    return new CustomersServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersServiceCreateRequest {
    return new CustomersServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersServiceCreateRequest {
    return new CustomersServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersServiceCreateRequest | PlainMessage<CustomersServiceCreateRequest> | undefined, b: CustomersServiceCreateRequest | PlainMessage<CustomersServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(CustomersServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a customer
 *
 * @generated from message tcube.CustomersServiceUpdateRequest
 */
export class CustomersServiceUpdateRequest extends Message<CustomersServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * The name of the customer
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Description of the customer
   *
   * @generated from field: string description = 12;
   */
  description = "";

  constructor(data?: PartialMessage<CustomersServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.CustomersServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersServiceUpdateRequest {
    return new CustomersServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersServiceUpdateRequest {
    return new CustomersServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersServiceUpdateRequest {
    return new CustomersServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersServiceUpdateRequest | PlainMessage<CustomersServiceUpdateRequest> | undefined, b: CustomersServiceUpdateRequest | PlainMessage<CustomersServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(CustomersServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each customer on the platform
 *
 * @generated from message tcube.Customer
 */
export class Customer extends Message<Customer> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: tcube.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * The name of the customer
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the customer
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Description of the customer
   *
   * @generated from field: string description = 12;
   */
  description = "";

  constructor(data?: PartialMessage<Customer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.Customer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Customer {
    return new Customer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Customer {
    return new Customer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Customer {
    return new Customer().fromJsonString(jsonString, options);
  }

  static equals(a: Customer | PlainMessage<Customer> | undefined, b: Customer | PlainMessage<Customer> | undefined): boolean {
    return proto3.util.equals(Customer, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of customers
 *
 * @generated from message tcube.CustomersList
 */
export class CustomersList extends Message<CustomersList> {
  /**
   * List of customers
   *
   * @generated from field: repeated tcube.Customer list = 1;
   */
  list: Customer[] = [];

  constructor(data?: PartialMessage<CustomersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.CustomersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Customer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersList {
    return new CustomersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersList {
    return new CustomersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersList {
    return new CustomersList().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersList | PlainMessage<CustomersList> | undefined, b: CustomersList | PlainMessage<CustomersList> | undefined): boolean {
    return proto3.util.equals(CustomersList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.CustomersServicePaginationReq
 */
export class CustomersServicePaginationReq extends Message<CustomersServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.CUSTOMER_SORT_KEY sort_key = 5;
   */
  sortKey = CUSTOMER_SORT_KEY.CUSTOMER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<CustomersServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.CustomersServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CUSTOMER_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersServicePaginationReq {
    return new CustomersServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersServicePaginationReq {
    return new CustomersServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersServicePaginationReq {
    return new CustomersServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersServicePaginationReq | PlainMessage<CustomersServicePaginationReq> | undefined, b: CustomersServicePaginationReq | PlainMessage<CustomersServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(CustomersServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.CustomerPaginationResp
 */
export class CustomerPaginationResp extends Message<CustomerPaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated tcube.Customer payload = 3;
   */
  payload: Customer[] = [];

  constructor(data?: PartialMessage<CustomerPaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.CustomerPaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Customer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomerPaginationResp {
    return new CustomerPaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomerPaginationResp {
    return new CustomerPaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomerPaginationResp {
    return new CustomerPaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: CustomerPaginationResp | PlainMessage<CustomerPaginationResp> | undefined, b: CustomerPaginationResp | PlainMessage<CustomerPaginationResp> | undefined): boolean {
    return proto3.util.equals(CustomerPaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.CustomersServiceFilterReq
 */
export class CustomersServiceFilterReq extends Message<CustomersServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.CUSTOMER_SORT_KEY sort_key = 5;
   */
  sortKey = CUSTOMER_SORT_KEY.CUSTOMER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The name of the customer
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * Code of the customer
   *
   * @generated from field: string code = 21;
   */
  code = "";

  constructor(data?: PartialMessage<CustomersServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.CustomersServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CUSTOMER_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersServiceFilterReq {
    return new CustomersServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersServiceFilterReq {
    return new CustomersServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersServiceFilterReq {
    return new CustomersServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersServiceFilterReq | PlainMessage<CustomersServiceFilterReq> | undefined, b: CustomersServiceFilterReq | PlainMessage<CustomersServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(CustomersServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.CustomersServiceSearchAllReq
 */
export class CustomersServiceSearchAllReq extends Message<CustomersServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.CUSTOMER_SORT_KEY sort_key = 5;
   */
  sortKey = CUSTOMER_SORT_KEY.CUSTOMER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<CustomersServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.CustomersServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(CUSTOMER_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomersServiceSearchAllReq {
    return new CustomersServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomersServiceSearchAllReq {
    return new CustomersServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomersServiceSearchAllReq {
    return new CustomersServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: CustomersServiceSearchAllReq | PlainMessage<CustomersServiceSearchAllReq> | undefined, b: CustomersServiceSearchAllReq | PlainMessage<CustomersServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(CustomersServiceSearchAllReq, a, b);
  }
}

