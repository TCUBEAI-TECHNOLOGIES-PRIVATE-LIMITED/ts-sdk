// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file entities.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";

/**
 *
 * Describes the available sort keys for retrieving entities
 *
 * @generated from enum tcube.ENTITY_SORT_KEY
 */
export enum ENTITY_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: ENTITY_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  ENTITY_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: ENTITY_SORT_KEY_CREATED_AT = 1;
   */
  ENTITY_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: ENTITY_SORT_KEY_MODIFIED_AT = 2;
   */
  ENTITY_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: ENTITY_SORT_KEY_NAME = 10;
   */
  ENTITY_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: ENTITY_SORT_KEY_CODE = 11;
   */
  ENTITY_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(ENTITY_SORT_KEY)
proto3.util.setEnumType(ENTITY_SORT_KEY, "tcube.ENTITY_SORT_KEY", [
  { no: 0, name: "ENTITY_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "ENTITY_SORT_KEY_CREATED_AT" },
  { no: 2, name: "ENTITY_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "ENTITY_SORT_KEY_NAME" },
  { no: 11, name: "ENTITY_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the necessary data structure during creation of a entity
 *
 * @generated from message tcube.EntitiesServiceCreateRequest
 */
export class EntitiesServiceCreateRequest extends Message<EntitiesServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The name of the entity
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The global identifier of the entity
   *
   * @generated from field: string global_identifier = 11;
   */
  globalIdentifier = "";

  /**
   * Description of the entity
   *
   * @generated from field: string description = 14;
   */
  description = "";

  /**
   * The email address of the entity
   *
   * @generated from field: string email = 15;
   */
  email = "";

  /**
   * The phone number of the entity
   *
   * @generated from field: string phone = 16;
   */
  phone = "";

  /**
   * The address of the entity
   *
   * @generated from field: string address = 17;
   */
  address = "";

  /**
   * The city in which the entity is based out of
   *
   * @generated from field: string city = 18;
   */
  city = "";

  /**
   * The state in which the entity is based out of
   *
   * @generated from field: string state = 19;
   */
  state = "";

  /**
   * The zipcode of the location in which the entity is based out of
   *
   * @generated from field: string zip_code = 20;
   */
  zipCode = "";

  /**
   * An optional custom domain name, which will be used to display info about serials, packagings and shippings
   *
   * @generated from field: string domain = 21;
   */
  domain = "";

  /**
   * The first name of the entity administrator
   *
   * @generated from field: string first_name = 30;
   */
  firstName = "";

  /**
   * The last name of the entity administrator
   *
   * // The password with which the user can login for the first time
   * string plain_text_password = 32 [(validate.rules).string = {
   *     pattern:   "^[0-9A-Za-z_@\\-]+$", // No spaces
   *     max_bytes: 100,
   * }];
   *
   * @generated from field: string last_name = 31;
   */
  lastName = "";

  /**
   * The UUID of the role of the user that is creating this entity
   *
   * @generated from field: string role_uuid = 40;
   */
  roleUuid = "";

  constructor(data?: PartialMessage<EntitiesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.EntitiesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "global_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "first_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 31, name: "last_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 40, name: "role_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntitiesServiceCreateRequest {
    return new EntitiesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntitiesServiceCreateRequest {
    return new EntitiesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntitiesServiceCreateRequest {
    return new EntitiesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EntitiesServiceCreateRequest | PlainMessage<EntitiesServiceCreateRequest> | undefined, b: EntitiesServiceCreateRequest | PlainMessage<EntitiesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(EntitiesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a entity
 *
 * @generated from message tcube.EntitiesServiceUpdateRequest
 */
export class EntitiesServiceUpdateRequest extends Message<EntitiesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * The name of the entity
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The global identifier of the entity
   *
   * @generated from field: string global_identifier = 11;
   */
  globalIdentifier = "";

  /**
   * Description of the entity
   *
   * @generated from field: string description = 14;
   */
  description = "";

  /**
   * The email address of the entity
   *
   * @generated from field: string email = 15;
   */
  email = "";

  /**
   * The phone number of the entity
   *
   * @generated from field: string phone = 16;
   */
  phone = "";

  /**
   * The address of the entity
   *
   * @generated from field: string address = 17;
   */
  address = "";

  /**
   * The city in which the entity is based out of
   *
   * @generated from field: string city = 18;
   */
  city = "";

  /**
   * The state in which the entity is based out of
   *
   * @generated from field: string state = 19;
   */
  state = "";

  /**
   * The zipcode of the location in which the entity is based out of
   *
   * @generated from field: string zip_code = 20;
   */
  zipCode = "";

  /**
   * An optional custom domain name, which will be used to display info about serials, packagings and shippings
   *
   * @generated from field: string domain = 21;
   */
  domain = "";

  constructor(data?: PartialMessage<EntitiesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.EntitiesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "global_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntitiesServiceUpdateRequest {
    return new EntitiesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntitiesServiceUpdateRequest {
    return new EntitiesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntitiesServiceUpdateRequest {
    return new EntitiesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EntitiesServiceUpdateRequest | PlainMessage<EntitiesServiceUpdateRequest> | undefined, b: EntitiesServiceUpdateRequest | PlainMessage<EntitiesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(EntitiesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each entity on the platform
 *
 * @generated from message tcube.Entity
 */
export class Entity extends Message<Entity> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: tcube.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * The name of the entity
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * The global identifier of the entity
   *
   * @generated from field: string global_identifier = 11;
   */
  globalIdentifier = "";

  /**
   * Description of the entity
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * Code of the entity
   *
   * @generated from field: string code = 13;
   */
  code = "";

  /**
   * The email address of the entity
   *
   * @generated from field: string email = 14;
   */
  email = "";

  /**
   * The phone number of the entity
   *
   * @generated from field: string phone = 15;
   */
  phone = "";

  /**
   * The address of the entity
   *
   * @generated from field: string address = 16;
   */
  address = "";

  /**
   * The city in which the entity is based out of
   *
   * @generated from field: string city = 17;
   */
  city = "";

  /**
   * The state in which the entity is based out of
   *
   * @generated from field: string state = 18;
   */
  state = "";

  /**
   * The zipcode of the location in which the entity is based out of
   *
   * @generated from field: string zip_code = 19;
   */
  zipCode = "";

  /**
   * Stores if the entity has been verified
   *
   * @generated from field: bool is_verified = 20;
   */
  isVerified = false;

  /**
   * An optional custom domain name, which will be used to display info about serials, packagings and shippings
   *
   * @generated from field: string domain = 21;
   */
  domain = "";

  constructor(data?: PartialMessage<Entity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.Entity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "global_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 18, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "is_verified", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 21, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Entity {
    return new Entity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Entity {
    return new Entity().fromJsonString(jsonString, options);
  }

  static equals(a: Entity | PlainMessage<Entity> | undefined, b: Entity | PlainMessage<Entity> | undefined): boolean {
    return proto3.util.equals(Entity, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of entities
 *
 * @generated from message tcube.EntitiesList
 */
export class EntitiesList extends Message<EntitiesList> {
  /**
   * List of entities
   *
   * @generated from field: repeated tcube.Entity list = 1;
   */
  list: Entity[] = [];

  constructor(data?: PartialMessage<EntitiesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.EntitiesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Entity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntitiesList {
    return new EntitiesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntitiesList {
    return new EntitiesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntitiesList {
    return new EntitiesList().fromJsonString(jsonString, options);
  }

  static equals(a: EntitiesList | PlainMessage<EntitiesList> | undefined, b: EntitiesList | PlainMessage<EntitiesList> | undefined): boolean {
    return proto3.util.equals(EntitiesList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.EntitiesServicePaginationReq
 */
export class EntitiesServicePaginationReq extends Message<EntitiesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.ENTITY_SORT_KEY sort_key = 5;
   */
  sortKey = ENTITY_SORT_KEY.ENTITY_SORT_KEY_ID_UNSPECIFIED;

  constructor(data?: PartialMessage<EntitiesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.EntitiesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ENTITY_SORT_KEY) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntitiesServicePaginationReq {
    return new EntitiesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntitiesServicePaginationReq {
    return new EntitiesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntitiesServicePaginationReq {
    return new EntitiesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: EntitiesServicePaginationReq | PlainMessage<EntitiesServicePaginationReq> | undefined, b: EntitiesServicePaginationReq | PlainMessage<EntitiesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(EntitiesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.EntityPaginationResp
 */
export class EntityPaginationResp extends Message<EntityPaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated tcube.Entity payload = 3;
   */
  payload: Entity[] = [];

  constructor(data?: PartialMessage<EntityPaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.EntityPaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Entity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntityPaginationResp {
    return new EntityPaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntityPaginationResp {
    return new EntityPaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntityPaginationResp {
    return new EntityPaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: EntityPaginationResp | PlainMessage<EntityPaginationResp> | undefined, b: EntityPaginationResp | PlainMessage<EntityPaginationResp> | undefined): boolean {
    return proto3.util.equals(EntityPaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.EntitiesServiceFilterReq
 */
export class EntitiesServiceFilterReq extends Message<EntitiesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.ENTITY_SORT_KEY sort_key = 5;
   */
  sortKey = ENTITY_SORT_KEY.ENTITY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The name of the entity
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * Code of the entity
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The email address of the entity
   *
   * @generated from field: string email = 23;
   */
  email = "";

  /**
   * The phone number of the entity
   *
   * @generated from field: string phone = 24;
   */
  phone = "";

  /**
   * The city in which the entity is based out of
   *
   * @generated from field: string city = 26;
   */
  city = "";

  /**
   * The state in which the entity is based out of
   *
   * @generated from field: string state = 27;
   */
  state = "";

  /**
   * The zipcode of the location in which the entity is based out of
   *
   * @generated from field: string zip_code = 28;
   */
  zipCode = "";

  constructor(data?: PartialMessage<EntitiesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.EntitiesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ENTITY_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 23, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 24, name: "phone", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 26, name: "city", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 27, name: "state", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 28, name: "zip_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntitiesServiceFilterReq {
    return new EntitiesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntitiesServiceFilterReq {
    return new EntitiesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntitiesServiceFilterReq {
    return new EntitiesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: EntitiesServiceFilterReq | PlainMessage<EntitiesServiceFilterReq> | undefined, b: EntitiesServiceFilterReq | PlainMessage<EntitiesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(EntitiesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.EntitiesServiceSearchAllReq
 */
export class EntitiesServiceSearchAllReq extends Message<EntitiesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.ENTITY_SORT_KEY sort_key = 5;
   */
  sortKey = ENTITY_SORT_KEY.ENTITY_SORT_KEY_ID_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<EntitiesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.EntitiesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ENTITY_SORT_KEY) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntitiesServiceSearchAllReq {
    return new EntitiesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntitiesServiceSearchAllReq {
    return new EntitiesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntitiesServiceSearchAllReq {
    return new EntitiesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: EntitiesServiceSearchAllReq | PlainMessage<EntitiesServiceSearchAllReq> | undefined, b: EntitiesServiceSearchAllReq | PlainMessage<EntitiesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(EntitiesServiceSearchAllReq, a, b);
  }
}

