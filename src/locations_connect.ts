// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file locations.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Location, LocationPaginationResp, LocationsList, LocationsServiceCreateRequest, LocationsServiceFilterReq, LocationsServicePaginationReq, LocationsServiceSearchAllReq, LocationsServiceUpdateRequest } from "./locations_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { ActiveInEntityRequest, CountInEntityRequest, CountResponse, Identifier, IdentifierWithUserComment, ImageAssignRequest, ImageResponse } from "./base_pb.js";

/**
 *
 * Describes the methods applicable on each location
 *
 * @generated from service tcube.LocationsService
 */
export const LocationsService = {
  typeName: "tcube.LocationsService",
  methods: {
    /**
     * Create a location
     *
     * @generated from rpc tcube.LocationsService.Create
     */
    create: {
      name: "Create",
      I: LocationsServiceCreateRequest,
      O: Location,
      kind: MethodKind.Unary,
    },
    /**
     * Update a location
     *
     * @generated from rpc tcube.LocationsService.Update
     */
    update: {
      name: "Update",
      I: LocationsServiceUpdateRequest,
      O: Location,
      kind: MethodKind.Unary,
    },
    /**
     * Archive the location
     *
     * @generated from rpc tcube.LocationsService.Archive
     */
    archive: {
      name: "Archive",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore the location
     *
     * @generated from rpc tcube.LocationsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Assign image
     *
     * @generated from rpc tcube.LocationsService.AssignImage
     */
    assignImage: {
      name: "AssignImage",
      I: ImageAssignRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View assigned image
     *
     * @generated from rpc tcube.LocationsService.ViewImage
     */
    viewImage: {
      name: "ViewImage",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc tcube.LocationsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: Identifier,
      O: Location,
      kind: MethodKind.Unary,
    },
    /**
     * View all locations
     *
     * @generated from rpc tcube.LocationsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveInEntityRequest,
      O: LocationsList,
      kind: MethodKind.Unary,
    },
    /**
     * View locations with pagination
     *
     * @generated from rpc tcube.LocationsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: LocationsServicePaginationReq,
      O: LocationPaginationResp,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc tcube.LocationsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: LocationsServiceSearchAllReq,
      O: LocationsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc tcube.LocationsService.Filter
     */
    filter: {
      name: "Filter",
      I: LocationsServiceFilterReq,
      O: LocationsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count
     *
     * @generated from rpc tcube.LocationsService.Count
     */
    count: {
      name: "Count",
      I: CountInEntityRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

