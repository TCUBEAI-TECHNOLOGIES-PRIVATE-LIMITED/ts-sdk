// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file packagings.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";
import { SerialsServiceSerialCodes } from "./serials_pb.js";

/**
 *
 * Describes the available states for a packaging
 *
 * @generated from enum tcube.PACKAGING_STATE
 */
export enum PACKAGING_STATE {
  /**
   * Packaging is any (only useful for filter requests)
   *
   * @generated from enum value: PACKAGING_STATE_ANY_UNSPECIFIED = 0;
   */
  PACKAGING_STATE_ANY_UNSPECIFIED = 0,

  /**
   * Packaging is open
   *
   * @generated from enum value: PACKAGING_STATE_OPEN = 1;
   */
  PACKAGING_STATE_OPEN = 1,

  /**
   * Packaging is closed
   *
   * @generated from enum value: PACKAGING_STATE_CLOSED = 2;
   */
  PACKAGING_STATE_CLOSED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PACKAGING_STATE)
proto3.util.setEnumType(PACKAGING_STATE, "tcube.PACKAGING_STATE", [
  { no: 0, name: "PACKAGING_STATE_ANY_UNSPECIFIED" },
  { no: 1, name: "PACKAGING_STATE_OPEN" },
  { no: 2, name: "PACKAGING_STATE_CLOSED" },
]);

/**
 *
 * Stores the possible values for encoding type
 *
 * @generated from enum tcube.PRINT_ENCODING_TYPE_FOR_PACKAGING
 */
export enum PRINT_ENCODING_TYPE_FOR_PACKAGING {
  /**
   * Generate the code as HRI
   *
   * @generated from enum value: PRINT_ENCODING_TYPE_FOR_PACKAGING_HRI_UNSPECIFIED = 0;
   */
  PRINT_ENCODING_TYPE_FOR_PACKAGING_HRI_UNSPECIFIED = 0,

  /**
   * Generate the code as URI
   *
   * @generated from enum value: PRINT_ENCODING_TYPE_FOR_PACKAGING_URI = 1;
   */
  PRINT_ENCODING_TYPE_FOR_PACKAGING_URI = 1,

  /**
   * Generate the code in all the available forms
   *
   * @generated from enum value: PRINT_ENCODING_TYPE_FOR_PACKAGING_ALL = 2;
   */
  PRINT_ENCODING_TYPE_FOR_PACKAGING_ALL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PRINT_ENCODING_TYPE_FOR_PACKAGING)
proto3.util.setEnumType(PRINT_ENCODING_TYPE_FOR_PACKAGING, "tcube.PRINT_ENCODING_TYPE_FOR_PACKAGING", [
  { no: 0, name: "PRINT_ENCODING_TYPE_FOR_PACKAGING_HRI_UNSPECIFIED" },
  { no: 1, name: "PRINT_ENCODING_TYPE_FOR_PACKAGING_URI" },
  { no: 2, name: "PRINT_ENCODING_TYPE_FOR_PACKAGING_ALL" },
]);

/**
 *
 * Describes the available sort keys for retrieving packagings
 *
 * @generated from enum tcube.PACKAGING_SORT_KEY
 */
export enum PACKAGING_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: PACKAGING_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  PACKAGING_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: PACKAGING_SORT_KEY_CREATED_AT = 1;
   */
  PACKAGING_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: PACKAGING_SORT_KEY_MODIFIED_AT = 2;
   */
  PACKAGING_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: PACKAGING_SORT_KEY_NAME = 10;
   */
  PACKAGING_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: PACKAGING_SORT_KEY_CODE = 11;
   */
  PACKAGING_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(PACKAGING_SORT_KEY)
proto3.util.setEnumType(PACKAGING_SORT_KEY, "tcube.PACKAGING_SORT_KEY", [
  { no: 0, name: "PACKAGING_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "PACKAGING_SORT_KEY_CREATED_AT" },
  { no: 2, name: "PACKAGING_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "PACKAGING_SORT_KEY_NAME" },
  { no: 11, name: "PACKAGING_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the necessary data structure during creation of a packaging
 *
 * @generated from message tcube.PackagingsServiceCreateRequest
 */
export class PackagingsServiceCreateRequest extends Message<PackagingsServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 8;
   */
  locationUuid = "";

  /**
   * UUID of the zone
   *
   * @generated from field: string zone_uuid = 9;
   */
  zoneUuid = "";

  /**
   * Optional UUID of the associated product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * Optional UUID of the associated batch
   *
   * @generated from field: string batch_uuid = 11;
   */
  batchUuid = "";

  /**
   * The name of the packaging
   *
   * @generated from field: string name = 12;
   */
  name = "";

  /**
   * Description of the packaging
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The maximum number of items that can be added to a packaging, with 0 denoting no limit
   *
   * @generated from field: int64 max_count = 14;
   */
  maxCount = protoInt64.zero;

  /**
   * The latitude of the location where this packaging was created
   *
   * @generated from field: double latitude = 15;
   */
  latitude = 0;

  /**
   * The longitude of the location where this packaging was created
   *
   * @generated from field: double longitude = 16;
   */
  longitude = 0;

  /**
   * The type of encoding
   *
   * @generated from field: tcube.PRINT_ENCODING_TYPE_FOR_PACKAGING print_encoding_type = 18;
   */
  printEncodingType = PRINT_ENCODING_TYPE_FOR_PACKAGING.PRINT_ENCODING_TYPE_FOR_PACKAGING_HRI_UNSPECIFIED;

  constructor(data?: PartialMessage<PackagingsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.PackagingsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "max_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 16, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 18, name: "print_encoding_type", kind: "enum", T: proto3.getEnumType(PRINT_ENCODING_TYPE_FOR_PACKAGING) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackagingsServiceCreateRequest {
    return new PackagingsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackagingsServiceCreateRequest {
    return new PackagingsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackagingsServiceCreateRequest {
    return new PackagingsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PackagingsServiceCreateRequest | PlainMessage<PackagingsServiceCreateRequest> | undefined, b: PackagingsServiceCreateRequest | PlainMessage<PackagingsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(PackagingsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each packaging on the platform
 *
 * @generated from message tcube.Packaging
 */
export class Packaging extends Message<Packaging> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: tcube.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 8;
   */
  locationUuid = "";

  /**
   * UUID of the zone
   *
   * @generated from field: string zone_uuid = 9;
   */
  zoneUuid = "";

  /**
   * Optional UUID of the associated product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * Optional UUID of the associated batch
   *
   * @generated from field: string batch_uuid = 11;
   */
  batchUuid = "";

  /**
   * The name of the packaging
   *
   * @generated from field: string name = 12;
   */
  name = "";

  /**
   * Code of the packaging
   *
   * @generated from field: string code = 13;
   */
  code = "";

  /**
   * Description of the packaging
   *
   * @generated from field: string description = 14;
   */
  description = "";

  /**
   * The maximum number of items that can be added to a packaging, with 0 denoting no limit
   *
   * @generated from field: int64 max_count = 15;
   */
  maxCount = protoInt64.zero;

  /**
   * The latitude of the location where this packaging was created
   *
   * @generated from field: double latitude = 16;
   */
  latitude = 0;

  /**
   * The longitude of the location where this packaging was created
   *
   * @generated from field: double longitude = 17;
   */
  longitude = 0;

  /**
   * The type of encoding
   *
   * @generated from field: tcube.PRINT_ENCODING_TYPE_FOR_PACKAGING print_encoding_type = 18;
   */
  printEncodingType = PRINT_ENCODING_TYPE_FOR_PACKAGING.PRINT_ENCODING_TYPE_FOR_PACKAGING_HRI_UNSPECIFIED;

  /**
   * The state of the packaging
   *
   * @generated from field: tcube.PACKAGING_STATE state = 20;
   */
  state = PACKAGING_STATE.PACKAGING_STATE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<Packaging>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.Packaging";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "max_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 17, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 18, name: "print_encoding_type", kind: "enum", T: proto3.getEnumType(PRINT_ENCODING_TYPE_FOR_PACKAGING) },
    { no: 20, name: "state", kind: "enum", T: proto3.getEnumType(PACKAGING_STATE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Packaging {
    return new Packaging().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Packaging {
    return new Packaging().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Packaging {
    return new Packaging().fromJsonString(jsonString, options);
  }

  static equals(a: Packaging | PlainMessage<Packaging> | undefined, b: Packaging | PlainMessage<Packaging> | undefined): boolean {
    return proto3.util.equals(Packaging, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of packagings
 *
 * @generated from message tcube.PackagingsList
 */
export class PackagingsList extends Message<PackagingsList> {
  /**
   * List of packagings
   *
   * @generated from field: repeated tcube.Packaging list = 1;
   */
  list: Packaging[] = [];

  constructor(data?: PartialMessage<PackagingsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.PackagingsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Packaging, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackagingsList {
    return new PackagingsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackagingsList {
    return new PackagingsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackagingsList {
    return new PackagingsList().fromJsonString(jsonString, options);
  }

  static equals(a: PackagingsList | PlainMessage<PackagingsList> | undefined, b: PackagingsList | PlainMessage<PackagingsList> | undefined): boolean {
    return proto3.util.equals(PackagingsList, a, b);
  }
}

/**
 *
 * Describes the necessary data structure during addition of multiple serials to a packaging
 *
 * @generated from message tcube.PackagingsServiceAddSerialsRequest
 */
export class PackagingsServiceAddSerialsRequest extends Message<PackagingsServiceAddSerialsRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the packaging
   *
   * @generated from field: string packaging_uuid = 10;
   */
  packagingUuid = "";

  /**
   * The latitude of the location where this packaging was created
   *
   * @generated from field: double latitude = 11;
   */
  latitude = 0;

  /**
   * The longitude of the location where this packaging was created
   *
   * @generated from field: double longitude = 12;
   */
  longitude = 0;

  /**
   * List of serial codes
   *
   * @generated from field: repeated tcube.SerialsServiceSerialCodes list = 20;
   */
  list: SerialsServiceSerialCodes[] = [];

  constructor(data?: PartialMessage<PackagingsServiceAddSerialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.PackagingsServiceAddSerialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "packaging_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 20, name: "list", kind: "message", T: SerialsServiceSerialCodes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackagingsServiceAddSerialsRequest {
    return new PackagingsServiceAddSerialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackagingsServiceAddSerialsRequest {
    return new PackagingsServiceAddSerialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackagingsServiceAddSerialsRequest {
    return new PackagingsServiceAddSerialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PackagingsServiceAddSerialsRequest | PlainMessage<PackagingsServiceAddSerialsRequest> | undefined, b: PackagingsServiceAddSerialsRequest | PlainMessage<PackagingsServiceAddSerialsRequest> | undefined): boolean {
    return proto3.util.equals(PackagingsServiceAddSerialsRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each packaging serial
 *
 * @generated from message tcube.PackagingSerial
 */
export class PackagingSerial extends Message<PackagingSerial> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: tcube.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 8;
   */
  locationUuid = "";

  /**
   * UUID of the zone
   *
   * @generated from field: string zone_uuid = 9;
   */
  zoneUuid = "";

  /**
   * UUID of the packaging
   *
   * @generated from field: string packaging_uuid = 10;
   */
  packagingUuid = "";

  /**
   * UUID of the serial
   *
   * @generated from field: string serial_uuid = 11;
   */
  serialUuid = "";

  /**
   * The latitude of the location where this packaging was created
   *
   * @generated from field: double latitude = 12;
   */
  latitude = 0;

  /**
   * The longitude of the location where this packaging was created
   *
   * @generated from field: double longitude = 13;
   */
  longitude = 0;

  constructor(data?: PartialMessage<PackagingSerial>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.PackagingSerial";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "packaging_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackagingSerial {
    return new PackagingSerial().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackagingSerial {
    return new PackagingSerial().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackagingSerial {
    return new PackagingSerial().fromJsonString(jsonString, options);
  }

  static equals(a: PackagingSerial | PlainMessage<PackagingSerial> | undefined, b: PackagingSerial | PlainMessage<PackagingSerial> | undefined): boolean {
    return proto3.util.equals(PackagingSerial, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of packaging serials
 *
 * @generated from message tcube.PackagingsSerialsList
 */
export class PackagingsSerialsList extends Message<PackagingsSerialsList> {
  /**
   * List of serials that are associated with the packaging
   *
   * @generated from field: repeated tcube.PackagingSerial list = 1;
   */
  list: PackagingSerial[] = [];

  constructor(data?: PartialMessage<PackagingsSerialsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.PackagingsSerialsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: PackagingSerial, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackagingsSerialsList {
    return new PackagingsSerialsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackagingsSerialsList {
    return new PackagingsSerialsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackagingsSerialsList {
    return new PackagingsSerialsList().fromJsonString(jsonString, options);
  }

  static equals(a: PackagingsSerialsList | PlainMessage<PackagingsSerialsList> | undefined, b: PackagingsSerialsList | PlainMessage<PackagingsSerialsList> | undefined): boolean {
    return proto3.util.equals(PackagingsSerialsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.PackagingsServicePaginationReq
 */
export class PackagingsServicePaginationReq extends Message<PackagingsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.PACKAGING_SORT_KEY sort_key = 5;
   */
  sortKey = PACKAGING_SORT_KEY.PACKAGING_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<PackagingsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.PackagingsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PACKAGING_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackagingsServicePaginationReq {
    return new PackagingsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackagingsServicePaginationReq {
    return new PackagingsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackagingsServicePaginationReq {
    return new PackagingsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: PackagingsServicePaginationReq | PlainMessage<PackagingsServicePaginationReq> | undefined, b: PackagingsServicePaginationReq | PlainMessage<PackagingsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(PackagingsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.PackagingPaginationResp
 */
export class PackagingPaginationResp extends Message<PackagingPaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated tcube.Packaging payload = 3;
   */
  payload: Packaging[] = [];

  constructor(data?: PartialMessage<PackagingPaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.PackagingPaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Packaging, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackagingPaginationResp {
    return new PackagingPaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackagingPaginationResp {
    return new PackagingPaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackagingPaginationResp {
    return new PackagingPaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: PackagingPaginationResp | PlainMessage<PackagingPaginationResp> | undefined, b: PackagingPaginationResp | PlainMessage<PackagingPaginationResp> | undefined): boolean {
    return proto3.util.equals(PackagingPaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.PackagingsServiceFilterReq
 */
export class PackagingsServiceFilterReq extends Message<PackagingsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.PACKAGING_SORT_KEY sort_key = 5;
   */
  sortKey = PACKAGING_SORT_KEY.PACKAGING_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the zone
   *
   * @generated from field: string zone_uuid = 10;
   */
  zoneUuid = "";

  /**
   * Optional UUID of the associated product
   *
   * @generated from field: string product_uuid = 11;
   */
  productUuid = "";

  /**
   * Optional UUID of the associated batch
   *
   * @generated from field: string batch_uuid = 12;
   */
  batchUuid = "";

  /**
   * The name of the packaging
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * Code of the packaging
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The state of the packaging
   *
   * @generated from field: tcube.PACKAGING_STATE state = 30;
   */
  state = PACKAGING_STATE.PACKAGING_STATE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<PackagingsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.PackagingsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PACKAGING_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "state", kind: "enum", T: proto3.getEnumType(PACKAGING_STATE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackagingsServiceFilterReq {
    return new PackagingsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackagingsServiceFilterReq {
    return new PackagingsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackagingsServiceFilterReq {
    return new PackagingsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: PackagingsServiceFilterReq | PlainMessage<PackagingsServiceFilterReq> | undefined, b: PackagingsServiceFilterReq | PlainMessage<PackagingsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(PackagingsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.PackagingsServiceSearchAllReq
 */
export class PackagingsServiceSearchAllReq extends Message<PackagingsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.PACKAGING_SORT_KEY sort_key = 5;
   */
  sortKey = PACKAGING_SORT_KEY.PACKAGING_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 7;
   */
  locationUuid = "";

  /**
   * UUID of the zone
   *
   * @generated from field: string zone_uuid = 8;
   */
  zoneUuid = "";

  /**
   * Optional UUID of the associated product
   *
   * @generated from field: string product_uuid = 9;
   */
  productUuid = "";

  /**
   * Optional UUID of the associated batch
   *
   * @generated from field: string batch_uuid = 10;
   */
  batchUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<PackagingsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.PackagingsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PACKAGING_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PackagingsServiceSearchAllReq {
    return new PackagingsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PackagingsServiceSearchAllReq {
    return new PackagingsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PackagingsServiceSearchAllReq {
    return new PackagingsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: PackagingsServiceSearchAllReq | PlainMessage<PackagingsServiceSearchAllReq> | undefined, b: PackagingsServiceSearchAllReq | PlainMessage<PackagingsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(PackagingsServiceSearchAllReq, a, b);
  }
}

