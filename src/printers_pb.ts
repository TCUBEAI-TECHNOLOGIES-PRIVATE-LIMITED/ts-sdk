// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file printers.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";

/**
 *
 * Describes the available printer types
 *
 * @generated from enum scanswift.PRINTER_MODE
 */
export enum PRINTER_MODE {
  /**
   * Used only for filter requests
   *
   * @generated from enum value: PRINTER_MODE_ANY_UNSPECIFIED = 0;
   */
  PRINTER_MODE_ANY_UNSPECIFIED = 0,

  /**
   * ESC/POS (Epson) printer
   *
   * @generated from enum value: PRINTER_MODE_ESC_POS = 1;
   */
  PRINTER_MODE_ESC_POS = 1,

  /**
   * Zebra printer
   *
   * @generated from enum value: PRINTER_MODE_ZEBRA = 2;
   */
  PRINTER_MODE_ZEBRA = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(PRINTER_MODE)
proto3.util.setEnumType(PRINTER_MODE, "scanswift.PRINTER_MODE", [
  { no: 0, name: "PRINTER_MODE_ANY_UNSPECIFIED" },
  { no: 1, name: "PRINTER_MODE_ESC_POS" },
  { no: 2, name: "PRINTER_MODE_ZEBRA" },
]);

/**
 *
 * Describes the available sort keys for retrieving printers
 *
 * @generated from enum scanswift.PRINTER_SORT_KEY
 */
export enum PRINTER_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: PRINTER_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  PRINTER_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: PRINTER_SORT_KEY_CREATED_AT = 1;
   */
  PRINTER_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: PRINTER_SORT_KEY_MODIFIED_AT = 2;
   */
  PRINTER_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: PRINTER_SORT_KEY_NAME = 10;
   */
  PRINTER_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: PRINTER_SORT_KEY_CODE = 11;
   */
  PRINTER_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(PRINTER_SORT_KEY)
proto3.util.setEnumType(PRINTER_SORT_KEY, "scanswift.PRINTER_SORT_KEY", [
  { no: 0, name: "PRINTER_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "PRINTER_SORT_KEY_CREATED_AT" },
  { no: 2, name: "PRINTER_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "PRINTER_SORT_KEY_NAME" },
  { no: 11, name: "PRINTER_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the necessary data structure during creation of a printer
 *
 * @generated from message scanswift.PrintersServiceCreateRequest
 */
export class PrintersServiceCreateRequest extends Message<PrintersServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * The name of the printer
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the printer
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The printer mode
   *
   * @generated from field: scanswift.PRINTER_MODE mode = 12;
   */
  mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;

  /**
   * The IP address of the printer
   *
   * @generated from field: string ip_address = 13;
   */
  ipAddress = "";

  /**
   * The port that the printer is configured on
   *
   * @generated from field: uint64 port = 14;
   */
  port = protoInt64.zero;

  /**
   * Description of the printer
   *
   * @generated from field: string description = 15;
   */
  description = "";

  constructor(data?: PartialMessage<PrintersServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.PrintersServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "mode", kind: "enum", T: proto3.getEnumType(PRINTER_MODE) },
    { no: 13, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrintersServiceCreateRequest {
    return new PrintersServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrintersServiceCreateRequest {
    return new PrintersServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrintersServiceCreateRequest {
    return new PrintersServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PrintersServiceCreateRequest | PlainMessage<PrintersServiceCreateRequest> | undefined, b: PrintersServiceCreateRequest | PlainMessage<PrintersServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(PrintersServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a printer
 *
 * @generated from message scanswift.PrintersServiceUpdateRequest
 */
export class PrintersServiceUpdateRequest extends Message<PrintersServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * The name of the printer
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the printer
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The printer mode
   *
   * @generated from field: scanswift.PRINTER_MODE mode = 12;
   */
  mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;

  /**
   * The IP address of the printer
   *
   * @generated from field: string ip_address = 13;
   */
  ipAddress = "";

  /**
   * The port that the printer is configured on
   *
   * @generated from field: uint64 port = 14;
   */
  port = protoInt64.zero;

  /**
   * Description of the printer
   *
   * @generated from field: string description = 15;
   */
  description = "";

  constructor(data?: PartialMessage<PrintersServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.PrintersServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "mode", kind: "enum", T: proto3.getEnumType(PRINTER_MODE) },
    { no: 13, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrintersServiceUpdateRequest {
    return new PrintersServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrintersServiceUpdateRequest {
    return new PrintersServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrintersServiceUpdateRequest {
    return new PrintersServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PrintersServiceUpdateRequest | PlainMessage<PrintersServiceUpdateRequest> | undefined, b: PrintersServiceUpdateRequest | PlainMessage<PrintersServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(PrintersServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each printer on the platform
 *
 * @generated from message scanswift.Printer
 */
export class Printer extends Message<Printer> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: scanswift.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * The name of the printer
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the printer
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The printer mode
   *
   * @generated from field: scanswift.PRINTER_MODE mode = 12;
   */
  mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;

  /**
   * The IP address of the printer
   *
   * @generated from field: string ip_address = 13;
   */
  ipAddress = "";

  /**
   * The port that the printer is configured on
   *
   * @generated from field: uint64 port = 14;
   */
  port = protoInt64.zero;

  /**
   * Description of the printer
   *
   * @generated from field: string description = 15;
   */
  description = "";

  constructor(data?: PartialMessage<Printer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.Printer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "mode", kind: "enum", T: proto3.getEnumType(PRINTER_MODE) },
    { no: 13, name: "ip_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "port", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 15, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Printer {
    return new Printer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Printer {
    return new Printer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Printer {
    return new Printer().fromJsonString(jsonString, options);
  }

  static equals(a: Printer | PlainMessage<Printer> | undefined, b: Printer | PlainMessage<Printer> | undefined): boolean {
    return proto3.util.equals(Printer, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of printers
 *
 * @generated from message scanswift.PrintersList
 */
export class PrintersList extends Message<PrintersList> {
  /**
   * List of printers
   *
   * @generated from field: repeated scanswift.Printer list = 1;
   */
  list: Printer[] = [];

  constructor(data?: PartialMessage<PrintersList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.PrintersList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Printer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrintersList {
    return new PrintersList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrintersList {
    return new PrintersList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrintersList {
    return new PrintersList().fromJsonString(jsonString, options);
  }

  static equals(a: PrintersList | PlainMessage<PrintersList> | undefined, b: PrintersList | PlainMessage<PrintersList> | undefined): boolean {
    return proto3.util.equals(PrintersList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message scanswift.PrintersServicePaginationReq
 */
export class PrintersServicePaginationReq extends Message<PrintersServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.PRINTER_SORT_KEY sort_key = 5;
   */
  sortKey = PRINTER_SORT_KEY.PRINTER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 6;
   */
  locationUuid = "";

  constructor(data?: PartialMessage<PrintersServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.PrintersServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PRINTER_SORT_KEY) },
    { no: 6, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrintersServicePaginationReq {
    return new PrintersServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrintersServicePaginationReq {
    return new PrintersServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrintersServicePaginationReq {
    return new PrintersServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: PrintersServicePaginationReq | PlainMessage<PrintersServicePaginationReq> | undefined, b: PrintersServicePaginationReq | PlainMessage<PrintersServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(PrintersServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message scanswift.PrinterPaginationResp
 */
export class PrinterPaginationResp extends Message<PrinterPaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated scanswift.Printer payload = 3;
   */
  payload: Printer[] = [];

  constructor(data?: PartialMessage<PrinterPaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.PrinterPaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Printer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrinterPaginationResp {
    return new PrinterPaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrinterPaginationResp {
    return new PrinterPaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrinterPaginationResp {
    return new PrinterPaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: PrinterPaginationResp | PlainMessage<PrinterPaginationResp> | undefined, b: PrinterPaginationResp | PlainMessage<PrinterPaginationResp> | undefined): boolean {
    return proto3.util.equals(PrinterPaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message scanswift.PrintersServiceFilterReq
 */
export class PrintersServiceFilterReq extends Message<PrintersServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.PRINTER_SORT_KEY sort_key = 5;
   */
  sortKey = PRINTER_SORT_KEY.PRINTER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * The name of the printer
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * Code of the printer
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The printer mode
   *
   * @generated from field: scanswift.PRINTER_MODE mode = 22;
   */
  mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<PrintersServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.PrintersServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PRINTER_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "mode", kind: "enum", T: proto3.getEnumType(PRINTER_MODE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrintersServiceFilterReq {
    return new PrintersServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrintersServiceFilterReq {
    return new PrintersServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrintersServiceFilterReq {
    return new PrintersServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: PrintersServiceFilterReq | PlainMessage<PrintersServiceFilterReq> | undefined, b: PrintersServiceFilterReq | PlainMessage<PrintersServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(PrintersServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message scanswift.PrintersServiceSearchAllReq
 */
export class PrintersServiceSearchAllReq extends Message<PrintersServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.PRINTER_SORT_KEY sort_key = 5;
   */
  sortKey = PRINTER_SORT_KEY.PRINTER_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The printer mode
   *
   * @generated from field: scanswift.PRINTER_MODE mode = 22;
   */
  mode = PRINTER_MODE.PRINTER_MODE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<PrintersServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.PrintersServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PRINTER_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "mode", kind: "enum", T: proto3.getEnumType(PRINTER_MODE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PrintersServiceSearchAllReq {
    return new PrintersServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PrintersServiceSearchAllReq {
    return new PrintersServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PrintersServiceSearchAllReq {
    return new PrintersServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: PrintersServiceSearchAllReq | PlainMessage<PrintersServiceSearchAllReq> | undefined, b: PrintersServiceSearchAllReq | PlainMessage<PrintersServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(PrintersServiceSearchAllReq, a, b);
  }
}

