// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file products.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Product, ProductPaginationResp, ProductsList, ProductsServiceCreateRequest, ProductsServiceFilterReq, ProductsServicePaginationReq, ProductsServiceSearchAllReq, ProductsServiceUpdateRequest } from "./products_pb.js";
import { MethodKind } from "@bufbuild/protobuf";
import { ActiveInEntityRequest, CountInEntityRequest, CountResponse, Identifier, IdentifierWithUserComment, ImageAssignRequest, ImageResponse, SearchKeyRequest } from "./base_pb.js";

/**
 *
 * Describes the methods applicable on each product
 *
 * @generated from service scanswift.ProductsService
 */
export const ProductsService = {
  typeName: "scanswift.ProductsService",
  methods: {
    /**
     * Create a product
     *
     * @generated from rpc scanswift.ProductsService.Create
     */
    create: {
      name: "Create",
      I: ProductsServiceCreateRequest,
      O: Product,
      kind: MethodKind.Unary,
    },
    /**
     * Update a product
     *
     * @generated from rpc scanswift.ProductsService.Update
     */
    update: {
      name: "Update",
      I: ProductsServiceUpdateRequest,
      O: Product,
      kind: MethodKind.Unary,
    },
    /**
     * Archive the product
     *
     * @generated from rpc scanswift.ProductsService.Archive
     */
    archive: {
      name: "Archive",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore the product
     *
     * @generated from rpc scanswift.ProductsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Assign image
     *
     * @generated from rpc scanswift.ProductsService.AssignImage
     */
    assignImage: {
      name: "AssignImage",
      I: ImageAssignRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View assigned image
     *
     * @generated from rpc scanswift.ProductsService.ViewImage
     */
    viewImage: {
      name: "ViewImage",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc scanswift.ProductsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: Identifier,
      O: Product,
      kind: MethodKind.Unary,
    },
    /**
     * View by Global Identifier
     *
     * @generated from rpc scanswift.ProductsService.ViewByGlobalIdentifier
     */
    viewByGlobalIdentifier: {
      name: "ViewByGlobalIdentifier",
      I: SearchKeyRequest,
      O: Product,
      kind: MethodKind.Unary,
    },
    /**
     * View all products
     *
     * @generated from rpc scanswift.ProductsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveInEntityRequest,
      O: ProductsList,
      kind: MethodKind.Unary,
    },
    /**
     * View products with pagination
     *
     * @generated from rpc scanswift.ProductsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: ProductsServicePaginationReq,
      O: ProductPaginationResp,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc scanswift.ProductsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: ProductsServiceSearchAllReq,
      O: ProductsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc scanswift.ProductsService.Filter
     */
    filter: {
      name: "Filter",
      I: ProductsServiceFilterReq,
      O: ProductsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count
     *
     * @generated from rpc scanswift.ProductsService.Count
     */
    count: {
      name: "Count",
      I: CountInEntityRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

