// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file products.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";

/**
 *
 * Stores the possible values for the code type
 *
 * @generated from enum tcube.PRINT_CODE_TYPE
 */
export enum PRINT_CODE_TYPE {
  /**
   * Print the code as a QR code
   *
   * @generated from enum value: QR_UNSPECIFIED = 0;
   */
  QR_UNSPECIFIED = 0,

  /**
   * Print the code as a DataMatrix code
   *
   * @generated from enum value: DATAMATRIX = 1;
   */
  DATAMATRIX = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PRINT_CODE_TYPE)
proto3.util.setEnumType(PRINT_CODE_TYPE, "tcube.PRINT_CODE_TYPE", [
  { no: 0, name: "QR_UNSPECIFIED" },
  { no: 1, name: "DATAMATRIX" },
]);

/**
 *
 * Stores the possible values for encoding type
 *
 * @generated from enum tcube.PRINT_ENCODING_TYPE_FOR_PRODUCT
 */
export enum PRINT_ENCODING_TYPE_FOR_PRODUCT {
  /**
   * Generate the code as HRI
   *
   * @generated from enum value: PRINT_ENCODING_TYPE_FOR_PRODUCT_HRI_UNSPECIFIED = 0;
   */
  PRINT_ENCODING_TYPE_FOR_PRODUCT_HRI_UNSPECIFIED = 0,

  /**
   * Generate the code as URI
   *
   * @generated from enum value: PRINT_ENCODING_TYPE_FOR_PRODUCT_URI = 1;
   */
  PRINT_ENCODING_TYPE_FOR_PRODUCT_URI = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PRINT_ENCODING_TYPE_FOR_PRODUCT)
proto3.util.setEnumType(PRINT_ENCODING_TYPE_FOR_PRODUCT, "tcube.PRINT_ENCODING_TYPE_FOR_PRODUCT", [
  { no: 0, name: "PRINT_ENCODING_TYPE_FOR_PRODUCT_HRI_UNSPECIFIED" },
  { no: 1, name: "PRINT_ENCODING_TYPE_FOR_PRODUCT_URI" },
]);

/**
 *
 * Stores the possible values of paper sizes
 *
 * @generated from enum tcube.PRINT_PAPER_SIZE
 */
export enum PRINT_PAPER_SIZE {
  /**
   * Print the batch on an A4 sheet
   *
   * @generated from enum value: A4_UNSPECIFIED = 0;
   */
  A4_UNSPECIFIED = 0,
}
// Retrieve enum metadata with: proto3.getEnumType(PRINT_PAPER_SIZE)
proto3.util.setEnumType(PRINT_PAPER_SIZE, "tcube.PRINT_PAPER_SIZE", [
  { no: 0, name: "A4_UNSPECIFIED" },
]);

/**
 *
 * Describes the available sort keys for retrieving products
 *
 * @generated from enum tcube.PRODUCT_SORT_KEY
 */
export enum PRODUCT_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: PRODUCT_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  PRODUCT_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: PRODUCT_SORT_KEY_CREATED_AT = 1;
   */
  PRODUCT_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: PRODUCT_SORT_KEY_MODIFIED_AT = 2;
   */
  PRODUCT_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: PRODUCT_SORT_KEY_NAME = 10;
   */
  PRODUCT_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: PRODUCT_SORT_KEY_CODE = 11;
   */
  PRODUCT_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(PRODUCT_SORT_KEY)
proto3.util.setEnumType(PRODUCT_SORT_KEY, "tcube.PRODUCT_SORT_KEY", [
  { no: 0, name: "PRODUCT_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "PRODUCT_SORT_KEY_CREATED_AT" },
  { no: 2, name: "PRODUCT_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "PRODUCT_SORT_KEY_NAME" },
  { no: 11, name: "PRODUCT_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the necessary data structure during creation of a product
 *
 * @generated from message tcube.ProductsServiceCreateRequest
 */
export class ProductsServiceCreateRequest extends Message<ProductsServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * The name of the product
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the product
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Description of the product
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The unit price of the product (in cents)
   *
   * @generated from field: int64 unit_price = 14;
   */
  unitPrice = protoInt64.zero;

  /**
   * UUID of the associated currency
   *
   * @generated from field: string currency_uuid = 15;
   */
  currencyUuid = "";

  /**
   * UUID of the associated unit
   *
   * @generated from field: string unit_uuid = 16;
   */
  unitUuid = "";

  /**
   * Shelf life of the product in days
   *
   * @generated from field: int64 shelf_life_days = 17;
   */
  shelfLifeDays = protoInt64.zero;

  /**
   * Schema of the product
   *
   * @generated from field: string serialization_schema = 20;
   */
  serializationSchema = "";

  /**
   * The type of encoding
   *
   * @generated from field: tcube.PRINT_ENCODING_TYPE_FOR_PRODUCT print_encoding_type = 21;
   */
  printEncodingType = PRINT_ENCODING_TYPE_FOR_PRODUCT.PRINT_ENCODING_TYPE_FOR_PRODUCT_HRI_UNSPECIFIED;

  /**
   * THe type of code that needs to be printed
   *
   * @generated from field: tcube.PRINT_CODE_TYPE print_code_type = 30;
   */
  printCodeType = PRINT_CODE_TYPE.QR_UNSPECIFIED;

  /**
   * The dimension of the code that needs to be printed (in mm)
   *
   * @generated from field: double print_code_dimension_in_mm = 31;
   */
  printCodeDimensionInMm = 0;

  /**
   * The dimension of the margin in between codes within the print
   *
   * @generated from field: double print_margin_in_mm = 32;
   */
  printMarginInMm = 0;

  /**
   * The size of the paper on which the codes are to be printed as a batch
   *
   * @generated from field: tcube.PRINT_PAPER_SIZE print_batch_paper_size = 33;
   */
  printBatchPaperSize = PRINT_PAPER_SIZE.A4_UNSPECIFIED;

  constructor(data?: PartialMessage<ProductsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.ProductsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "unit_price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "currency_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "unit_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "shelf_life_days", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "serialization_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "print_encoding_type", kind: "enum", T: proto3.getEnumType(PRINT_ENCODING_TYPE_FOR_PRODUCT) },
    { no: 30, name: "print_code_type", kind: "enum", T: proto3.getEnumType(PRINT_CODE_TYPE) },
    { no: 31, name: "print_code_dimension_in_mm", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 32, name: "print_margin_in_mm", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 33, name: "print_batch_paper_size", kind: "enum", T: proto3.getEnumType(PRINT_PAPER_SIZE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductsServiceCreateRequest {
    return new ProductsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductsServiceCreateRequest {
    return new ProductsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductsServiceCreateRequest {
    return new ProductsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProductsServiceCreateRequest | PlainMessage<ProductsServiceCreateRequest> | undefined, b: ProductsServiceCreateRequest | PlainMessage<ProductsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(ProductsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a product
 *
 * @generated from message tcube.ProductsServiceUpdateRequest
 */
export class ProductsServiceUpdateRequest extends Message<ProductsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * The name of the product
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Description of the product
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The unit price of the product (in cents)
   *
   * @generated from field: int64 unit_price = 13;
   */
  unitPrice = protoInt64.zero;

  /**
   * UUID of the associated currency
   *
   * @generated from field: string currency_uuid = 14;
   */
  currencyUuid = "";

  /**
   * UUID of the associated unit
   *
   * @generated from field: string unit_uuid = 15;
   */
  unitUuid = "";

  /**
   * Shelf life of the product in days
   *
   * @generated from field: int64 shelf_life_days = 16;
   */
  shelfLifeDays = protoInt64.zero;

  /**
   * Schema of the product
   *
   * @generated from field: string serialization_schema = 20;
   */
  serializationSchema = "";

  /**
   * The type of encoding
   *
   * @generated from field: tcube.PRINT_ENCODING_TYPE_FOR_PRODUCT print_encoding_type = 21;
   */
  printEncodingType = PRINT_ENCODING_TYPE_FOR_PRODUCT.PRINT_ENCODING_TYPE_FOR_PRODUCT_HRI_UNSPECIFIED;

  /**
   * THe type of code that needs to be printed
   *
   * @generated from field: tcube.PRINT_CODE_TYPE print_code_type = 30;
   */
  printCodeType = PRINT_CODE_TYPE.QR_UNSPECIFIED;

  /**
   * The dimension of the code that needs to be printed (in mm)
   *
   * @generated from field: double print_code_dimension_in_mm = 31;
   */
  printCodeDimensionInMm = 0;

  /**
   * The dimension of the margin in between codes within the print
   *
   * @generated from field: double print_margin_in_mm = 32;
   */
  printMarginInMm = 0;

  /**
   * The size of the paper on which the codes are to be printed as a batch
   *
   * @generated from field: tcube.PRINT_PAPER_SIZE print_batch_paper_size = 33;
   */
  printBatchPaperSize = PRINT_PAPER_SIZE.A4_UNSPECIFIED;

  constructor(data?: PartialMessage<ProductsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.ProductsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "unit_price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "currency_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "unit_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "shelf_life_days", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "serialization_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "print_encoding_type", kind: "enum", T: proto3.getEnumType(PRINT_ENCODING_TYPE_FOR_PRODUCT) },
    { no: 30, name: "print_code_type", kind: "enum", T: proto3.getEnumType(PRINT_CODE_TYPE) },
    { no: 31, name: "print_code_dimension_in_mm", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 32, name: "print_margin_in_mm", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 33, name: "print_batch_paper_size", kind: "enum", T: proto3.getEnumType(PRINT_PAPER_SIZE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductsServiceUpdateRequest {
    return new ProductsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductsServiceUpdateRequest {
    return new ProductsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductsServiceUpdateRequest {
    return new ProductsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProductsServiceUpdateRequest | PlainMessage<ProductsServiceUpdateRequest> | undefined, b: ProductsServiceUpdateRequest | PlainMessage<ProductsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ProductsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each product on the platform
 *
 * @generated from message tcube.Product
 */
export class Product extends Message<Product> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: tcube.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * The name of the product
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the product
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * The global identifier of the product
   *
   * @generated from field: string global_identifier = 12;
   */
  globalIdentifier = "";

  /**
   * Description of the product
   *
   * @generated from field: string description = 13;
   */
  description = "";

  /**
   * The unit price of the product (in cents)
   *
   * @generated from field: int64 unit_price = 14;
   */
  unitPrice = protoInt64.zero;

  /**
   * UUID of the associated currency
   *
   * @generated from field: string currency_uuid = 15;
   */
  currencyUuid = "";

  /**
   * UUID of the associated unit
   *
   * @generated from field: string unit_uuid = 16;
   */
  unitUuid = "";

  /**
   * Shelf life of the product in days
   *
   * @generated from field: int64 shelf_life_days = 17;
   */
  shelfLifeDays = protoInt64.zero;

  /**
   * Schema of the product
   *
   * @generated from field: string serialization_schema = 20;
   */
  serializationSchema = "";

  /**
   * The type of encoding
   *
   * @generated from field: tcube.PRINT_ENCODING_TYPE_FOR_PRODUCT print_encoding_type = 21;
   */
  printEncodingType = PRINT_ENCODING_TYPE_FOR_PRODUCT.PRINT_ENCODING_TYPE_FOR_PRODUCT_HRI_UNSPECIFIED;

  /**
   * THe type of code that needs to be printed
   *
   * @generated from field: tcube.PRINT_CODE_TYPE print_code_type = 30;
   */
  printCodeType = PRINT_CODE_TYPE.QR_UNSPECIFIED;

  /**
   * The dimension of the code that needs to be printed (in mm)
   *
   * @generated from field: double print_code_dimension_in_mm = 31;
   */
  printCodeDimensionInMm = 0;

  /**
   * The dimension of the margin in between codes within the print
   *
   * @generated from field: double print_margin_in_mm = 32;
   */
  printMarginInMm = 0;

  /**
   * The size of the paper on which the codes are to be printed as a batch
   *
   * @generated from field: tcube.PRINT_PAPER_SIZE print_batch_paper_size = 33;
   */
  printBatchPaperSize = PRINT_PAPER_SIZE.A4_UNSPECIFIED;

  constructor(data?: PartialMessage<Product>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.Product";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "global_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "unit_price", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 15, name: "currency_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "unit_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "shelf_life_days", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "serialization_schema", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "print_encoding_type", kind: "enum", T: proto3.getEnumType(PRINT_ENCODING_TYPE_FOR_PRODUCT) },
    { no: 30, name: "print_code_type", kind: "enum", T: proto3.getEnumType(PRINT_CODE_TYPE) },
    { no: 31, name: "print_code_dimension_in_mm", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 32, name: "print_margin_in_mm", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 33, name: "print_batch_paper_size", kind: "enum", T: proto3.getEnumType(PRINT_PAPER_SIZE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Product {
    return new Product().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Product {
    return new Product().fromJsonString(jsonString, options);
  }

  static equals(a: Product | PlainMessage<Product> | undefined, b: Product | PlainMessage<Product> | undefined): boolean {
    return proto3.util.equals(Product, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of products
 *
 * @generated from message tcube.ProductsList
 */
export class ProductsList extends Message<ProductsList> {
  /**
   * List of products
   *
   * @generated from field: repeated tcube.Product list = 1;
   */
  list: Product[] = [];

  constructor(data?: PartialMessage<ProductsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.ProductsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Product, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductsList {
    return new ProductsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductsList {
    return new ProductsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductsList {
    return new ProductsList().fromJsonString(jsonString, options);
  }

  static equals(a: ProductsList | PlainMessage<ProductsList> | undefined, b: ProductsList | PlainMessage<ProductsList> | undefined): boolean {
    return proto3.util.equals(ProductsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.ProductsServicePaginationReq
 */
export class ProductsServicePaginationReq extends Message<ProductsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.PRODUCT_SORT_KEY sort_key = 5;
   */
  sortKey = PRODUCT_SORT_KEY.PRODUCT_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<ProductsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.ProductsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PRODUCT_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductsServicePaginationReq {
    return new ProductsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductsServicePaginationReq {
    return new ProductsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductsServicePaginationReq {
    return new ProductsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: ProductsServicePaginationReq | PlainMessage<ProductsServicePaginationReq> | undefined, b: ProductsServicePaginationReq | PlainMessage<ProductsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(ProductsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.ProductPaginationResp
 */
export class ProductPaginationResp extends Message<ProductPaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated tcube.Product payload = 3;
   */
  payload: Product[] = [];

  constructor(data?: PartialMessage<ProductPaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.ProductPaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Product, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductPaginationResp {
    return new ProductPaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductPaginationResp {
    return new ProductPaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductPaginationResp {
    return new ProductPaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: ProductPaginationResp | PlainMessage<ProductPaginationResp> | undefined, b: ProductPaginationResp | PlainMessage<ProductPaginationResp> | undefined): boolean {
    return proto3.util.equals(ProductPaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.ProductsServiceFilterReq
 */
export class ProductsServiceFilterReq extends Message<ProductsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.PRODUCT_SORT_KEY sort_key = 5;
   */
  sortKey = PRODUCT_SORT_KEY.PRODUCT_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * The name of the product
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * Code of the product
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The global identifier of the product
   *
   * @generated from field: string global_identifier = 22;
   */
  globalIdentifier = "";

  constructor(data?: PartialMessage<ProductsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.ProductsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PRODUCT_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "global_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductsServiceFilterReq {
    return new ProductsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductsServiceFilterReq {
    return new ProductsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductsServiceFilterReq {
    return new ProductsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: ProductsServiceFilterReq | PlainMessage<ProductsServiceFilterReq> | undefined, b: ProductsServiceFilterReq | PlainMessage<ProductsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(ProductsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.ProductsServiceSearchAllReq
 */
export class ProductsServiceSearchAllReq extends Message<ProductsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.PRODUCT_SORT_KEY sort_key = 5;
   */
  sortKey = PRODUCT_SORT_KEY.PRODUCT_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * UUID of the location
   * string location_uuid = 9; 
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<ProductsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.ProductsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(PRODUCT_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProductsServiceSearchAllReq {
    return new ProductsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProductsServiceSearchAllReq {
    return new ProductsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProductsServiceSearchAllReq {
    return new ProductsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: ProductsServiceSearchAllReq | PlainMessage<ProductsServiceSearchAllReq> | undefined, b: ProductsServiceSearchAllReq | PlainMessage<ProductsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(ProductsServiceSearchAllReq, a, b);
  }
}

