// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file roles.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";

/**
 *
 * Describes the available sort keys for retrieving roles
 *
 * @generated from enum tcube.ROLE_SORT_KEY
 */
export enum ROLE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: ROLE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  ROLE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: ROLE_SORT_KEY_CREATED_AT = 1;
   */
  ROLE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: ROLE_SORT_KEY_MODIFIED_AT = 2;
   */
  ROLE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: ROLE_SORT_KEY_NAME = 10;
   */
  ROLE_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: ROLE_SORT_KEY_CODE = 11;
   */
  ROLE_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(ROLE_SORT_KEY)
proto3.util.setEnumType(ROLE_SORT_KEY, "tcube.ROLE_SORT_KEY", [
  { no: 0, name: "ROLE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "ROLE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "ROLE_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "ROLE_SORT_KEY_NAME" },
  { no: 11, name: "ROLE_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the data structure of each role access on the platform
 *
 * @generated from message tcube.RoleAccess
 */
export class RoleAccess extends Message<RoleAccess> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: tcube.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * The associated Role UUID
   *
   * @generated from field: string role_uuid = 10;
   */
  roleUuid = "";

  /**
   * The menu UID (or internal code)
   *
   * @generated from field: string menu_uid = 11;
   */
  menuUid = "";

  /**
   * Denotes if the menu is accessible
   *
   * @generated from field: bool is_accessible = 12;
   */
  isAccessible = false;

  constructor(data?: PartialMessage<RoleAccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.RoleAccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 10, name: "role_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "menu_uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "is_accessible", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RoleAccess {
    return new RoleAccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RoleAccess {
    return new RoleAccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RoleAccess {
    return new RoleAccess().fromJsonString(jsonString, options);
  }

  static equals(a: RoleAccess | PlainMessage<RoleAccess> | undefined, b: RoleAccess | PlainMessage<RoleAccess> | undefined): boolean {
    return proto3.util.equals(RoleAccess, a, b);
  }
}

/**
 *
 * Describes the data structure of each role on the platform
 *
 * @generated from message tcube.Role
 */
export class Role extends Message<Role> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: tcube.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * The name of the role
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the role
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Describe the role
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * List of role accesss accesses
   *
   * @generated from field: repeated tcube.RoleAccess access_list = 13;
   */
  accessList: RoleAccess[] = [];

  constructor(data?: PartialMessage<Role>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.Role";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "access_list", kind: "message", T: RoleAccess, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Role {
    return new Role().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Role {
    return new Role().fromJsonString(jsonString, options);
  }

  static equals(a: Role | PlainMessage<Role> | undefined, b: Role | PlainMessage<Role> | undefined): boolean {
    return proto3.util.equals(Role, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of roles
 *
 * @generated from message tcube.RolesList
 */
export class RolesList extends Message<RolesList> {
  /**
   * List of roles
   *
   * @generated from field: repeated tcube.Role list = 1;
   */
  list: Role[] = [];

  constructor(data?: PartialMessage<RolesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.RolesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Role, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RolesList {
    return new RolesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RolesList {
    return new RolesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RolesList {
    return new RolesList().fromJsonString(jsonString, options);
  }

  static equals(a: RolesList | PlainMessage<RolesList> | undefined, b: RolesList | PlainMessage<RolesList> | undefined): boolean {
    return proto3.util.equals(RolesList, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.RolePaginationResp
 */
export class RolePaginationResp extends Message<RolePaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated tcube.Role payload = 3;
   */
  payload: Role[] = [];

  constructor(data?: PartialMessage<RolePaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.RolePaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Role, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RolePaginationResp {
    return new RolePaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RolePaginationResp {
    return new RolePaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RolePaginationResp {
    return new RolePaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: RolePaginationResp | PlainMessage<RolePaginationResp> | undefined, b: RolePaginationResp | PlainMessage<RolePaginationResp> | undefined): boolean {
    return proto3.util.equals(RolePaginationResp, a, b);
  }
}

/**
 *
 * Describes the necessary data structure during creation/updation of a role access
 *
 * @generated from message tcube.RolesServiceAccessCreateAndUpdateRequest
 */
export class RolesServiceAccessCreateAndUpdateRequest extends Message<RolesServiceAccessCreateAndUpdateRequest> {
  /**
   * The menu UID (or internal code)
   *
   * @generated from field: string menu_uid = 11;
   */
  menuUid = "";

  /**
   * Denotes if the menu is accessible
   *
   * @generated from field: bool is_accessible = 12;
   */
  isAccessible = false;

  constructor(data?: PartialMessage<RolesServiceAccessCreateAndUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.RolesServiceAccessCreateAndUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "menu_uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "is_accessible", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RolesServiceAccessCreateAndUpdateRequest {
    return new RolesServiceAccessCreateAndUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RolesServiceAccessCreateAndUpdateRequest {
    return new RolesServiceAccessCreateAndUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RolesServiceAccessCreateAndUpdateRequest {
    return new RolesServiceAccessCreateAndUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RolesServiceAccessCreateAndUpdateRequest | PlainMessage<RolesServiceAccessCreateAndUpdateRequest> | undefined, b: RolesServiceAccessCreateAndUpdateRequest | PlainMessage<RolesServiceAccessCreateAndUpdateRequest> | undefined): boolean {
    return proto3.util.equals(RolesServiceAccessCreateAndUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the necessary data structure during creation of a role
 *
 * @generated from message tcube.RolesServiceCreateRequest
 */
export class RolesServiceCreateRequest extends Message<RolesServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The name of the role
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the role
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Describe the role
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The list of accessible menu UIDs
   *
   * @generated from field: repeated tcube.RolesServiceAccessCreateAndUpdateRequest access_list = 13;
   */
  accessList: RolesServiceAccessCreateAndUpdateRequest[] = [];

  constructor(data?: PartialMessage<RolesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.RolesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "access_list", kind: "message", T: RolesServiceAccessCreateAndUpdateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RolesServiceCreateRequest {
    return new RolesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RolesServiceCreateRequest {
    return new RolesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RolesServiceCreateRequest {
    return new RolesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RolesServiceCreateRequest | PlainMessage<RolesServiceCreateRequest> | undefined, b: RolesServiceCreateRequest | PlainMessage<RolesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(RolesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a role
 *
 * @generated from message tcube.RolesServiceUpdateRequest
 */
export class RolesServiceUpdateRequest extends Message<RolesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * The name of the role
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the role
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Describe the role
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The list of accessible menu UIDs
   *
   * @generated from field: repeated tcube.RolesServiceAccessCreateAndUpdateRequest access_list = 13;
   */
  accessList: RolesServiceAccessCreateAndUpdateRequest[] = [];

  constructor(data?: PartialMessage<RolesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.RolesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "access_list", kind: "message", T: RolesServiceAccessCreateAndUpdateRequest, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RolesServiceUpdateRequest {
    return new RolesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RolesServiceUpdateRequest {
    return new RolesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RolesServiceUpdateRequest {
    return new RolesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RolesServiceUpdateRequest | PlainMessage<RolesServiceUpdateRequest> | undefined, b: RolesServiceUpdateRequest | PlainMessage<RolesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(RolesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.RolesServicePaginationReq
 */
export class RolesServicePaginationReq extends Message<RolesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.ROLE_SORT_KEY sort_key = 5;
   */
  sortKey = ROLE_SORT_KEY.ROLE_SORT_KEY_ID_UNSPECIFIED;

  constructor(data?: PartialMessage<RolesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.RolesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ROLE_SORT_KEY) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RolesServicePaginationReq {
    return new RolesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RolesServicePaginationReq {
    return new RolesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RolesServicePaginationReq {
    return new RolesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: RolesServicePaginationReq | PlainMessage<RolesServicePaginationReq> | undefined, b: RolesServicePaginationReq | PlainMessage<RolesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(RolesServicePaginationReq, a, b);
  }
}

