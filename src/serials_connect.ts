// @generated by protoc-gen-connect-es v0.12.0 with parameter "target=ts"
// @generated from file serials.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { Serial, SerialActivitiesList, SerialMetadata, SerialPaginationResp, SerialsList, SerialsServiceAnalyticsGroupByStateRequest, SerialsServiceCommissionBulkRequest, SerialsServiceFilterReq, SerialsServicePaginationReq, SerialsServiceRegisterActivityRequest, SerialsServiceSearchAllReq, SerialsServiceStateAndCountMessageList, ViewSerialActivitiesRequest } from "./serials_pb.js";
import { ActiveInEntityRequest, CountInEntityRequest, CountResponse, Identifier, IdentifierWithUserComment, ImageResponse, SearchKeyRequest, StringResponse, URLResponse } from "./base_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 *
 * Describes the methods applicable on each serial
 *
 * Create a list of serials and return the Identifiers
 * rpc Create (SerialsServiceCreateRequest) returns (IdentifierList);
 * // Update a serial
 * rpc Update (SerialsServiceUpdateRequest) returns (Serial);
 *
 * @generated from service scanswift.SerialsService
 */
export const SerialsService = {
  typeName: "scanswift.SerialsService",
  methods: {
    /**
     * Commission a serial
     *
     * @generated from rpc scanswift.SerialsService.Commission
     */
    commission: {
      name: "Commission",
      I: SerialsServiceRegisterActivityRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Decommission a serial
     *
     * @generated from rpc scanswift.SerialsService.Decommission
     */
    decommission: {
      name: "Decommission",
      I: SerialsServiceRegisterActivityRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Commission serials in bulk and return the count of the all the commissioned serials
     *
     * @generated from rpc scanswift.SerialsService.CommissionBulk
     */
    commissionBulk: {
      name: "CommissionBulk",
      I: SerialsServiceCommissionBulkRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Decommission serials in bulk and return the count of the all the decommissioned serials
     *
     * @generated from rpc scanswift.SerialsService.DecommissionBulk
     */
    decommissionBulk: {
      name: "DecommissionBulk",
      I: SerialsServiceCommissionBulkRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify a serial
     *
     * @generated from rpc scanswift.SerialsService.Verify
     */
    verify: {
      name: "Verify",
      I: SerialsServiceRegisterActivityRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Archive the serial
     *
     * @generated from rpc scanswift.SerialsService.Archive
     */
    archive: {
      name: "Archive",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Restore the serial
     *
     * @generated from rpc scanswift.SerialsService.Restore
     */
    restore: {
      name: "Restore",
      I: IdentifierWithUserComment,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * Recall the serial
     *
     * @generated from rpc scanswift.SerialsService.Recall
     */
    recall: {
      name: "Recall",
      I: SerialsServiceRegisterActivityRequest,
      O: Identifier,
      kind: MethodKind.Unary,
    },
    /**
     * View by UUID
     *
     * @generated from rpc scanswift.SerialsService.ViewByUUID
     */
    viewByUUID: {
      name: "ViewByUUID",
      I: Identifier,
      O: Serial,
      kind: MethodKind.Unary,
    },
    /**
     * View by Code
     *
     * @generated from rpc scanswift.SerialsService.ViewByCode
     */
    viewByCode: {
      name: "ViewByCode",
      I: SearchKeyRequest,
      O: Serial,
      kind: MethodKind.Unary,
    },
    /**
     * View the metadata using the serial code
     *
     * @generated from rpc scanswift.SerialsService.ViewMetadataByCode
     */
    viewMetadataByCode: {
      name: "ViewMetadataByCode",
      I: SearchKeyRequest,
      O: SerialMetadata,
      kind: MethodKind.Unary,
    },
    /**
     * View all serials
     *
     * @generated from rpc scanswift.SerialsService.ViewAll
     */
    viewAll: {
      name: "ViewAll",
      I: ActiveInEntityRequest,
      O: SerialsList,
      kind: MethodKind.Unary,
    },
    /**
     * View serials with pagination
     *
     * @generated from rpc scanswift.SerialsService.ViewWithPagination
     */
    viewWithPagination: {
      name: "ViewWithPagination",
      I: SerialsServicePaginationReq,
      O: SerialPaginationResp,
      kind: MethodKind.Unary,
    },
    /**
     * View as QR code
     *
     * @generated from rpc scanswift.SerialsService.ViewAsQR
     */
    viewAsQR: {
      name: "ViewAsQR",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View as DataMatrix
     *
     * @generated from rpc scanswift.SerialsService.ViewAsDataMatrix
     */
    viewAsDataMatrix: {
      name: "ViewAsDataMatrix",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View as Image on the basis of the product's configuration
     *
     * @generated from rpc scanswift.SerialsService.ViewAsImage
     */
    viewAsImage: {
      name: "ViewAsImage",
      I: Identifier,
      O: ImageResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View the serial's URI
     *
     * @generated from rpc scanswift.SerialsService.ViewAsURI
     */
    viewAsURI: {
      name: "ViewAsURI",
      I: Identifier,
      O: URLResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View the string that can be used to render the QR code on POS machines
     *
     * @generated from rpc scanswift.SerialsService.ViewPrintableString
     */
    viewPrintableString: {
      name: "ViewPrintableString",
      I: Identifier,
      O: StringResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View serial activities
     *
     * @generated from rpc scanswift.SerialsService.ViewSerialActivities
     */
    viewSerialActivities: {
      name: "ViewSerialActivities",
      I: ViewSerialActivitiesRequest,
      O: SerialActivitiesList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given search key
     *
     * @generated from rpc scanswift.SerialsService.SearchAll
     */
    searchAll: {
      name: "SearchAll",
      I: SerialsServiceSearchAllReq,
      O: SerialsList,
      kind: MethodKind.Unary,
    },
    /**
     * View all that match the given filter criteria
     *
     * @generated from rpc scanswift.SerialsService.Filter
     */
    filter: {
      name: "Filter",
      I: SerialsServiceFilterReq,
      O: SerialsList,
      kind: MethodKind.Unary,
    },
    /**
     * Count
     *
     * @generated from rpc scanswift.SerialsService.Count
     */
    count: {
      name: "Count",
      I: CountInEntityRequest,
      O: CountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * View counts of serials in various states
     *
     * @generated from rpc scanswift.SerialsService.CountsInStates
     */
    countsInStates: {
      name: "CountsInStates",
      I: SerialsServiceAnalyticsGroupByStateRequest,
      O: SerialsServiceStateAndCountMessageList,
      kind: MethodKind.Unary,
    },
  }
} as const;

