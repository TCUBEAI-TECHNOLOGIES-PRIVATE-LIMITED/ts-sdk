// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file serials.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";
import { Product } from "./products_pb.js";
import { Location } from "./locations_pb.js";
import { Entity } from "./entities_pb.js";

/**
 *
 * Describes the possible states that a serial can be in
 *
 * @generated from enum scanswift.SERIAL_STATE
 */
export enum SERIAL_STATE {
  /**
   * Used only for filter & search requests
   *
   * @generated from enum value: SERIAL_STATE_ANY_UNSPECIFIED = 0;
   */
  SERIAL_STATE_ANY_UNSPECIFIED = 0,

  /**
   * The default state of a serial, which denotes that the serial is available to be commissioned
   *
   * @generated from enum value: SERIAL_STATE_AVAILABLE = 1;
   */
  SERIAL_STATE_AVAILABLE = 1,

  /**
   * Denotes that the serial has been commissioned
   *
   * @generated from enum value: SERIAL_STATE_COMMISSIONED = 2;
   */
  SERIAL_STATE_COMMISSIONED = 2,

  /**
   * Denotes that the serial has been decommissioned
   *
   * @generated from enum value: SERIAL_STATE_DECOMMISSIONED = 3;
   */
  SERIAL_STATE_DECOMMISSIONED = 3,

  /**
   * Denotes that the serial has been recalled
   *
   * @generated from enum value: SERIAL_STATE_RECALLED = 4;
   */
  SERIAL_STATE_RECALLED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(SERIAL_STATE)
proto3.util.setEnumType(SERIAL_STATE, "scanswift.SERIAL_STATE", [
  { no: 0, name: "SERIAL_STATE_ANY_UNSPECIFIED" },
  { no: 1, name: "SERIAL_STATE_AVAILABLE" },
  { no: 2, name: "SERIAL_STATE_COMMISSIONED" },
  { no: 3, name: "SERIAL_STATE_DECOMMISSIONED" },
  { no: 4, name: "SERIAL_STATE_RECALLED" },
]);

/**
 *
 * Describes the possible values of activity for a specific serial
 *
 * @generated from enum scanswift.SERIAL_ACTIVITY
 */
export enum SERIAL_ACTIVITY {
  /**
   * Used only for filter & search requests
   *
   * @generated from enum value: SERIAL_ACTIVITY_ANY_UNSPECIFIED = 0;
   */
  SERIAL_ACTIVITY_ANY_UNSPECIFIED = 0,

  /**
   * Denotes that the serial has been verified
   *
   * @generated from enum value: SERIAL_ACTIVITY_VERIFIED = 1;
   */
  SERIAL_ACTIVITY_VERIFIED = 1,

  /**
   * Denotes that the serial has been commissioned
   *
   * @generated from enum value: SERIAL_ACTIVITY_COMMISSIONED = 2;
   */
  SERIAL_ACTIVITY_COMMISSIONED = 2,

  /**
   * Denotes that the serial has been decommissioned
   *
   * @generated from enum value: SERIAL_ACTIVITY_DECOMMISSIONED = 3;
   */
  SERIAL_ACTIVITY_DECOMMISSIONED = 3,

  /**
   * Denotes that the serial has been recalled
   *
   * @generated from enum value: SERIAL_ACTIVITY_RECALLED = 4;
   */
  SERIAL_ACTIVITY_RECALLED = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(SERIAL_ACTIVITY)
proto3.util.setEnumType(SERIAL_ACTIVITY, "scanswift.SERIAL_ACTIVITY", [
  { no: 0, name: "SERIAL_ACTIVITY_ANY_UNSPECIFIED" },
  { no: 1, name: "SERIAL_ACTIVITY_VERIFIED" },
  { no: 2, name: "SERIAL_ACTIVITY_COMMISSIONED" },
  { no: 3, name: "SERIAL_ACTIVITY_DECOMMISSIONED" },
  { no: 4, name: "SERIAL_ACTIVITY_RECALLED" },
]);

/**
 *
 * Describes the available sort keys for retrieving serials
 *
 * @generated from enum scanswift.SERIAL_SORT_KEY
 */
export enum SERIAL_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: SERIAL_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  SERIAL_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: SERIAL_SORT_KEY_CREATED_AT = 1;
   */
  SERIAL_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: SERIAL_SORT_KEY_MODIFIED_AT = 2;
   */
  SERIAL_SORT_KEY_MODIFIED_AT = 2,

  /**
   * // Fetch ordered results by batch number
   * SERIAL_SORT_KEY_BATCH_NUMBER = 10;
   * Fetch ordered results by code
   *
   * @generated from enum value: SERIAL_SORT_KEY_CODE = 11;
   */
  SERIAL_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(SERIAL_SORT_KEY)
proto3.util.setEnumType(SERIAL_SORT_KEY, "scanswift.SERIAL_SORT_KEY", [
  { no: 0, name: "SERIAL_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "SERIAL_SORT_KEY_CREATED_AT" },
  { no: 2, name: "SERIAL_SORT_KEY_MODIFIED_AT" },
  { no: 11, name: "SERIAL_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the payload that is used to either commission, decommission or verify a serial
 *
 * @generated from message scanswift.SerialsServiceRegisterActivityRequest
 */
export class SerialsServiceRegisterActivityRequest extends Message<SerialsServiceRegisterActivityRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the zone
   *
   * @generated from field: string zone_uuid = 10;
   */
  zoneUuid = "";

  /**
   * UUID of the serial
   *
   * @generated from field: string serial_uuid = 11;
   */
  serialUuid = "";

  /**
   * The latitude of the location where this activity was registered
   *
   * @generated from field: double latitude = 13;
   */
  latitude = 0;

  /**
   * The longitude of the location where this activity was registered
   *
   * @generated from field: double longitude = 14;
   */
  longitude = 0;

  constructor(data?: PartialMessage<SerialsServiceRegisterActivityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServiceRegisterActivityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServiceRegisterActivityRequest {
    return new SerialsServiceRegisterActivityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServiceRegisterActivityRequest {
    return new SerialsServiceRegisterActivityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServiceRegisterActivityRequest {
    return new SerialsServiceRegisterActivityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServiceRegisterActivityRequest | PlainMessage<SerialsServiceRegisterActivityRequest> | undefined, b: SerialsServiceRegisterActivityRequest | PlainMessage<SerialsServiceRegisterActivityRequest> | undefined): boolean {
    return proto3.util.equals(SerialsServiceRegisterActivityRequest, a, b);
  }
}

/**
 * @generated from message scanswift.SerialsServiceCommissionBulkRequest
 */
export class SerialsServiceCommissionBulkRequest extends Message<SerialsServiceCommissionBulkRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the zone
   *
   * @generated from field: string zone_uuid = 10;
   */
  zoneUuid = "";

  /**
   * The latitude of the location where this activity was registered
   *
   * @generated from field: double latitude = 13;
   */
  latitude = 0;

  /**
   * The longitude of the location where this activity was registered
   *
   * @generated from field: double longitude = 14;
   */
  longitude = 0;

  /**
   * List of serial codes
   *
   * @generated from field: repeated scanswift.SerialsServiceSerialCodes list = 20;
   */
  list: SerialsServiceSerialCodes[] = [];

  constructor(data?: PartialMessage<SerialsServiceCommissionBulkRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServiceCommissionBulkRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 20, name: "list", kind: "message", T: SerialsServiceSerialCodes, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServiceCommissionBulkRequest {
    return new SerialsServiceCommissionBulkRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServiceCommissionBulkRequest {
    return new SerialsServiceCommissionBulkRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServiceCommissionBulkRequest {
    return new SerialsServiceCommissionBulkRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServiceCommissionBulkRequest | PlainMessage<SerialsServiceCommissionBulkRequest> | undefined, b: SerialsServiceCommissionBulkRequest | PlainMessage<SerialsServiceCommissionBulkRequest> | undefined): boolean {
    return proto3.util.equals(SerialsServiceCommissionBulkRequest, a, b);
  }
}

/**
 * @generated from message scanswift.SerialsServiceSerialCodes
 */
export class SerialsServiceSerialCodes extends Message<SerialsServiceSerialCodes> {
  /**
   * Serial code
   *
   * @generated from field: string serial_code = 11;
   */
  serialCode = "";

  constructor(data?: PartialMessage<SerialsServiceSerialCodes>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServiceSerialCodes";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 11, name: "serial_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServiceSerialCodes {
    return new SerialsServiceSerialCodes().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServiceSerialCodes {
    return new SerialsServiceSerialCodes().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServiceSerialCodes {
    return new SerialsServiceSerialCodes().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServiceSerialCodes | PlainMessage<SerialsServiceSerialCodes> | undefined, b: SerialsServiceSerialCodes | PlainMessage<SerialsServiceSerialCodes> | undefined): boolean {
    return proto3.util.equals(SerialsServiceSerialCodes, a, b);
  }
}

/**
 *
 * Describes the necessary data structure during creation of a serial
 *
 * @generated from message scanswift.SerialsServiceCreateRequest
 */
export class SerialsServiceCreateRequest extends Message<SerialsServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * UUID of the batch
   *
   * @generated from field: string batch_uuid = 11;
   */
  batchUuid = "";

  /**
   * The number of serials that need to be created
   *
   * @generated from field: int64 quantity = 20;
   */
  quantity = protoInt64.zero;

  constructor(data?: PartialMessage<SerialsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "quantity", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServiceCreateRequest {
    return new SerialsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServiceCreateRequest {
    return new SerialsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServiceCreateRequest {
    return new SerialsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServiceCreateRequest | PlainMessage<SerialsServiceCreateRequest> | undefined, b: SerialsServiceCreateRequest | PlainMessage<SerialsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(SerialsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each serial on the platform
 *
 * @generated from message scanswift.Serial
 */
export class Serial extends Message<Serial> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: scanswift.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * UUID of the batch
   *
   * @generated from field: string batch_uuid = 11;
   */
  batchUuid = "";

  /**
   * Code of the serial
   *
   * @generated from field: string code = 12;
   */
  code = "";

  /**
   * Stores the number of times that this serial has already been downloaded
   *
   * @generated from field: int64 download_count = 13;
   */
  downloadCount = protoInt64.zero;

  /**
   * Stores the timestamp of when the serial was commissioned
   *
   * @generated from field: int64 commissioned_at = 14;
   */
  commissionedAt = protoInt64.zero;

  /**
   * The state of the serial
   *
   * @generated from field: scanswift.SERIAL_STATE state = 20;
   */
  state = SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<Serial>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.Serial";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "download_count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "commissioned_at", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "state", kind: "enum", T: proto3.getEnumType(SERIAL_STATE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Serial {
    return new Serial().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Serial {
    return new Serial().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Serial {
    return new Serial().fromJsonString(jsonString, options);
  }

  static equals(a: Serial | PlainMessage<Serial> | undefined, b: Serial | PlainMessage<Serial> | undefined): boolean {
    return proto3.util.equals(Serial, a, b);
  }
}

/**
 *
 * Describes the data structure of each serial with its relevant metadata
 *
 * @generated from message scanswift.SerialMetadata
 */
export class SerialMetadata extends Message<SerialMetadata> {
  /**
   * Stores the serial info
   *
   * @generated from field: scanswift.Serial serial = 1;
   */
  serial?: Serial;

  /**
   * Stores the expiry timestamp of the serial
   *
   * @generated from field: int64 expiry_timestamp = 2;
   */
  expiryTimestamp = protoInt64.zero;

  /**
   * Stores the string that will be used to generate the QR code
   *
   * @generated from field: string qr_string = 3;
   */
  qrString = "";

  /**
   * Stores the product info
   *
   * @generated from field: scanswift.Product product = 10;
   */
  product?: Product;

  /**
   * Stores the batch name
   *
   * @generated from field: string batch_name = 20;
   */
  batchName = "";

  /**
   * Stores the batch code
   *
   * @generated from field: string batch_code = 21;
   */
  batchCode = "";

  /**
   * Stores the location info
   *
   * @generated from field: scanswift.Location location = 30;
   */
  location?: Location;

  /**
   * Stores the entity info
   *
   * @generated from field: scanswift.Entity entity = 40;
   */
  entity?: Entity;

  constructor(data?: PartialMessage<SerialMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "serial", kind: "message", T: Serial },
    { no: 2, name: "expiry_timestamp", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "qr_string", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product", kind: "message", T: Product },
    { no: 20, name: "batch_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "batch_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "location", kind: "message", T: Location },
    { no: 40, name: "entity", kind: "message", T: Entity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialMetadata {
    return new SerialMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialMetadata {
    return new SerialMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialMetadata {
    return new SerialMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: SerialMetadata | PlainMessage<SerialMetadata> | undefined, b: SerialMetadata | PlainMessage<SerialMetadata> | undefined): boolean {
    return proto3.util.equals(SerialMetadata, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of serials
 *
 * @generated from message scanswift.SerialsList
 */
export class SerialsList extends Message<SerialsList> {
  /**
   * List of serials
   *
   * @generated from field: repeated scanswift.Serial list = 1;
   */
  list: Serial[] = [];

  constructor(data?: PartialMessage<SerialsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Serial, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsList {
    return new SerialsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsList {
    return new SerialsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsList {
    return new SerialsList().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsList | PlainMessage<SerialsList> | undefined, b: SerialsList | PlainMessage<SerialsList> | undefined): boolean {
    return proto3.util.equals(SerialsList, a, b);
  }
}

/**
 *
 * Describes the data structure of each serial activity
 *
 * @generated from message scanswift.SerialActivity
 */
export class SerialActivity extends Message<SerialActivity> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: scanswift.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the zone
   *
   * @generated from field: string zone_uuid = 10;
   */
  zoneUuid = "";

  /**
   * UUID of the serial
   *
   * @generated from field: string serial_uuid = 11;
   */
  serialUuid = "";

  /**
   * The registered activity
   *
   * @generated from field: scanswift.SERIAL_ACTIVITY activity = 12;
   */
  activity = SERIAL_ACTIVITY.SERIAL_ACTIVITY_ANY_UNSPECIFIED;

  /**
   * The latitude of the location where this activity was registered
   *
   * @generated from field: double latitude = 13;
   */
  latitude = 0;

  /**
   * The longitude of the location where this activity was registered
   *
   * @generated from field: double longitude = 14;
   */
  longitude = 0;

  constructor(data?: PartialMessage<SerialActivity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialActivity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "zone_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "activity", kind: "enum", T: proto3.getEnumType(SERIAL_ACTIVITY) },
    { no: 13, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialActivity {
    return new SerialActivity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialActivity {
    return new SerialActivity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialActivity {
    return new SerialActivity().fromJsonString(jsonString, options);
  }

  static equals(a: SerialActivity | PlainMessage<SerialActivity> | undefined, b: SerialActivity | PlainMessage<SerialActivity> | undefined): boolean {
    return proto3.util.equals(SerialActivity, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of serial activities
 *
 * @generated from message scanswift.SerialActivitiesList
 */
export class SerialActivitiesList extends Message<SerialActivitiesList> {
  /**
   * List of serial activities
   *
   * @generated from field: repeated scanswift.SerialActivity list = 1;
   */
  list: SerialActivity[] = [];

  constructor(data?: PartialMessage<SerialActivitiesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialActivitiesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SerialActivity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialActivitiesList {
    return new SerialActivitiesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialActivitiesList {
    return new SerialActivitiesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialActivitiesList {
    return new SerialActivitiesList().fromJsonString(jsonString, options);
  }

  static equals(a: SerialActivitiesList | PlainMessage<SerialActivitiesList> | undefined, b: SerialActivitiesList | PlainMessage<SerialActivitiesList> | undefined): boolean {
    return proto3.util.equals(SerialActivitiesList, a, b);
  }
}

/**
 *
 * Describes the payload required to retrieve all the activities related to a serial
 *
 * @generated from message scanswift.ViewSerialActivitiesRequest
 */
export class ViewSerialActivitiesRequest extends Message<ViewSerialActivitiesRequest> {
  /**
   * Denotes if only active records need to be returned
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * Stores the entity UUID and limits the query to the appropriate entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the serial
   *
   * @generated from field: string serial_uuid = 10;
   */
  serialUuid = "";

  constructor(data?: PartialMessage<ViewSerialActivitiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.ViewSerialActivitiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ViewSerialActivitiesRequest {
    return new ViewSerialActivitiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ViewSerialActivitiesRequest {
    return new ViewSerialActivitiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ViewSerialActivitiesRequest {
    return new ViewSerialActivitiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ViewSerialActivitiesRequest | PlainMessage<ViewSerialActivitiesRequest> | undefined, b: ViewSerialActivitiesRequest | PlainMessage<ViewSerialActivitiesRequest> | undefined): boolean {
    return proto3.util.equals(ViewSerialActivitiesRequest, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message scanswift.SerialsServicePaginationReq
 */
export class SerialsServicePaginationReq extends Message<SerialsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SERIAL_SORT_KEY sort_key = 5;
   */
  sortKey = SERIAL_SORT_KEY.SERIAL_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<SerialsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SERIAL_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServicePaginationReq {
    return new SerialsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServicePaginationReq {
    return new SerialsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServicePaginationReq {
    return new SerialsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServicePaginationReq | PlainMessage<SerialsServicePaginationReq> | undefined, b: SerialsServicePaginationReq | PlainMessage<SerialsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(SerialsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message scanswift.SerialPaginationResp
 */
export class SerialPaginationResp extends Message<SerialPaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated scanswift.Serial payload = 3;
   */
  payload: Serial[] = [];

  constructor(data?: PartialMessage<SerialPaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialPaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Serial, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialPaginationResp {
    return new SerialPaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialPaginationResp {
    return new SerialPaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialPaginationResp {
    return new SerialPaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: SerialPaginationResp | PlainMessage<SerialPaginationResp> | undefined, b: SerialPaginationResp | PlainMessage<SerialPaginationResp> | undefined): boolean {
    return proto3.util.equals(SerialPaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message scanswift.SerialsServiceFilterReq
 */
export class SerialsServiceFilterReq extends Message<SerialsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SERIAL_SORT_KEY sort_key = 5;
   */
  sortKey = SERIAL_SORT_KEY.SERIAL_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * UUID of the batch
   *
   * @generated from field: string batch_uuid = 11;
   */
  batchUuid = "";

  /**
   * Code of the serial
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The state of the serial
   *
   * @generated from field: scanswift.SERIAL_STATE state = 30;
   */
  state = SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<SerialsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SERIAL_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "state", kind: "enum", T: proto3.getEnumType(SERIAL_STATE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServiceFilterReq {
    return new SerialsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServiceFilterReq {
    return new SerialsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServiceFilterReq {
    return new SerialsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServiceFilterReq | PlainMessage<SerialsServiceFilterReq> | undefined, b: SerialsServiceFilterReq | PlainMessage<SerialsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(SerialsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message scanswift.SerialsServiceSearchAllReq
 */
export class SerialsServiceSearchAllReq extends Message<SerialsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SERIAL_SORT_KEY sort_key = 5;
   */
  sortKey = SERIAL_SORT_KEY.SERIAL_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * UUID of the batch
   *
   * @generated from field: string batch_uuid = 11;
   */
  batchUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 12;
   */
  searchKey = "";

  /**
   * The state of the serial
   *
   * @generated from field: scanswift.SERIAL_STATE state = 30;
   */
  state = SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<SerialsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SERIAL_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 30, name: "state", kind: "enum", T: proto3.getEnumType(SERIAL_STATE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServiceSearchAllReq {
    return new SerialsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServiceSearchAllReq {
    return new SerialsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServiceSearchAllReq {
    return new SerialsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServiceSearchAllReq | PlainMessage<SerialsServiceSearchAllReq> | undefined, b: SerialsServiceSearchAllReq | PlainMessage<SerialsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(SerialsServiceSearchAllReq, a, b);
  }
}

/**
 *
 * Describes the request payload for retrieving counts of serials in various states
 *
 * @generated from message scanswift.SerialsServiceAnalyticsGroupByStateRequest
 */
export class SerialsServiceAnalyticsGroupByStateRequest extends Message<SerialsServiceAnalyticsGroupByStateRequest> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * UUID of the batch
   *
   * @generated from field: string batch_uuid = 11;
   */
  batchUuid = "";

  constructor(data?: PartialMessage<SerialsServiceAnalyticsGroupByStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServiceAnalyticsGroupByStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "batch_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServiceAnalyticsGroupByStateRequest {
    return new SerialsServiceAnalyticsGroupByStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServiceAnalyticsGroupByStateRequest {
    return new SerialsServiceAnalyticsGroupByStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServiceAnalyticsGroupByStateRequest {
    return new SerialsServiceAnalyticsGroupByStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServiceAnalyticsGroupByStateRequest | PlainMessage<SerialsServiceAnalyticsGroupByStateRequest> | undefined, b: SerialsServiceAnalyticsGroupByStateRequest | PlainMessage<SerialsServiceAnalyticsGroupByStateRequest> | undefined): boolean {
    return proto3.util.equals(SerialsServiceAnalyticsGroupByStateRequest, a, b);
  }
}

/**
 *
 * Describes the response that consists of the list of all the states and the counts of serials in the respective states
 *
 * @generated from message scanswift.SerialsServiceStateAndCountMessageList
 */
export class SerialsServiceStateAndCountMessageList extends Message<SerialsServiceStateAndCountMessageList> {
  /**
   * The list of states and the counts
   *
   * @generated from field: repeated scanswift.SerialsServiceStateAndCountMessage list = 1;
   */
  list: SerialsServiceStateAndCountMessage[] = [];

  constructor(data?: PartialMessage<SerialsServiceStateAndCountMessageList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServiceStateAndCountMessageList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SerialsServiceStateAndCountMessage, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServiceStateAndCountMessageList {
    return new SerialsServiceStateAndCountMessageList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServiceStateAndCountMessageList {
    return new SerialsServiceStateAndCountMessageList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServiceStateAndCountMessageList {
    return new SerialsServiceStateAndCountMessageList().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServiceStateAndCountMessageList | PlainMessage<SerialsServiceStateAndCountMessageList> | undefined, b: SerialsServiceStateAndCountMessageList | PlainMessage<SerialsServiceStateAndCountMessageList> | undefined): boolean {
    return proto3.util.equals(SerialsServiceStateAndCountMessageList, a, b);
  }
}

/**
 *
 * Describes the response that consists of a state and the count of serials within that state
 *
 * @generated from message scanswift.SerialsServiceStateAndCountMessage
 */
export class SerialsServiceStateAndCountMessage extends Message<SerialsServiceStateAndCountMessage> {
  /**
   * The state of the serial
   *
   * @generated from field: scanswift.SERIAL_STATE state = 10;
   */
  state = SERIAL_STATE.SERIAL_STATE_ANY_UNSPECIFIED;

  /**
   * The number of serials within this state
   *
   * @generated from field: int64 count = 11;
   */
  count = protoInt64.zero;

  constructor(data?: PartialMessage<SerialsServiceStateAndCountMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.SerialsServiceStateAndCountMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 10, name: "state", kind: "enum", T: proto3.getEnumType(SERIAL_STATE) },
    { no: 11, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsServiceStateAndCountMessage {
    return new SerialsServiceStateAndCountMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsServiceStateAndCountMessage {
    return new SerialsServiceStateAndCountMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsServiceStateAndCountMessage {
    return new SerialsServiceStateAndCountMessage().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsServiceStateAndCountMessage | PlainMessage<SerialsServiceStateAndCountMessage> | undefined, b: SerialsServiceStateAndCountMessage | PlainMessage<SerialsServiceStateAndCountMessage> | undefined): boolean {
    return proto3.util.equals(SerialsServiceStateAndCountMessage, a, b);
  }
}

