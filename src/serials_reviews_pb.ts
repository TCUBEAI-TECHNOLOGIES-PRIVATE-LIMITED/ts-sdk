// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file serials_reviews.proto (package tcube, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";
import { INFERRED_FROM } from "./scans_pb.js";

/**
 *
 * Describes the available sort keys for retrieving serials reviews
 *
 * @generated from enum tcube.SERIAL_REVIEW_SORT_KEY
 */
export enum SERIAL_REVIEW_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: SERIAL_REVIEW_SORT_KEY_CREATED_AT = 1;
   */
  SERIAL_REVIEW_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: SERIAL_REVIEW_SORT_KEY_MODIFIED_AT = 2;
   */
  SERIAL_REVIEW_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: SERIAL_REVIEW_SORT_KEY_NAME = 10;
   */
  SERIAL_REVIEW_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by rating
   *
   * @generated from enum value: SERIAL_REVIEW_SORT_KEY_RATING = 11;
   */
  SERIAL_REVIEW_SORT_KEY_RATING = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(SERIAL_REVIEW_SORT_KEY)
proto3.util.setEnumType(SERIAL_REVIEW_SORT_KEY, "tcube.SERIAL_REVIEW_SORT_KEY", [
  { no: 0, name: "SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "SERIAL_REVIEW_SORT_KEY_CREATED_AT" },
  { no: 2, name: "SERIAL_REVIEW_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "SERIAL_REVIEW_SORT_KEY_NAME" },
  { no: 11, name: "SERIAL_REVIEW_SORT_KEY_RATING" },
]);

/**
 *
 * Describes the necessary data structure during creation of a serial review
 *
 * @generated from message tcube.SerialsReviewsServiceCreateRequest
 */
export class SerialsReviewsServiceCreateRequest extends Message<SerialsReviewsServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the serial
   *
   * @generated from field: string serial_uuid = 10;
   */
  serialUuid = "";

  /**
   * The name of the person
   *
   * @generated from field: string name = 12;
   */
  name = "";

  /**
   * The rating given by the customer (between 1 and 5)
   *
   * @generated from field: int64 rating = 13;
   */
  rating = protoInt64.zero;

  /**
   * Optional content of the review
   *
   * @generated from field: string content = 14;
   */
  content = "";

  constructor(data?: PartialMessage<SerialsReviewsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.SerialsReviewsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "rating", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsReviewsServiceCreateRequest {
    return new SerialsReviewsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsReviewsServiceCreateRequest {
    return new SerialsReviewsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsReviewsServiceCreateRequest {
    return new SerialsReviewsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsReviewsServiceCreateRequest | PlainMessage<SerialsReviewsServiceCreateRequest> | undefined, b: SerialsReviewsServiceCreateRequest | PlainMessage<SerialsReviewsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(SerialsReviewsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a serial review
 *
 * @generated from message tcube.SerialsReviewsServiceUpdateRequest
 */
export class SerialsReviewsServiceUpdateRequest extends Message<SerialsReviewsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * The name of the person
   *
   * @generated from field: string name = 12;
   */
  name = "";

  /**
   * The rating given by the customer (between 1 and 5)
   *
   * @generated from field: int64 rating = 13;
   */
  rating = protoInt64.zero;

  /**
   * Optional content of the review
   *
   * @generated from field: string content = 14;
   */
  content = "";

  constructor(data?: PartialMessage<SerialsReviewsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.SerialsReviewsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "rating", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsReviewsServiceUpdateRequest {
    return new SerialsReviewsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsReviewsServiceUpdateRequest {
    return new SerialsReviewsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsReviewsServiceUpdateRequest {
    return new SerialsReviewsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsReviewsServiceUpdateRequest | PlainMessage<SerialsReviewsServiceUpdateRequest> | undefined, b: SerialsReviewsServiceUpdateRequest | PlainMessage<SerialsReviewsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(SerialsReviewsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each serial review on the platform
 *
 * @generated from message tcube.SerialReview
 */
export class SerialReview extends Message<SerialReview> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: tcube.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the serial
   *
   * @generated from field: string serial_uuid = 10;
   */
  serialUuid = "";

  /**
   * UUID of the associated product
   *
   * @generated from field: string product_uuid = 11;
   */
  productUuid = "";

  /**
   * The name of the person
   *
   * @generated from field: string name = 12;
   */
  name = "";

  /**
   * The rating given by the customer (between 1 and 5)
   *
   * @generated from field: int64 rating = 13;
   */
  rating = protoInt64.zero;

  /**
   * Optional content of the review
   *
   * @generated from field: string content = 14;
   */
  content = "";

  /**
   * The latitude of the location
   *
   * @generated from field: double latitude = 21;
   */
  latitude = 0;

  /**
   * The longitude of the location
   *
   * @generated from field: double longitude = 22;
   */
  longitude = 0;

  /**
   * Stores if the location has been inferred from IP or from user provided geocoordinates
   *
   * @generated from field: tcube.INFERRED_FROM inferred_from = 23;
   */
  inferredFrom = INFERRED_FROM.INFERRED_FROM_IP_UNSPECIFIED;

  constructor(data?: PartialMessage<SerialReview>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.SerialReview";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "rating", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "latitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 22, name: "longitude", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 23, name: "inferred_from", kind: "enum", T: proto3.getEnumType(INFERRED_FROM) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialReview {
    return new SerialReview().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialReview {
    return new SerialReview().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialReview {
    return new SerialReview().fromJsonString(jsonString, options);
  }

  static equals(a: SerialReview | PlainMessage<SerialReview> | undefined, b: SerialReview | PlainMessage<SerialReview> | undefined): boolean {
    return proto3.util.equals(SerialReview, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of serials reviews
 *
 * @generated from message tcube.SerialsReviewsList
 */
export class SerialsReviewsList extends Message<SerialsReviewsList> {
  /**
   * List of serials reviews
   *
   * @generated from field: repeated tcube.SerialReview list = 1;
   */
  list: SerialReview[] = [];

  constructor(data?: PartialMessage<SerialsReviewsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.SerialsReviewsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: SerialReview, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsReviewsList {
    return new SerialsReviewsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsReviewsList {
    return new SerialsReviewsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsReviewsList {
    return new SerialsReviewsList().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsReviewsList | PlainMessage<SerialsReviewsList> | undefined, b: SerialsReviewsList | PlainMessage<SerialsReviewsList> | undefined): boolean {
    return proto3.util.equals(SerialsReviewsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message tcube.SerialsReviewsServicePaginationReq
 */
export class SerialsReviewsServicePaginationReq extends Message<SerialsReviewsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SERIAL_REVIEW_SORT_KEY sort_key = 5;
   */
  sortKey = SERIAL_REVIEW_SORT_KEY.SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 7;
   */
  productUuid = "";

  constructor(data?: PartialMessage<SerialsReviewsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.SerialsReviewsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SERIAL_REVIEW_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsReviewsServicePaginationReq {
    return new SerialsReviewsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsReviewsServicePaginationReq {
    return new SerialsReviewsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsReviewsServicePaginationReq {
    return new SerialsReviewsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsReviewsServicePaginationReq | PlainMessage<SerialsReviewsServicePaginationReq> | undefined, b: SerialsReviewsServicePaginationReq | PlainMessage<SerialsReviewsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(SerialsReviewsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message tcube.SerialReviewPaginationResp
 */
export class SerialReviewPaginationResp extends Message<SerialReviewPaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated tcube.SerialReview payload = 3;
   */
  payload: SerialReview[] = [];

  constructor(data?: PartialMessage<SerialReviewPaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.SerialReviewPaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: SerialReview, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialReviewPaginationResp {
    return new SerialReviewPaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialReviewPaginationResp {
    return new SerialReviewPaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialReviewPaginationResp {
    return new SerialReviewPaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: SerialReviewPaginationResp | PlainMessage<SerialReviewPaginationResp> | undefined, b: SerialReviewPaginationResp | PlainMessage<SerialReviewPaginationResp> | undefined): boolean {
    return proto3.util.equals(SerialReviewPaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message tcube.SerialsReviewsServiceFilterReq
 */
export class SerialsReviewsServiceFilterReq extends Message<SerialsReviewsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SERIAL_REVIEW_SORT_KEY sort_key = 5;
   */
  sortKey = SERIAL_REVIEW_SORT_KEY.SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * UUID of the serial
   *
   * @generated from field: string serial_uuid = 9;
   */
  serialUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 10;
   */
  productUuid = "";

  /**
   * The name of the serial review
   *
   * @generated from field: string name = 20;
   */
  name = "";

  constructor(data?: PartialMessage<SerialsReviewsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.SerialsReviewsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SERIAL_REVIEW_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsReviewsServiceFilterReq {
    return new SerialsReviewsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsReviewsServiceFilterReq {
    return new SerialsReviewsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsReviewsServiceFilterReq {
    return new SerialsReviewsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsReviewsServiceFilterReq | PlainMessage<SerialsReviewsServiceFilterReq> | undefined, b: SerialsReviewsServiceFilterReq | PlainMessage<SerialsReviewsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(SerialsReviewsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message tcube.SerialsReviewsServiceSearchAllReq
 */
export class SerialsReviewsServiceSearchAllReq extends Message<SerialsReviewsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: tcube.SERIAL_REVIEW_SORT_KEY sort_key = 5;
   */
  sortKey = SERIAL_REVIEW_SORT_KEY.SERIAL_REVIEW_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * UUID of the serial
   *
   * @generated from field: string serial_uuid = 7;
   */
  serialUuid = "";

  /**
   * UUID of the product
   *
   * @generated from field: string product_uuid = 8;
   */
  productUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<SerialsReviewsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "tcube.SerialsReviewsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(SERIAL_REVIEW_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "serial_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "product_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SerialsReviewsServiceSearchAllReq {
    return new SerialsReviewsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SerialsReviewsServiceSearchAllReq {
    return new SerialsReviewsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SerialsReviewsServiceSearchAllReq {
    return new SerialsReviewsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: SerialsReviewsServiceSearchAllReq | PlainMessage<SerialsReviewsServiceSearchAllReq> | undefined, b: SerialsReviewsServiceSearchAllReq | PlainMessage<SerialsReviewsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(SerialsReviewsServiceSearchAllReq, a, b);
  }
}

