// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file templates.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";

/**
 *
 * Stores the available templates
 *
 * @generated from enum scanswift.TEMPLATE_TYPE
 */
export enum TEMPLATE_TYPE {
  /**
   * Stores an invalid template, which is the default template
   *
   * @generated from enum value: TEMPLATE_TYPE_ANY_UNSPECIFIED = 0;
   */
  TEMPLATE_TYPE_ANY_UNSPECIFIED = 0,

  /**
   * Stores a template for A4 paper, with 0-0-0-0 TRBM margins, and 0mm X margin and 0mm Y margin between QR codes, and 53mm width and 30mm height, with 24mm QR code size, and 12 font size
   *
   * @generated from enum value: TEMPLATE_TYPE_A4_0T0R0B0L_0X0Y_53W_30H_16QR_7F = 1;
   */
  TEMPLATE_TYPE_A4_0T0R0B0L_0X0Y_53W_30H_16QR_7F = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(TEMPLATE_TYPE)
proto3.util.setEnumType(TEMPLATE_TYPE, "scanswift.TEMPLATE_TYPE", [
  { no: 0, name: "TEMPLATE_TYPE_ANY_UNSPECIFIED" },
  { no: 1, name: "TEMPLATE_TYPE_A4_0T0R0B0L_0X0Y_53W_30H_16QR_7F" },
]);

/**
 *
 * Describes the available sort keys for retrieving templates
 *
 * @generated from enum scanswift.TEMPLATE_SORT_KEY
 */
export enum TEMPLATE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: TEMPLATE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  TEMPLATE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: TEMPLATE_SORT_KEY_CREATED_AT = 1;
   */
  TEMPLATE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: TEMPLATE_SORT_KEY_MODIFIED_AT = 2;
   */
  TEMPLATE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: TEMPLATE_SORT_KEY_NAME = 10;
   */
  TEMPLATE_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: TEMPLATE_SORT_KEY_CODE = 11;
   */
  TEMPLATE_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(TEMPLATE_SORT_KEY)
proto3.util.setEnumType(TEMPLATE_SORT_KEY, "scanswift.TEMPLATE_SORT_KEY", [
  { no: 0, name: "TEMPLATE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "TEMPLATE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "TEMPLATE_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "TEMPLATE_SORT_KEY_NAME" },
  { no: 11, name: "TEMPLATE_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the necessary data structure during creation of a template
 *
 * @generated from message scanswift.TemplatesServiceCreateRequest
 */
export class TemplatesServiceCreateRequest extends Message<TemplatesServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The name of the template
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Description of the template
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The template type
   *
   * @generated from field: scanswift.TEMPLATE_TYPE type = 13;
   */
  type = TEMPLATE_TYPE.TEMPLATE_TYPE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<TemplatesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.TemplatesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "type", kind: "enum", T: proto3.getEnumType(TEMPLATE_TYPE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemplatesServiceCreateRequest {
    return new TemplatesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemplatesServiceCreateRequest {
    return new TemplatesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemplatesServiceCreateRequest {
    return new TemplatesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TemplatesServiceCreateRequest | PlainMessage<TemplatesServiceCreateRequest> | undefined, b: TemplatesServiceCreateRequest | PlainMessage<TemplatesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(TemplatesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a template
 *
 * @generated from message scanswift.TemplatesServiceUpdateRequest
 */
export class TemplatesServiceUpdateRequest extends Message<TemplatesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * The name of the template
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Description of the template
   *
   * @generated from field: string description = 12;
   */
  description = "";

  constructor(data?: PartialMessage<TemplatesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.TemplatesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemplatesServiceUpdateRequest {
    return new TemplatesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemplatesServiceUpdateRequest {
    return new TemplatesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemplatesServiceUpdateRequest {
    return new TemplatesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TemplatesServiceUpdateRequest | PlainMessage<TemplatesServiceUpdateRequest> | undefined, b: TemplatesServiceUpdateRequest | PlainMessage<TemplatesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(TemplatesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each template on the platform
 *
 * @generated from message scanswift.Template
 */
export class Template extends Message<Template> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: scanswift.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * The name of the template
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the template
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Description of the template
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The template type
   *
   * @generated from field: scanswift.TEMPLATE_TYPE type = 13;
   */
  type = TEMPLATE_TYPE.TEMPLATE_TYPE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<Template>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.Template";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "type", kind: "enum", T: proto3.getEnumType(TEMPLATE_TYPE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Template {
    return new Template().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Template {
    return new Template().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Template {
    return new Template().fromJsonString(jsonString, options);
  }

  static equals(a: Template | PlainMessage<Template> | undefined, b: Template | PlainMessage<Template> | undefined): boolean {
    return proto3.util.equals(Template, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of templates
 *
 * @generated from message scanswift.TemplatesList
 */
export class TemplatesList extends Message<TemplatesList> {
  /**
   * List of templates
   *
   * @generated from field: repeated scanswift.Template list = 1;
   */
  list: Template[] = [];

  constructor(data?: PartialMessage<TemplatesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.TemplatesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Template, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemplatesList {
    return new TemplatesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemplatesList {
    return new TemplatesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemplatesList {
    return new TemplatesList().fromJsonString(jsonString, options);
  }

  static equals(a: TemplatesList | PlainMessage<TemplatesList> | undefined, b: TemplatesList | PlainMessage<TemplatesList> | undefined): boolean {
    return proto3.util.equals(TemplatesList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message scanswift.TemplatesServicePaginationReq
 */
export class TemplatesServicePaginationReq extends Message<TemplatesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.TEMPLATE_SORT_KEY sort_key = 5;
   */
  sortKey = TEMPLATE_SORT_KEY.TEMPLATE_SORT_KEY_ID_UNSPECIFIED;

  constructor(data?: PartialMessage<TemplatesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.TemplatesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(TEMPLATE_SORT_KEY) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemplatesServicePaginationReq {
    return new TemplatesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemplatesServicePaginationReq {
    return new TemplatesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemplatesServicePaginationReq {
    return new TemplatesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: TemplatesServicePaginationReq | PlainMessage<TemplatesServicePaginationReq> | undefined, b: TemplatesServicePaginationReq | PlainMessage<TemplatesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(TemplatesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message scanswift.TemplatePaginationResp
 */
export class TemplatePaginationResp extends Message<TemplatePaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated scanswift.Template payload = 3;
   */
  payload: Template[] = [];

  constructor(data?: PartialMessage<TemplatePaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.TemplatePaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Template, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemplatePaginationResp {
    return new TemplatePaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemplatePaginationResp {
    return new TemplatePaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemplatePaginationResp {
    return new TemplatePaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: TemplatePaginationResp | PlainMessage<TemplatePaginationResp> | undefined, b: TemplatePaginationResp | PlainMessage<TemplatePaginationResp> | undefined): boolean {
    return proto3.util.equals(TemplatePaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message scanswift.TemplatesServiceFilterReq
 */
export class TemplatesServiceFilterReq extends Message<TemplatesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.TEMPLATE_SORT_KEY sort_key = 5;
   */
  sortKey = TEMPLATE_SORT_KEY.TEMPLATE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The name of the template
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * Code of the template
   *
   * @generated from field: string code = 21;
   */
  code = "";

  constructor(data?: PartialMessage<TemplatesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.TemplatesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(TEMPLATE_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemplatesServiceFilterReq {
    return new TemplatesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemplatesServiceFilterReq {
    return new TemplatesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemplatesServiceFilterReq {
    return new TemplatesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: TemplatesServiceFilterReq | PlainMessage<TemplatesServiceFilterReq> | undefined, b: TemplatesServiceFilterReq | PlainMessage<TemplatesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(TemplatesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message scanswift.TemplatesServiceSearchAllReq
 */
export class TemplatesServiceSearchAllReq extends Message<TemplatesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.TEMPLATE_SORT_KEY sort_key = 5;
   */
  sortKey = TEMPLATE_SORT_KEY.TEMPLATE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<TemplatesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.TemplatesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(TEMPLATE_SORT_KEY) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TemplatesServiceSearchAllReq {
    return new TemplatesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TemplatesServiceSearchAllReq {
    return new TemplatesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TemplatesServiceSearchAllReq {
    return new TemplatesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: TemplatesServiceSearchAllReq | PlainMessage<TemplatesServiceSearchAllReq> | undefined, b: TemplatesServiceSearchAllReq | PlainMessage<TemplatesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(TemplatesServiceSearchAllReq, a, b);
  }
}

