// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file units.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";

/**
 *
 * Describes the available sort keys for retrieving units
 *
 * @generated from enum scanswift.UNIT_SORT_KEY
 */
export enum UNIT_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: UNIT_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  UNIT_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: UNIT_SORT_KEY_CREATED_AT = 1;
   */
  UNIT_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: UNIT_SORT_KEY_MODIFIED_AT = 2;
   */
  UNIT_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: UNIT_SORT_KEY_NAME = 10;
   */
  UNIT_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: UNIT_SORT_KEY_CODE = 11;
   */
  UNIT_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(UNIT_SORT_KEY)
proto3.util.setEnumType(UNIT_SORT_KEY, "scanswift.UNIT_SORT_KEY", [
  { no: 0, name: "UNIT_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "UNIT_SORT_KEY_CREATED_AT" },
  { no: 2, name: "UNIT_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "UNIT_SORT_KEY_NAME" },
  { no: 11, name: "UNIT_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the necessary data structure during creation of a unit
 *
 * @generated from message scanswift.UnitsServiceCreateRequest
 */
export class UnitsServiceCreateRequest extends Message<UnitsServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The name of the unit
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the unit
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Description of the unit
   *
   * @generated from field: string description = 12;
   */
  description = "";

  constructor(data?: PartialMessage<UnitsServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.UnitsServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitsServiceCreateRequest {
    return new UnitsServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitsServiceCreateRequest {
    return new UnitsServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitsServiceCreateRequest {
    return new UnitsServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnitsServiceCreateRequest | PlainMessage<UnitsServiceCreateRequest> | undefined, b: UnitsServiceCreateRequest | PlainMessage<UnitsServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(UnitsServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a unit
 *
 * @generated from message scanswift.UnitsServiceUpdateRequest
 */
export class UnitsServiceUpdateRequest extends Message<UnitsServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * The name of the unit
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the unit
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Description of the unit
   *
   * @generated from field: string description = 12;
   */
  description = "";

  constructor(data?: PartialMessage<UnitsServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.UnitsServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitsServiceUpdateRequest {
    return new UnitsServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitsServiceUpdateRequest {
    return new UnitsServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitsServiceUpdateRequest {
    return new UnitsServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnitsServiceUpdateRequest | PlainMessage<UnitsServiceUpdateRequest> | undefined, b: UnitsServiceUpdateRequest | PlainMessage<UnitsServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(UnitsServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each unit on the platform
 *
 * @generated from message scanswift.Unit
 */
export class Unit extends Message<Unit> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: scanswift.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * The name of the unit
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the unit
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Description of the unit
   *
   * @generated from field: string description = 12;
   */
  description = "";

  constructor(data?: PartialMessage<Unit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.Unit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Unit {
    return new Unit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Unit {
    return new Unit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Unit {
    return new Unit().fromJsonString(jsonString, options);
  }

  static equals(a: Unit | PlainMessage<Unit> | undefined, b: Unit | PlainMessage<Unit> | undefined): boolean {
    return proto3.util.equals(Unit, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of units
 *
 * @generated from message scanswift.UnitsList
 */
export class UnitsList extends Message<UnitsList> {
  /**
   * List of units
   *
   * @generated from field: repeated scanswift.Unit list = 1;
   */
  list: Unit[] = [];

  constructor(data?: PartialMessage<UnitsList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.UnitsList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Unit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitsList {
    return new UnitsList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitsList {
    return new UnitsList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitsList {
    return new UnitsList().fromJsonString(jsonString, options);
  }

  static equals(a: UnitsList | PlainMessage<UnitsList> | undefined, b: UnitsList | PlainMessage<UnitsList> | undefined): boolean {
    return proto3.util.equals(UnitsList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message scanswift.UnitsServicePaginationReq
 */
export class UnitsServicePaginationReq extends Message<UnitsServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.UNIT_SORT_KEY sort_key = 5;
   */
  sortKey = UNIT_SORT_KEY.UNIT_SORT_KEY_ID_UNSPECIFIED;

  constructor(data?: PartialMessage<UnitsServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.UnitsServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(UNIT_SORT_KEY) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitsServicePaginationReq {
    return new UnitsServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitsServicePaginationReq {
    return new UnitsServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitsServicePaginationReq {
    return new UnitsServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: UnitsServicePaginationReq | PlainMessage<UnitsServicePaginationReq> | undefined, b: UnitsServicePaginationReq | PlainMessage<UnitsServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(UnitsServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message scanswift.UnitPaginationResp
 */
export class UnitPaginationResp extends Message<UnitPaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated scanswift.Unit payload = 3;
   */
  payload: Unit[] = [];

  constructor(data?: PartialMessage<UnitPaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.UnitPaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Unit, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitPaginationResp {
    return new UnitPaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitPaginationResp {
    return new UnitPaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitPaginationResp {
    return new UnitPaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: UnitPaginationResp | PlainMessage<UnitPaginationResp> | undefined, b: UnitPaginationResp | PlainMessage<UnitPaginationResp> | undefined): boolean {
    return proto3.util.equals(UnitPaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message scanswift.UnitsServiceFilterReq
 */
export class UnitsServiceFilterReq extends Message<UnitsServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.UNIT_SORT_KEY sort_key = 5;
   */
  sortKey = UNIT_SORT_KEY.UNIT_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * The name of the unit
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * Code of the unit
   *
   * @generated from field: string code = 21;
   */
  code = "";

  constructor(data?: PartialMessage<UnitsServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.UnitsServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(UNIT_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitsServiceFilterReq {
    return new UnitsServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitsServiceFilterReq {
    return new UnitsServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitsServiceFilterReq {
    return new UnitsServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: UnitsServiceFilterReq | PlainMessage<UnitsServiceFilterReq> | undefined, b: UnitsServiceFilterReq | PlainMessage<UnitsServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(UnitsServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message scanswift.UnitsServiceSearchAllReq
 */
export class UnitsServiceSearchAllReq extends Message<UnitsServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.UNIT_SORT_KEY sort_key = 5;
   */
  sortKey = UNIT_SORT_KEY.UNIT_SORT_KEY_ID_UNSPECIFIED;

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  constructor(data?: PartialMessage<UnitsServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.UnitsServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(UNIT_SORT_KEY) },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnitsServiceSearchAllReq {
    return new UnitsServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnitsServiceSearchAllReq {
    return new UnitsServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnitsServiceSearchAllReq {
    return new UnitsServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: UnitsServiceSearchAllReq | PlainMessage<UnitsServiceSearchAllReq> | undefined, b: UnitsServiceSearchAllReq | PlainMessage<UnitsServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(UnitsServiceSearchAllReq, a, b);
  }
}

