// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file zones.proto (package scanswift, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Metadata, SORT_ORDER } from "./base_pb.js";

/**
 *
 * Describes the available zone types
 *
 * @generated from enum scanswift.ZONE_TYPE
 */
export enum ZONE_TYPE {
  /**
   * Used only for filter requests
   *
   * @generated from enum value: ZONE_TYPE_ANY_UNSPECIFIED = 0;
   */
  ZONE_TYPE_ANY_UNSPECIFIED = 0,

  /**
   * Manufacturing zone
   *
   * @generated from enum value: ZONE_TYPE_MANUFACTURING = 1;
   */
  ZONE_TYPE_MANUFACTURING = 1,

  /**
   * Packaging zone
   *
   * @generated from enum value: ZONE_TYPE_PACKAGING = 2;
   */
  ZONE_TYPE_PACKAGING = 2,

  /**
   * Shipping zone
   *
   * @generated from enum value: ZONE_TYPE_SHIPPING = 3;
   */
  ZONE_TYPE_SHIPPING = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ZONE_TYPE)
proto3.util.setEnumType(ZONE_TYPE, "scanswift.ZONE_TYPE", [
  { no: 0, name: "ZONE_TYPE_ANY_UNSPECIFIED" },
  { no: 1, name: "ZONE_TYPE_MANUFACTURING" },
  { no: 2, name: "ZONE_TYPE_PACKAGING" },
  { no: 3, name: "ZONE_TYPE_SHIPPING" },
]);

/**
 *
 * Describes the available sort keys for retrieving zones
 *
 * @generated from enum scanswift.ZONE_SORT_KEY
 */
export enum ZONE_SORT_KEY {
  /**
   * Fetch ordered results by id
   *
   * @generated from enum value: ZONE_SORT_KEY_ID_UNSPECIFIED = 0;
   */
  ZONE_SORT_KEY_ID_UNSPECIFIED = 0,

  /**
   * Fetch ordered results by the creation timestamp
   *
   * @generated from enum value: ZONE_SORT_KEY_CREATED_AT = 1;
   */
  ZONE_SORT_KEY_CREATED_AT = 1,

  /**
   * Fetch ordered results by the modified timestamp
   *
   * @generated from enum value: ZONE_SORT_KEY_MODIFIED_AT = 2;
   */
  ZONE_SORT_KEY_MODIFIED_AT = 2,

  /**
   * Fetch ordered results by name
   *
   * @generated from enum value: ZONE_SORT_KEY_NAME = 10;
   */
  ZONE_SORT_KEY_NAME = 10,

  /**
   * Fetch ordered results by code
   *
   * @generated from enum value: ZONE_SORT_KEY_CODE = 11;
   */
  ZONE_SORT_KEY_CODE = 11,
}
// Retrieve enum metadata with: proto3.getEnumType(ZONE_SORT_KEY)
proto3.util.setEnumType(ZONE_SORT_KEY, "scanswift.ZONE_SORT_KEY", [
  { no: 0, name: "ZONE_SORT_KEY_ID_UNSPECIFIED" },
  { no: 1, name: "ZONE_SORT_KEY_CREATED_AT" },
  { no: 2, name: "ZONE_SORT_KEY_MODIFIED_AT" },
  { no: 10, name: "ZONE_SORT_KEY_NAME" },
  { no: 11, name: "ZONE_SORT_KEY_CODE" },
]);

/**
 *
 * Describes the necessary data structure during creation of a zone
 *
 * @generated from message scanswift.ZonesServiceCreateRequest
 */
export class ZonesServiceCreateRequest extends Message<ZonesServiceCreateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * The name of the zone
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the zone
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Description of the zone
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The type of the zone
   *
   * @generated from field: scanswift.ZONE_TYPE type = 13;
   */
  type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<ZonesServiceCreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.ZonesServiceCreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "type", kind: "enum", T: proto3.getEnumType(ZONE_TYPE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ZonesServiceCreateRequest {
    return new ZonesServiceCreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ZonesServiceCreateRequest {
    return new ZonesServiceCreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ZonesServiceCreateRequest {
    return new ZonesServiceCreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ZonesServiceCreateRequest | PlainMessage<ZonesServiceCreateRequest> | undefined, b: ZonesServiceCreateRequest | PlainMessage<ZonesServiceCreateRequest> | undefined): boolean {
    return proto3.util.equals(ZonesServiceCreateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure to perform the update (draft/revision) operation on a zone
 *
 * @generated from message scanswift.ZonesServiceUpdateRequest
 */
export class ZonesServiceUpdateRequest extends Message<ZonesServiceUpdateRequest> {
  /**
   * Stores any comment that the user might add during this operation
   *
   * @generated from field: string user_comment = 1;
   */
  userComment = "";

  /**
   * The UUID of the resource that needs to be updated
   *
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  /**
   * The name of the zone
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the zone
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Description of the zone
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The type of the zone
   *
   * @generated from field: scanswift.ZONE_TYPE type = 13;
   */
  type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<ZonesServiceUpdateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.ZonesServiceUpdateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "type", kind: "enum", T: proto3.getEnumType(ZONE_TYPE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ZonesServiceUpdateRequest {
    return new ZonesServiceUpdateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ZonesServiceUpdateRequest {
    return new ZonesServiceUpdateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ZonesServiceUpdateRequest {
    return new ZonesServiceUpdateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ZonesServiceUpdateRequest | PlainMessage<ZonesServiceUpdateRequest> | undefined, b: ZonesServiceUpdateRequest | PlainMessage<ZonesServiceUpdateRequest> | undefined): boolean {
    return proto3.util.equals(ZonesServiceUpdateRequest, a, b);
  }
}

/**
 *
 * Describes the data structure of each zone on the platform
 *
 * @generated from message scanswift.Zone
 */
export class Zone extends Message<Zone> {
  /**
   * Stores the metadata of this resource
   *
   * @generated from field: scanswift.Metadata metadata = 1;
   */
  metadata?: Metadata;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 2;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * The name of the zone
   *
   * @generated from field: string name = 10;
   */
  name = "";

  /**
   * Code of the zone
   *
   * @generated from field: string code = 11;
   */
  code = "";

  /**
   * Description of the zone
   *
   * @generated from field: string description = 12;
   */
  description = "";

  /**
   * The type of the zone
   *
   * @generated from field: scanswift.ZONE_TYPE type = 13;
   */
  type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<Zone>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.Zone";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: Metadata },
    { no: 2, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "type", kind: "enum", T: proto3.getEnumType(ZONE_TYPE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Zone {
    return new Zone().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Zone {
    return new Zone().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Zone {
    return new Zone().fromJsonString(jsonString, options);
  }

  static equals(a: Zone | PlainMessage<Zone> | undefined, b: Zone | PlainMessage<Zone> | undefined): boolean {
    return proto3.util.equals(Zone, a, b);
  }
}

/**
 *
 * Describes the data structure that stores a list of zones
 *
 * @generated from message scanswift.ZonesList
 */
export class ZonesList extends Message<ZonesList> {
  /**
   * List of zones
   *
   * @generated from field: repeated scanswift.Zone list = 1;
   */
  list: Zone[] = [];

  constructor(data?: PartialMessage<ZonesList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.ZonesList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: Zone, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ZonesList {
    return new ZonesList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ZonesList {
    return new ZonesList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ZonesList {
    return new ZonesList().fromJsonString(jsonString, options);
  }

  static equals(a: ZonesList | PlainMessage<ZonesList> | undefined, b: ZonesList | PlainMessage<ZonesList> | undefined): boolean {
    return proto3.util.equals(ZonesList, a, b);
  }
}

/**
 *
 * Describes a pagination request to retrieve records
 *
 * @generated from message scanswift.ZonesServicePaginationReq
 */
export class ZonesServicePaginationReq extends Message<ZonesServicePaginationReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.ZONE_SORT_KEY sort_key = 5;
   */
  sortKey = ZONE_SORT_KEY.ZONE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  constructor(data?: PartialMessage<ZonesServicePaginationReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.ZonesServicePaginationReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ZONE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ZonesServicePaginationReq {
    return new ZonesServicePaginationReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ZonesServicePaginationReq {
    return new ZonesServicePaginationReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ZonesServicePaginationReq {
    return new ZonesServicePaginationReq().fromJsonString(jsonString, options);
  }

  static equals(a: ZonesServicePaginationReq | PlainMessage<ZonesServicePaginationReq> | undefined, b: ZonesServicePaginationReq | PlainMessage<ZonesServicePaginationReq> | undefined): boolean {
    return proto3.util.equals(ZonesServicePaginationReq, a, b);
  }
}

/**
 *
 * Describes the data structure that responds to a pagination request
 *
 * @generated from message scanswift.ZonePaginationResp
 */
export class ZonePaginationResp extends Message<ZonePaginationResp> {
  /**
   * The number of records in this payload
   *
   * @generated from field: int64 count = 1;
   */
  count = protoInt64.zero;

  /**
   * The total number of records that are available
   *
   * @generated from field: int64 total = 2;
   */
  total = protoInt64.zero;

  /**
   * The list of records
   *
   * @generated from field: repeated scanswift.Zone payload = 3;
   */
  payload: Zone[] = [];

  constructor(data?: PartialMessage<ZonePaginationResp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.ZonePaginationResp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "total", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "payload", kind: "message", T: Zone, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ZonePaginationResp {
    return new ZonePaginationResp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ZonePaginationResp {
    return new ZonePaginationResp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ZonePaginationResp {
    return new ZonePaginationResp().fromJsonString(jsonString, options);
  }

  static equals(a: ZonePaginationResp | PlainMessage<ZonePaginationResp> | undefined, b: ZonePaginationResp | PlainMessage<ZonePaginationResp> | undefined): boolean {
    return proto3.util.equals(ZonePaginationResp, a, b);
  }
}

/**
 *
 * Describes the base request payload of a filter search
 *
 * @generated from message scanswift.ZonesServiceFilterReq
 */
export class ZonesServiceFilterReq extends Message<ZonesServiceFilterReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.ZONE_SORT_KEY sort_key = 5;
   */
  sortKey = ZONE_SORT_KEY.ZONE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * The minimum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_start = 6;
   */
  creationTimestampStart = protoInt64.zero;

  /**
   * The maximum timestamp that needs to be considered to filter by creation
   *
   * @generated from field: int64 creation_timestamp_end = 7;
   */
  creationTimestampEnd = protoInt64.zero;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 8;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * The name of the zone
   *
   * @generated from field: string name = 20;
   */
  name = "";

  /**
   * Code of the zone
   *
   * @generated from field: string code = 21;
   */
  code = "";

  /**
   * The type of the zone
   *
   * @generated from field: scanswift.ZONE_TYPE type = 22;
   */
  type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<ZonesServiceFilterReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.ZonesServiceFilterReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ZONE_SORT_KEY) },
    { no: 6, name: "creation_timestamp_start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "creation_timestamp_end", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 20, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 21, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "type", kind: "enum", T: proto3.getEnumType(ZONE_TYPE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ZonesServiceFilterReq {
    return new ZonesServiceFilterReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ZonesServiceFilterReq {
    return new ZonesServiceFilterReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ZonesServiceFilterReq {
    return new ZonesServiceFilterReq().fromJsonString(jsonString, options);
  }

  static equals(a: ZonesServiceFilterReq | PlainMessage<ZonesServiceFilterReq> | undefined, b: ZonesServiceFilterReq | PlainMessage<ZonesServiceFilterReq> | undefined): boolean {
    return proto3.util.equals(ZonesServiceFilterReq, a, b);
  }
}

/**
 *
 * Describes the request payload for performing a generic search operation on records
 *
 * @generated from message scanswift.ZonesServiceSearchAllReq
 */
export class ZonesServiceSearchAllReq extends Message<ZonesServiceSearchAllReq> {
  /**
   * If true, then returns only active records. If false, then returns only inactive records
   *
   * @generated from field: bool is_active = 1;
   */
  isActive = false;

  /**
   * The number of records that need to be sent in the response. Returns all records if it is set to -1
   *
   * @generated from field: int64 count = 2;
   */
  count = protoInt64.zero;

  /**
   * The number that need to be offset by before fetching the records
   *
   * @generated from field: int64 offset = 3;
   */
  offset = protoInt64.zero;

  /**
   * The sort order that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.SORT_ORDER sort_order = 4;
   */
  sortOrder = SORT_ORDER.ASCENDING_UNSPECIFIED;

  /**
   * The sort key that is to be used to fetch the pagination response
   *
   * @generated from field: scanswift.ZONE_SORT_KEY sort_key = 5;
   */
  sortKey = ZONE_SORT_KEY.ZONE_SORT_KEY_ID_UNSPECIFIED;

  /**
   * UUID of the entity
   *
   * @generated from field: string entity_uuid = 6;
   */
  entityUuid = "";

  /**
   * UUID of the location
   *
   * @generated from field: string location_uuid = 9;
   */
  locationUuid = "";

  /**
   * Describes the key with which the search operation needs to be performed
   *
   * @generated from field: string search_key = 11;
   */
  searchKey = "";

  /**
   * The type of the zone
   *
   * @generated from field: scanswift.ZONE_TYPE type = 22;
   */
  type = ZONE_TYPE.ZONE_TYPE_ANY_UNSPECIFIED;

  constructor(data?: PartialMessage<ZonesServiceSearchAllReq>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "scanswift.ZonesServiceSearchAllReq";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "count", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sort_order", kind: "enum", T: proto3.getEnumType(SORT_ORDER) },
    { no: 5, name: "sort_key", kind: "enum", T: proto3.getEnumType(ZONE_SORT_KEY) },
    { no: 6, name: "entity_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "location_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "search_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 22, name: "type", kind: "enum", T: proto3.getEnumType(ZONE_TYPE) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ZonesServiceSearchAllReq {
    return new ZonesServiceSearchAllReq().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ZonesServiceSearchAllReq {
    return new ZonesServiceSearchAllReq().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ZonesServiceSearchAllReq {
    return new ZonesServiceSearchAllReq().fromJsonString(jsonString, options);
  }

  static equals(a: ZonesServiceSearchAllReq | PlainMessage<ZonesServiceSearchAllReq> | undefined, b: ZonesServiceSearchAllReq | PlainMessage<ZonesServiceSearchAllReq> | undefined): boolean {
    return proto3.util.equals(ZonesServiceSearchAllReq, a, b);
  }
}

